<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>A Design Scheme for Personal Cloud</title>
    <url>/2021/10/27/a-design-scheme-for-personal-cloud.html</url>
    <content><![CDATA[<blockquote>
<p>21 century is a data world, we generate data, we consume data, and we protect data. Want to do more? Maybe you can follow this article.</p>
</blockquote>
<span id="more"></span>

<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p>Nowdays, our personal data is growing bigger and bigger. Photos, videos, documents, all this kind of files fill in the computer, smart phone or external drive.</p>
<p>I can’t say they are all important for me, but some does mean a lot and I don’t want to lose them.</p>
<p>Meanwhile, our parents also generate many data exeryday, but they don’t even have any backup, if their mobile phone gets broken, they will lose everything.</p>
<p>What’s worse, the public cloud service is too expensive for normal people, you knwo we just want to store some photos, not something like the password of nuclear bomb. And the privacy is also a disputed issue.</p>
<p>Then I came up with the idea of building up a personal cloud service, it should be cheap and kind of reliable. Also, it would be better if we can use open source softwares.</p>
<p>I hope this article could help you.</p>
<h1 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h1><p>As a cloud, it must can be accessed remotely, thus we need a public IP address. And of course, to keep private, https will be considered, then a domain is needed as well.</p>
<p>To control the budget, it’s not acceptable to purchase a VPS with large storage capacity, a NAS would be a good choice. But the retail NAS is also too expensive, so I will make up one by myself, after all, it’s just a computer basically. Because the NAS is in the private network, some technology will be used to make it accessible.</p>
<p>After days of investigation, I got the following list:</p>
<p><strong>Hardware</strong></p>
<ul>
<li>CPU: Intel J3455</li>
<li>Motherboard: ASRock J3455-ITX (CPU included)</li>
<li>Memory: SK Hynix 8GB DDR3L dual channel</li>
<li>System drive: Intel 520 SSD 120GB</li>
<li>Data drive: WD Purple WD40EJRX 4TB * 2</li>
<li>Case: U-NAS NSC-201</li>
</ul>
<p><strong>Software</strong></p>
<ul>
<li>OS: Ubuntu Server 20.04</li>
<li>Cloud Service: Nextcloud</li>
<li>Reverse proxy: FRP &amp; Nginx</li>
<li>Filesystem: ZFS</li>
</ul>
<p><strong>VPS</strong></p>
<ul>
<li>Aliyun Simple Application Server</li>
</ul>
<p>The whole scheme is like this:</p>
<img src="/2021/10/27/a-design-scheme-for-personal-cloud/personal_cloud.png" class="">

<h1 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h1><p>Though budget matters, but we don’t want to lose data anyway. And the most dangerous situation is hardware broken, especially hard driver failure. To mitigate this condition, we will use a software RAID1, and it’s achieved by a mirror pool of ZFS.</p>
<p>To make use of ZFS on Ubuntu, we need to install it first:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install zfsutils-linux</span><br></pre></td></tr></table></figure>

<p>Then, suppose the data driver is <code>/dev/sdb</code> and <code>/dev/sdc</code>, to create a mirror pool named <code>storage</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zpool create storage mirror /dev/sdb /dev/sdc</span><br><span class="line">sudo zfs set mountpoint=none storage</span><br><span class="line">sudo zpool status</span><br></pre></td></tr></table></figure>

<p>Finally we create a ZFS filesystem for Nextcloud and mount it to <code>/var/www/nextcloud</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zfs create storage/nextcloud</span><br><span class="line">sudo zfs set mountpoint=/var/www/nextcloud storage/nextcloud</span><br></pre></td></tr></table></figure>

<h1 id="Nextcloud"><a href="#Nextcloud" class="headerlink" title="Nextcloud"></a>Nextcloud</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>We will install Nextcloud on Ubuntu Server 20.04.</p>
<ol>
<li><p>Install packages</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install apache2 mariadb-server libapache2-mod-php7.4 php7.4-gd php7.4-mysql php7.4-curl php7.4-mbstring php7.4-intl php7.4-gmp php7.4-bcmath php-imagick php7.4-xml php7.4-zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install Nextcloud</p>
<p>Goto <a href="https://nextcloud.com/install/">Nextcloud</a>, select <strong>Download for server</strong> and copy the link, then download and unpack the tarball, copy the <code>nextcloud</code> directory to webroot. We need to change the owner as well to make Apache be able to modify the files in it.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://download.nextcloud.com/server/releases/nextcloud-22.2.0.tar.bz2</span><br><span class="line">tar -xf nextcloud-22.2.0.tar.bz2</span><br><span class="line">sudo cp -r nextcloud /var/www/</span><br><span class="line">sudo chown -R www-data:www-data /var/www/nextcloud/</span><br></pre></td></tr></table></figure>
</li>
<li><p>Configure database</p>
<p>We will create a user as well as a database for Nextcloud. Please replace the <strong>username</strong> and <strong>password</strong> to the one you want.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;username&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">CREATE DATABASE IF NOT EXISTS nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br><span class="line">GRANT ALL PRIVILEGES ON nextcloud.* TO &#x27;username&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">quit;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Configure Apache</p>
<p>For security reasons, <code>https</code> will be used, thus we need to generate a self-signed certificate firstly.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out nextcloud.crt -keyout nextcloud.key</span><br><span class="line">sudo mv nextcloud.crt /etc/ssl/certs/</span><br><span class="line">sudo mv nextcloud.key /etc/ssl/private/</span><br></pre></td></tr></table></figure>

<p>Then create a new Apache config file for Nextcloud: <code>/etc/apache2/sites-available/nextcloud.conf</code>, with the following content:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_ssl.c&gt;</span><br><span class="line">        &lt;VirtualHost _default_:443&gt;</span><br><span class="line">                ServerName nextcloud.colorfulshark.net</span><br><span class="line"></span><br><span class="line">                &lt;IfModule mod_headers.c&gt;</span><br><span class="line">                        Header always set Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;</span><br><span class="line">                &lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">                DocumentRoot /var/www/nextcloud</span><br><span class="line"></span><br><span class="line">                ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">                CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line"></span><br><span class="line">                SSLEngine on</span><br><span class="line"></span><br><span class="line">                SSLCertificateFile      /etc/ssl/certs/nextcloud.crt</span><br><span class="line">                SSLCertificateKeyFile /etc/ssl/private/nextcloud.key</span><br><span class="line"></span><br><span class="line">                &lt;FilesMatch &quot;\.(cgi|shtml|phtml|php)$&quot;&gt;</span><br><span class="line">                                SSLOptions +StdEnvVars</span><br><span class="line">                &lt;/FilesMatch&gt;</span><br><span class="line">                &lt;Directory /usr/lib/cgi-bin&gt;</span><br><span class="line">                                SSLOptions +StdEnvVars</span><br><span class="line">                &lt;/Directory&gt;</span><br><span class="line">        &lt;/VirtualHost&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>Enable necessary Apache modules</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo a2enmod rewrite headers env dir mime ssl</span><br></pre></td></tr></table></figure>

<p>Enable Nextcloud website</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo a2ensite nextcloud.conf</span><br></pre></td></tr></table></figure>

<p>Reload Apache service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Configure Nextcloud</p>
<p>Now we can access the Nextcloud website in Chrome, because we are using self-signed certificate, the browser may refuse to open the website, we can simply type <strong>thisisunsafe</strong> on the blocked page.😂</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://10.0.0.10</span><br></pre></td></tr></table></figure>

<p>On this page, we need to input following information:</p>
<ul>
<li>admin username</li>
<li>admin password</li>
<li>data folder</li>
<li>mysql username</li>
<li>mysql password</li>
<li>mysql database name</li>
</ul>
<p>Finally, a welcome page will show up.</p>
</li>
</ol>
<h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><ol>
<li><p>Increate PHP memory limitation</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/php/7.4/apache2/php.ini</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">memory_limit = 512M</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Disable PHP <code>output_buffering</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/php/7.4/apache2/php.ini</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">output_buffering = Off</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Set <code>AllowOverride</code> to <code>All</code> for <code>/var/www/</code> to protect data</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apache2/apache2.conf</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable HTTP Strict Transport Security</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:443</span>&gt;</span></span><br><span class="line">  ServerName cloud.nextcloud.com</span><br><span class="line">    <span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mod_headers.c</span>&gt;</span></span><br><span class="line">      Header always set Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable SVG support for php-imagick</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install imagemagick</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable Memory caching</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install php-apcu</span><br><span class="line">sudo vim /var/www/nextcloud/config/config.php</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">&#x27;memcache.local&#x27; =&gt; &#x27;\OC\Memcache\APCu&#x27;,</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br><span class="line">sudo bash -c &quot;echo &#x27;apc.enable_cli = 1&#x27; &gt; /etc/php/7.4/cli/conf.d/enable-apc-cli.ini&quot;</span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>
</li>
<li><p>Setup phone region</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /var/www/nextcloud/config/config.php</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">&#x27;default_phone_region&#x27; =&gt; &#x27;CN&#x27;,</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Pretty URLs</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /var/www/nextcloud/config/config.php</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">&#x27;overwrite.cli.url&#x27; =&gt; &#x27;https://nextcloud.colorfulshark.net&#x27;,</span><br><span class="line">&#x27;htaccess.RewriteBase&#x27; =&gt; &#x27;/&#x27;,</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br><span class="line">sudo -u www-data php /var/www/nextcloud/occ maintenance:update:htaccess</span><br></pre></td></tr></table></figure>
</li>
<li><p>Setup Cron background job</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo crontab -u www-data -e</span><br><span class="line"></span><br><span class="line">*/5  *  *  *  * php -f /var/www/nextcloud/cron.php</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h1><p>This would be an interesting part, because we are going to make the Nextcloud be accessible remotely. </p>
<h2 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h2><p>To make use of https, we need a domain and set a <code>A</code> record to the IP address of VPS. Suppose the domain is <code>nextcloud.colorfulshark.net</code>.</p>
<p>A certificate is also needed  for https usage,  it can be registered from Letsencrypt.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su &amp;&amp; cd</span><br><span class="line">apt install openssl cron socat curl</span><br><span class="line">curl https://get.acme.sh | sh</span><br><span class="line">source ~/.bashrc</span><br><span class="line">~/.acme.sh/acme.sh --register-account -m colorfulshark@gmail.com</span><br><span class="line"></span><br><span class="line">domain=nextcloud.colorfulshark.net</span><br><span class="line">cert=/usr/local/etc/certs/nextcloud.colorfulshark.net.cert</span><br><span class="line">key=/usr/local/etc/certs/nextcloud.colorfulshark.net.key</span><br><span class="line">~/.acme.sh/acme.sh --issue -d $domain --standalone --keylength ec-256 --force</span><br><span class="line">~/.acme.sh/acme.sh --installcert -d $domain --ecc --fullchain-file $cert --key-file $key</span><br></pre></td></tr></table></figure>

<h2 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2><p>Because the NAS is in internal network, to access it remotely, we need to setup reverse proxy for Nextcloud web service by using <code>FRP</code>.</p>
<p><strong>VPS side</strong>: <code>/etc/frp/nextcloud.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">proxy_bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">7443</span></span><br><span class="line"><span class="attr">token</span> = password</span><br><span class="line"><span class="attr">tls_enable</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>NAS side</strong>: <code>/etc/frp/nextcloud.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = nextcloud.colorfulshark.net</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = password</span><br><span class="line"><span class="attr">tls_only</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">tls_enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[nextcloud]</span></span><br><span class="line"><span class="attr">type</span> = https</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">443</span></span><br><span class="line"><span class="attr">custom_domains</span> = nextcloud.colorfulshark.net</span><br></pre></td></tr></table></figure>

<p>Then accessing <code>localhost:7443</code> on VPS is equal to accessing <code>localhost:443</code> on NAS.</p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Though FRP supports TLS for https reverse proxy, Nginx would be better. Because there may exist many web services on VPS and they all use https. By using Nginx, we can proxy pass these services by identifying domain and path.</p>
<p><strong>VPS side</strong></p>
<p><code>/etc/nginx/sites-available/nextcloud.colorfulshark.net</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_certificate</span>       /usr/local/etc/certs/nextcloud.colorfulshark.net.cert;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span>   /usr/local/etc/certs/nextcloud.colorfulshark.net.key;</span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">  <span class="attribute">ssl_session_cache</span> shared:MozSSL:<span class="number">10m</span>;</span><br><span class="line">  <span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_protocols</span>         TLSv1.<span class="number">3</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span>           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;</span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">server_name</span>           nextcloud.colorfulshark.net;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">proxy_ssl_name</span> <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> https://127.0.0.1:7443;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">1024m</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Enable this site and resart Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/nextcloud.colorfulshark.net /etc/nginx/sites-enabled/</span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>

<h2 id="Nextcloud-1"><a href="#Nextcloud-1" class="headerlink" title="Nextcloud"></a>Nextcloud</h2><p>Yes, we are back to Nextcloud again, because Nextcloud only accepts the request from trusted domains, thus we need to let it trust <code>nextcloud.colorfulshark.net</code> as well.</p>
<p><strong>Nas side</strong></p>
<p><code>/var/www/nextcloud/config/config.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;trusted_domains&#x27;</span> =&gt;</span><br><span class="line"><span class="keyword">array</span> (</span><br><span class="line">  <span class="number">0</span> =&gt; <span class="string">&#x27;10.0.0.10&#x27;</span>,</span><br><span class="line">  <span class="number">1</span> =&gt; <span class="string">&#x27;nextcloud.colorfulshark.net&#x27;</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<p>Now you can assess the Nextcloud through <code>https://nextcloud.colorfulshark.net</code>.</p>
<h1 id="Maintenance"><a href="#Maintenance" class="headerlink" title="Maintenance"></a>Maintenance</h1><ul>
<li><p>Upgrade</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -u www-data php /var/www/nextcloud/updater/updater.phar</span><br><span class="line">sudo -u www-data php /var/www/nextcloud/occ upgrade</span><br><span class="line">sudo -u www-data php /var/www/nextcloud/occ maintenance:mode --off</span><br></pre></td></tr></table></figure>
</li>
<li><p>Backup database</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">number=$(($(date +%u) % 2))</span><br><span class="line">db_file=&quot;nextcloud_$&#123;number&#125;.sql&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">enter maintenance mode</span></span><br><span class="line">sudo -u www-data php --define /var/www/nextcloud/occ maintenance:mode --on</span><br><span class="line"></span><br><span class="line">mysqldump --single-transaction --default-character-set=utf8mb4 nextcloud &gt; /var/www/nextcloud/backup/$db_file</span><br><span class="line">sync</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">exit</span> maintenance mode</span></span><br><span class="line">sudo -u www-data php --define /var/www/nextcloud/occ maintenance:mode --off</span><br></pre></td></tr></table></figure>

<p>And set a cron job</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo crontab -e</span><br><span class="line"></span><br><span class="line">0 5 * * * /var/www/nextcloud/backup/backup_db.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>Restore database</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql -e &quot;DROP DATABASE nextcloud&quot;</span><br><span class="line">sudo mysql -e &quot;CREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci&quot;</span><br><span class="line">sudo mysql nextcloud &lt; nextcloud_0.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>Restore from system reinstallation</p>
<ol>
<li><p>Install all necessary packages</p>
</li>
<li><p>Restore <strong>nextcloud</strong> database</p>
</li>
<li><p>Create database user and grant permission</p>
</li>
<li><p>Finish all configuration and optimization</p>
</li>
</ol>
</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://docs.nextcloud.com/server/latest/admin_manual/installation/example_ubuntu.html">https://docs.nextcloud.com/server/latest/admin_manual/installation/example_ubuntu.html</a></p>
<p><a href="https://docs.nextcloud.com/server/latest/admin_manual/installation/source_installation.html">https://docs.nextcloud.com/server/latest/admin_manual/installation/source_installation.html</a></p>
<p><a href="https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/occ_command.html">https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/occ_command.html</a></p>
<p><a href="https://docs.nextcloud.com/server/latest/admin_manual/maintenance/backup.html">https://docs.nextcloud.com/server/latest/admin_manual/maintenance/backup.html</a></p>
<p><a href="https://docs.nextcloud.com/server/latest/admin_manual/maintenance/restore.html">https://docs.nextcloud.com/server/latest/admin_manual/maintenance/restore.html</a></p>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>nextcloud</tag>
        <tag>zfs</tag>
        <tag>nginx</tag>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu（Debian）下烧写全志A33系统镜像</title>
    <url>/2018/04/30/a33-flash-firmware-under-ubuntu.html</url>
    <content><![CDATA[<blockquote>
<p>最近从箱底翻出来一个平板，是当时参加一个培训机构赠（购）送（买）的。不过工作之后就没碰过了，附有完整的Android和LinuxQt的源代码，全志A33平台，还是挺有可玩性，所以就搭建了开发环境，因为给的文档里说是在Windows下进行烧录。但是我使用的纯Linux环境，而且烧写程序无非就是向一个USB设备写数据，不存在系统限制，所以Google到了全志的一个Linux平台烧录工具——LiveSuit。</p>
</blockquote>
<p>参考：<a href="http://linux-sunxi.org/LiveSuit">LiveSuit wiki</a></p>
<span id="more"></span>

<h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/colorfulshark/sunxi-livesuite.git</span><br><span class="line">cd sunxi-livesuite</span><br></pre></td></tr></table></figure>

<h1 id="编译USB驱动"><a href="#编译USB驱动" class="headerlink" title="编译USB驱动"></a>编译USB驱动</h1><p>全志针对自己设备的烧录所开发USB设备驱动——awusb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install dkms</span><br><span class="line">sudo cp -r awusb /usr/src/awdev-0.5</span><br><span class="line">sudo dkms add -m awdev -v 0.5</span><br><span class="line">sudo dkms build -m awdev -v 0.5</span><br><span class="line">sudo dkms install -m awdev -v 0.5</span><br></pre></td></tr></table></figure>

<h1 id="修改udev规则"><a href="#修改udev规则" class="headerlink" title="修改udev规则"></a>修改udev规则</h1><p>这一步的目的是让你能使用普通用户权限执行烧录工具，因为设备节点默认是只有root用户可访问的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/udev/rules.d/10-local.rules</span><br><span class="line"></span><br><span class="line"># 注意将&lt;your group&gt;替换为用户所在的组，一般跟你的用户名一样</span><br><span class="line">SUBSYSTEM!=&quot;usb_device&quot;, ACTION!=&quot;add&quot;, GOTO=&quot;objdev_rules_end&quot;</span><br><span class="line">#USBasp</span><br><span class="line">ATTRS&#123;idVendor&#125;==&quot;1f3a&quot;, ATTRS&#123;idProduct&#125;==&quot;efe8&quot;, GROUP=&quot;&lt;your group&gt;&quot;,</span><br><span class="line">MODE=&quot;0666&quot;</span><br><span class="line">LABEL=&quot;objdev_rules_end&quot;</span><br><span class="line"></span><br><span class="line"># 重启udev服务</span><br><span class="line"># sysvinit:</span><br><span class="line">sudo service udev restart</span><br><span class="line"></span><br><span class="line"># systemd</span><br><span class="line">sudo systemctl restart udev.service</span><br></pre></td></tr></table></figure>

<h1 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像"></a>烧录镜像</h1><p>首先进入刚才克隆的源码的根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./LiveSuit.sh</span><br></pre></td></tr></table></figure>

<p>可以看到烧录工具已经启动</p>
<img src="/2018/04/30/a33-flash-firmware-under-ubuntu/livesuit-start.png" class="" title="livesuit start up">

<p>烧录的方式软件里面已经介绍，但如果你的设备有reset键的话，可以使用下面的方式，因为我的设备在LinuxQt环境下用电源键是关不了机的，所以只能这样。</p>
<ol>
<li>打开烧录工具</li>
<li>将设备与电脑连接</li>
<li>按住音量键，然后按一下复位键，并连续短按几次电源键</li>
<li>开始烧录</li>
</ol>
<img src="/2018/04/30/a33-flash-firmware-under-ubuntu/livesuit-ready.png" class="" title="livesuit ready to flash">

<img src="/2018/04/30/a33-flash-firmware-under-ubuntu/livesuit-flashing.png" class="" title="livesuit is flashing">

<img src="/2018/04/30/a33-flash-firmware-under-ubuntu/livesuit-finish.png" class="" title="livesuit finish flashing">

<img src="/2018/04/30/a33-flash-firmware-under-ubuntu/fspad-board.png" class="" title="fspad board">
]]></content>
      <categories>
        <category>Embedded</category>
      </categories>
      <tags>
        <tag>全志</tag>
        <tag>a33</tag>
        <tag>烧写</tag>
        <tag>ubuntu</tag>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>与小灰灰的恋爱实践</title>
    <url>/2021/02/15/best-practice-of-loving-with-zyh.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="978f251e9063ae8d9031fa94bdba63437bfbbfb6509c428a0a659ae6d3b9ee06"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>恋爱</tag>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>Best Practice with FRP</title>
    <url>/2021/10/16/best-practice-with-frp.html</url>
    <content><![CDATA[<blockquote>
<p>FRP is a tool for reverse proxy. By using FRP, we can easily expose service in local network to public internet. Though the official documents provides some configurations for specific condition, it can still be confusing for new users. Thus I would like to record how I use it.</p>
</blockquote>
<span id="more"></span>

<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>FRP doesn’t provide any installation script, maybe because it’s quite easy to run under command. But FRP does provided systemd configs, thus we can manage FRP service though systemd.</p>
<p>Download latest tarball from <a href="https://github.com/fatedier/frp/releases/">FRP Binary</a> and unpack it, then execute following command to install on Linux with systemd:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on frp client</span></span><br><span class="line">mkdir /etc/frp</span><br><span class="line">cp frpc /usr/bin</span><br><span class="line">cp frpc_full.ini /etc/</span><br><span class="line">cp systemd/frpc@.service /lib/systemd/system/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on frp server</span></span><br><span class="line">mkdir /etc/frp</span><br><span class="line">cp frps /usr/bin</span><br><span class="line">cp frps_full.ini /etc/</span><br><span class="line">cp systemd/frps@.service /lib/systemd/system/</span><br></pre></td></tr></table></figure>

<h1 id="Configration"><a href="#Configration" class="headerlink" title="Configration"></a>Configration</h1><p>You may notice that we use <strong>frpc@.service</strong> rather than <strong>frpc.service</strong>, this is a kind of systemd grammar. We can append extra string after <strong>@</strong>, and systemd will use the config file with the same name.</p>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><ul>
<li><p>Add config file <code>/etc/frp/ssh.ini</code></p>
<p>Local sshd listens at <code>127.0.0.1:22</code> and we would like to access it through <code>&lt;server ip&gt;:7022</code> . Multiple client can make use of the same server with different tag <code>[ssh]</code> and different <code>remote_port</code>.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = &lt;ip or domain&gt;</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = &lt;password&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7022</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable and start service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable frpc@ssh</span><br><span class="line">systemctl start frpc@ssh</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><ul>
<li><p>Add config file <code>/etc/frp/ssh.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = &lt;password&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable and start service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable frps@ssh</span><br><span class="line">systemctl start frps@ssh</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Http-service-with-Nginx"><a href="#Http-service-with-Nginx" class="headerlink" title="Http service with Nginx"></a>Http service with Nginx</h2><p>Under this condition, we have a <strong>http service</strong> in local network and would like to access it through Nginx.</p>
<h3 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h3><ul>
<li><p>Add config file <code>/etc/frp/http.ini</code></p>
<p>Suppose we have a local http server listening at <code>http://127.0.0.1:80</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = &lt;ip or domain&gt;</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = &lt;password&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">[http_service]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">custom_domains</span> = &lt;bound doamin&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable and start service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable frpc@http</span><br><span class="line">systemctl start frpc@http</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h3><ul>
<li><p>Add config file <code>/etc/frp/http.ini</code></p>
<p>In this config, FRP server will listen at <code>0.0.0.0:7000</code>, and the exposed http service will listen at <code>127.0.0.1:7080</code>. The <strong>limitation</strong> is that <strong>1</strong> server can only serve <strong>1</strong> client if you don’t use the <strong>locations</strong>, while FRP can not rewrite URL path as this work should belong to Nginx.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">proxy_bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">7080</span></span><br><span class="line"><span class="attr">token</span> = &lt;password&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable and start service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable frps@http</span><br><span class="line">systemctl start frps@http</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add Nginx location</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:7080/;</span><br><span class="line">  <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Https-service-with-Nginx"><a href="#Https-service-with-Nginx" class="headerlink" title="Https service with Nginx"></a>Https service with Nginx</h2><p>Under this condition, we have a <strong>https service</strong> in local network and would like to access it through Nginx. You may ask: Why use <strong>https</strong> for internal service? Well, sometimes this can happen and we can not change, such as <strong>Proxmox VE</strong>, it only supports https for web service, and it’s hard to switch to http.</p>
<h3 id="Client-2"><a href="#Client-2" class="headerlink" title="Client"></a>Client</h3><ul>
<li><p>Add config file <code>/etc/frp/https.ini</code></p>
<p>Suppose we have a local https service <code>https://127.0.0.1:443</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = &lt;ip or domain&gt;</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = <span class="string">&#x27;password&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[proxmox]</span></span><br><span class="line"><span class="attr">type</span> = https</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">443</span></span><br><span class="line"><span class="attr">custom_domains</span> = &lt;bound domain&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable and start service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable frpc@https</span><br><span class="line">systemctl start frpc@https</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Server-2"><a href="#Server-2" class="headerlink" title="Server"></a>Server</h3><ul>
<li><p>Add config file <code>/etc/frp/https.ini</code></p>
<p>In this config, FRP server will listen at <code>0.0.0.0:7000</code>, and the exposed https service will listen at <code>127.0.0.1:7443</code>. The <strong>limitation</strong> is that <strong>1</strong> server can only serve <strong>1</strong> client if you don’t use the <strong>locations</strong>, while FRP can not rewrite URL path as this work should belong to Nginx.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">proxy_bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">7443</span></span><br><span class="line"><span class="attr">token</span> = &lt;password&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enable and start service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable frps@https</span><br><span class="line">systemctl start frps@https</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add Nginx location</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_ssl_server_name</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">proxy_ssl_name</span> <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_ssl_verify</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_pass</span> https://127.0.0.1:7443;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> cookie <span class="variable">$http_cookie</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Proxy-Connection <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>frp</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Best Practice with ZFS</title>
    <url>/2021/10/18/best-practice-with-zfs.html</url>
    <content><![CDATA[<blockquote>
<p>This article will introduce some practicality usage of ZFS file system.</p>
</blockquote>
<span id="more"></span>

<h1 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h1><h2 id="Pool-related"><a href="#Pool-related" class="headerlink" title="Pool related"></a>Pool related</h2><ul>
<li><p>Create a pool</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create a striped pool</span></span><br><span class="line">sudo zpool create new-pool /dev/sdb /dev/sdc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create a mirrored pool</span></span><br><span class="line">sudo zpool create new-pool mirror /dev/sdb /dev/sdc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">create a pool with specific mount point</span></span><br><span class="line">sudo zpool create -m /mnt/storage new-pool mirror /dev/sdb /dev/sdc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Set the mount point</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zfs set mountpoint=/mnt/storage new-pool</span><br></pre></td></tr></table></figure>
</li>
<li><p>Check status</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zpool status</span><br></pre></td></tr></table></figure>
</li>
<li><p>Destroy a pool</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zpool destroy new-pool</span><br></pre></td></tr></table></figure>
</li>
<li><p>Import a pool</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">scan existing pool</span></span><br><span class="line">sudo zpool import</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">import specific pool</span></span><br><span class="line">sudo zpool import new-pool</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Filesystem-related"><a href="#Filesystem-related" class="headerlink" title="Filesystem related"></a>Filesystem related</h2><ul>
<li><p>Create a filesysytem in a pool</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zfs create new-pool/new-fs</span><br></pre></td></tr></table></figure>
</li>
<li><p>Destroy a filesystem in a pool</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zfs destroy new-pool/new-fs</span><br></pre></td></tr></table></figure>
</li>
<li><p>List all filesystems in a pool</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zfs list</span><br></pre></td></tr></table></figure>
</li>
<li><p>Set mount point for a filesystem</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zfs set mountpoint=/mnt/storage new-pool</span><br><span class="line">sudo zfs set mountpoint=/mnt/new new-pool/new-fs</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Conditions"><a href="#Conditions" class="headerlink" title="Conditions"></a>Conditions</h1><ul>
<li><p>How to replace disk in a mirrored pool</p>
<ol>
<li><p>Shutdown system, replace the disk, then boot up</p>
</li>
<li><p>Check the <strong>ID</strong> of disk with <strong>UNAVAIL</strong> status by executing</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zpool status</span><br></pre></td></tr></table></figure>
</li>
<li><p>Replace with new disk <code>/dev/sdb</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zpool replace new-pool 4932927217405226991 /dev/sdb</span><br></pre></td></tr></table></figure>
</li>
<li><p>Check status and wait for resilvering</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo zpool status</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ubuntu.com/tutorials/setup-zfs-storage-pool">Setup a ZFS storage pool</a></p>
<p><a href="https://jordanelver.co.uk/blog/2018/11/26/how-to-replace-a-failed-disk-in-a-zfs-mirror/">How to replace a failed disk in a ZFS mirror</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
  </entry>
  <entry>
    <title>在QEMU中启动U-Boot和内核</title>
    <url>/2021/01/30/boot-kernel-in-uboot-from-qemu.html</url>
    <content><![CDATA[<blockquote>
<p>作为Linux内核工程师，QEMU是日常工作中经常接触的一个虚拟化工具，通过其CPU以及外设的模拟能力，我们很容易搭建出一套用于测试或开发的虚拟环境。以前在使用时通常都是直接去引导内核，但其实QEMU并不只是能够引导内核，任何拥有硬件初始化和管理能力的二进制程序它都可以引导运行。今天我们就使用qemu引导uboot，并在uboot中启动内核。</p>
</blockquote>
<span id="more"></span>

<h1 id="为什么要使用U-Boot"><a href="#为什么要使用U-Boot" class="headerlink" title="为什么要使用U-Boot"></a>为什么要使用U-Boot</h1><p>既然QEMU本身就具备引导Linux内核的功能，我们为什么还要先引导U-Boot呢？我想主要有一下几点好处：</p>
<ul>
<li>U-Boot能够提供更灵活的内核引导方式，它不仅可以从本地获取内核文件，还能通过网络获取</li>
<li>U-Boot可以提供更完整的调试环境，如果直接使用QEMU，我们就很难看到bootloader做了哪些事情</li>
<li>对于嵌入式系统的学习，U-Boot也是重要的一环，因此了解其工作原理有时也很重要</li>
<li>对于跨平台模拟，如Arm，当涉及到DTB加载和引导压缩内核镜像的时候，QEMU有时并不能正确处理</li>
</ul>
<h1 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h1><p>QEMU在主流的发行版中都可以直接从源上下载安装。</p>
<ul>
<li><strong>Arch:</strong> <code>pacman -S qemu</code></li>
<li><strong>Debian&#x2F;Ubuntu:</strong> <code>apt-get install qemu</code></li>
<li><strong>Fedora:</strong> <code>dnf install @virtualization</code></li>
<li><strong>Gentoo:</strong> <code>emerge --ask app-emulation/qemu</code></li>
<li><strong>RHEL&#x2F;CentOS:</strong> <code>yum install qemu-kvm</code></li>
<li><strong>SUSE:</strong> <code>zypper install qemu</code></li>
</ul>
<p>当然也可以从源码编译安装，参考QEMU网站的<a href="https://www.qemu.org/download/#source">Build instructions</a>。</p>
<p>QEMU为每一种Arch生成一个对应的可执行程序，我们主要关注以下两个程序：</p>
<ul>
<li><p><strong>qemu-system-arm</strong>: 模拟32位Arm CPU，如Arm9&#x2F;Arm11、Cortex-A7&#x2F;A9&#x2F;A15</p>
</li>
<li><p><strong>qemu-system-aarch64</strong>: 模拟64位Arm CPU，如Cortex-A53&#x2F;A57</p>
</li>
</ul>
<p>可以通过<code>qemu-system-arm -machine help</code>来查看支持哪些开发板的模拟。</p>
<p>这里我们使用 vexpress-a9 这款开发板。vexpress-a9 是 Arm 公司自己设计的一款 4 核 Cortex-A9 开发板，U-Boot、Linux Kernel 和 QEMU 对这款开发板都做了完整的支持。</p>
<h1 id="安装交叉编译器"><a href="#安装交叉编译器" class="headerlink" title="安装交叉编译器"></a>安装交叉编译器</h1><p>请参照这篇文章安装所需的交叉编译工具链：</p>
<p><a href="https://blog.colorfulshark.net/2021/01/30/install-cross-toolchain-for-arm.html">《安装Arm交叉编译工具链》</a></p>
<h1 id="编译U-Boot"><a href="#编译U-Boot" class="headerlink" title="编译U-Boot"></a>编译U-Boot</h1><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://gitlab.denx.de/u-boot/u-boot.git</span><br></pre></td></tr></table></figure>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make vexpress_ca9x4_defconfig</span><br><span class="line">make CROSS_COMPILE=arm-linux-gnueabihf- all</span><br></pre></td></tr></table></figure>

<p>最终编译生成ELF格式的可执行文件 u-boot 和纯二进制文件u-boot.bin，其中 QEMU 可以启动的为ELF格式的可执行文件 u-boot。</p>
<h1 id="编译文件系统"><a href="#编译文件系统" class="headerlink" title="编译文件系统"></a>编译文件系统</h1><p>这里我们使用Buildroot来快速构建一个我们需要的文件系统。</p>
<h2 id="下载源码-1"><a href="#下载源码-1" class="headerlink" title="下载源码"></a>下载源码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://git.buildroot.net/buildroot</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先进入menuconfig：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>Target options</strong></p>
<ul>
<li><p>Target Architecture: <code>ARM (little endian)</code></p>
<p>大部分 Arm 都是小端模式，所以选上<strong>little endian</strong>。</p>
</li>
<li><p>Target Architecture Variant: <code>cortex-A9</code></p>
<p>这款开发板的 CPU 是 cortex-A9。</p>
</li>
<li><p>Enable VFP extension support: <code>enable</code></p>
</li>
<li><p>Target ABI: <code>EABIhf</code></p>
<p>我们将使用Linaro GCC进行编译，Linaro的GCC默认都打开了hardfloat的支持，所以选上<strong>VFP extension和EABIhf</strong>。</p>
</li>
</ul>
</li>
<li><p><strong>Build options</strong></p>
<ul>
<li><p>Location to save buildroot config: <code>ca9_mini_defconfig</code></p>
<p>该选项是设置最后生成的配置文件的保存路径，buildroot可以针对不同的板子生成特定的defconfig文件，默认保存在configs目录下。自己修改各项配置后，执行make savedefconfig命令，就会生成新的defconfig文件。下次编译之前，可以直接执行<code>make ca9_mini_defconfig</code>命令来加载已有的配置。</p>
</li>
<li><p>Download dir</p>
<p>该选项设置 buildroot 下载的各种第三方包的存储路径，默认在 dl 目录下。</p>
</li>
</ul>
</li>
<li><p><strong>Toolchain</strong></p>
<ul>
<li><p>Toolchain type: <code>External toolchain</code></p>
</li>
<li><p>Toolchain: <code>Custom toolchain</code></p>
<p>因为这里使用电脑上自己安装的toolchain，所以我们这里选<strong>External toolchain</strong>和<strong>Custom toolchain</strong>。</p>
</li>
<li><p>Toolchain path: <code>/usr/local/toolchain/gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf</code></p>
<p>然后在<strong>Toolchain path</strong>中填写toolchian在电脑上安装的位置。</p>
</li>
<li><p>Toolchain prefix: <code>$(ARCH)-none-linux-gnueabihf</code></p>
<p>另外要注意<strong>Toolchain prefix</strong>这个前缀别写错。</p>
</li>
<li><p>External toolchain gcc version: <code>10.x</code></p>
<p>设置toolchain的版本。</p>
</li>
<li><p>External toolchain kernel headers series: <code>4.20.x</code></p>
<p>设置用来编译这个toolchain的内核头文件的内核的版本。这个版本可以在toolchain里面的version.h这个文件查到，打开这个文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;toolchain_location&#125;/arm-linux-gnueabihf/libc/usr/include/linux/version.h</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">define LINUX_VERSION_CODE 267277</span></span><br></pre></td></tr></table></figure>

<p>267277对应的16进制为0x4140D，如果版本号为M.m.p，那么</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">M = ( LINUX_VERSION_CODE &gt;&gt; <span class="number">16</span> ) &amp; <span class="number">0xFF</span> <span class="comment">/* 0x04 = 4 */</span></span><br><span class="line">m = ( LINUX_VERSION_CODE &gt;&gt; <span class="number">8</span>  ) &amp; <span class="number">0xFF</span> <span class="comment">/* 0x14 = 20 */</span></span><br><span class="line">p = ( LINUX_VERSION_CODE &gt;&gt; <span class="number">0</span>  ) &amp; <span class="number">0xFF</span> <span class="comment">/* 0x0D = 13 */</span></span><br></pre></td></tr></table></figure>

<p>所以我们设置为4.20.x。</p>
</li>
<li><p>External toolchain C library: <code>glibc/eglibc</code></p>
</li>
</ul>
</li>
<li><p><strong>System configuration</strong></p>
<ul>
<li><p>Run a getty (login prompt) after boot</p>
<ul>
<li><p>TTY port: <code>ttyAMA0</code></p>
<p>vexpress_a9内核启动的控制台的名字叫做ttyAMA0。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Filesystem images</strong></p>
<ul>
<li><p>cpio the root filesystem: <code>enable</code></p>
<ul>
<li>Compression method: <code>lz4</code></li>
</ul>
<p>我们把编译的rootfs以initramfs的形式和Linux Kernel链接在一起，为了让根文件系统镜像尽量小，可以对文件系统采用lz4压缩。</p>
</li>
</ul>
</li>
</ol>
<h2 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h1 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h1><h2 id="下载源码-2"><a href="#下载源码-2" class="headerlink" title="下载源码"></a>下载源码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git</span><br></pre></td></tr></table></figure>

<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>把前面buildroot编译的rootfs.cpio.lz4拷贝到Linux Kernel根目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp &#123;buildroot_dir&#125;/output/images/rootfs.cpio.lz4 ./</span><br></pre></td></tr></table></figure>

<p>然后加载vexpress_a9这块开发板的默认配置，并进入menuconfig做进一步配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make ARCH=arm vexpress_defconfig</span><br><span class="line">make ARCH=arm menuconfig</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>General setup</strong></p>
<ul>
<li>Initial RAM filesystem and RAM disk (initramfs&#x2F;initrd) support: <code>enable</code><ul>
<li>Initramfs source file(s): <code>rootfs.cpio.lz4</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Kernel hacking</strong></p>
<ul>
<li><p>printk and dmesg options</p>
<ul>
<li><p>Show timing information on printks: <code>enable</code></p>
<p>这样打印的内核 log 前面会附带有时间戳信息。</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="编译-2"><a href="#编译-2" class="headerlink" title="编译"></a>编译</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j8</span><br></pre></td></tr></table></figure>

<h1 id="启动QEMU"><a href="#启动QEMU" class="headerlink" title="启动QEMU"></a>启动QEMU</h1><p>QEMU可以模拟sd卡等外设。我们就把编译好的固件放在一个模拟的sd卡上，让QEMU从这张模拟的sd卡上启动Linux系统。</p>
<ol>
<li><p><strong>制作sd卡镜像，并将它格式化成fat格式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=sd.img bs=4096 count=4096</span><br><span class="line">mkfs.vfat sd.img</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>把编译好的kernel zImage和DTB文件拷贝到sd.img中</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mount sd.img /mnt/ -o loop,rw</span><br><span class="line">sudo cp arch/arm/boot/zImage /mnt/</span><br><span class="line">sudo cp arch/arm/boot/dts/vexpress-v2p-ca9.dtb /mnt/</span><br><span class="line">sudo umount /mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在QEMU中启动U-Boot</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -m 512M -kernel $&#123;u-boot_dir&#125;/u-boot -nographic  -sd sd.img</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>从sd卡中加载Linux Kernel和DTB</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fatload mmc 0:0 0x62008000 zImage</span><br><span class="line">fatload mmc 0:0 0x64008000 vexpress-v2p-ca9.dtb</span><br></pre></td></tr></table></figure>

<p>这里面的0x62008000和0x64008000分别对应zImage和dtb文件在内存中的加载地址。我们可以在<code>arch/arm/Makefile</code>里面搜索<code>textofs</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">141 textofs-y       := 0x00008000</span><br></pre></td></tr></table></figure>

<p>这个<code>textofs</code>定义的就是Linux Kernel zImage执行地址对应的内存偏移地址，默认偏移为0x8000。</p>
<p>在U-Boot命令行中输入<code>bdinfo</code>命令，可以查到这块开发板内存的起始地址：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">=&gt; bdinfo</span><br><span class="line">boot_params = <span class="number">0x60002000</span></span><br><span class="line">DRAM bank   = <span class="number">0x00000000</span></span><br><span class="line">-&gt; start    = <span class="number">0x60000000</span></span><br><span class="line">-&gt; size     = <span class="number">0x20000000</span></span><br></pre></td></tr></table></figure>

<p>可以看到这块开发板的内存其实地址为0x60000000，所以对应内核的起始地址为：0x62008000。DTB的加载地址没有特别的要求，一般注意和 Linux Kernel Image 避开，不要重叠即可。</p>
</li>
<li><p><strong>通过<code>bootz</code>命令启动Linux Kernel</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bootz 0x62008000 - 0x64008000</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Embedded</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>uboot</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>为Debian编译内核的deb安装包</title>
    <url>/2019/01/04/build-kernel-deb-for-debian.html</url>
    <content><![CDATA[<blockquote>
<p>手里面有一台北美的VPS，网络状况不太稳定，早就听说了Google的全新TCP拥塞算法BBR，所以打算尝试一下。该拥塞算法实际已经合入主线内核，但是为了获得最好的效果，这里我将编译谷歌专为开发BBR而创建的内核——net-next。替换内核的同时需要替换内核模块，因此将内核编译为deb安装包将更加便于管理。</p>
</blockquote>
<span id="more"></span>

<h1 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h1><p>这里的所有操作在Debian9下进行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">following packages are used to build kernel, you may need more</span></span><br><span class="line">sudo apt install build-essential libncurses5-dev git flex bison wget bzip2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">following packages are used to build kernel package</span></span><br><span class="line">sudo apt install kernel-package fakeroot</span><br></pre></td></tr></table></figure>

<h1 id="获取内核源码"><a href="#获取内核源码" class="headerlink" title="获取内核源码"></a>获取内核源码</h1><p>这里我以Google用来开发BBR的内核net-next为例。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git linux-kernel</span><br></pre></td></tr></table></figure>

<h1 id="配置与编译"><a href="#配置与编译" class="headerlink" title="配置与编译"></a>配置与编译</h1><p>配置内核需要config文件，你可以使用内核中的x86默认配置，也可以将本机的配置文件复制到源码目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd linux-kernel</span><br><span class="line">make clean &amp;&amp; make mrproper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> you want to use default config</span></span><br><span class="line">make x86_64_defconfig</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or use <span class="built_in">local</span> machine config</span></span><br><span class="line">cp /boot/config-`uname -r` ./.config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">configure anything you want</span></span><br><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<p>这里并不直接使用make编译，而是使用make-kpkg，搭配fakeroot来编译内核安装包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make-kpkg clean</span><br><span class="line">fakeroot make-kpkg --initrd --append-to-version=-custom kernel_image kernel_headers</span><br></pre></td></tr></table></figure>

<p>最后，在上级目录中就可以找到编译好的linux-image和linux-headers。</p>
<h1 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h1><p>要安装新内核，需要首先卸载旧的内核，安装好之后，还要更新grub，否则机器将无法启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WARNING, following <span class="built_in">command</span> will remove your kernel!</span></span><br><span class="line">dpkg -l | grep linux-image | awk &#x27;&#123;print $2&#125;&#x27; | xargs -I &#123;&#125; sudo apt purge &#123;&#125; -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install new kernel</span></span><br><span class="line">sudo dpkg -i linux-image*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">update grub</span></span><br><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>kernel</tag>
        <tag>linux</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title>将树莓派打造为无线中继</title>
    <url>/2018/01/06/build-wireless-bridge-with-raspberry-pi.html</url>
    <content><![CDATA[<blockquote>
<p>让树莓派进行wifi中继，最简单的方式是安装OpenWrt或者LEDE，然后通过Luci界面可以方便的进行操作，前提是你的无线网卡能够在OpenWrt下顺利驱动。<br>由于我需要中继5G信号，所以选购了一款支持双频的USB无线网卡，主控为RTL8812AU，Realtek实际上间接提供了Linux下网卡驱动的源码，在Github上可以搜索到很多，但是无奈这个驱动交叉编译完成后insmod到OpenWrt和LEDE并不能很好的驱动网卡，无奈之下只好使用Raspbian，通过相关配置来完成需求。</p>
</blockquote>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>已经安装完Raspbian的树莓派，且能够通过串口、SSH或者显示器登陆</li>
<li>网线</li>
<li>电脑</li>
</ul>
<p>这里我假设你已经在树莓派上安装好了系统，因为树莓派安装系统并不复杂，所以这里不过多赘述。</p>
<h1 id="配置网桥"><a href="#配置网桥" class="headerlink" title="配置网桥"></a>配置网桥</h1><p>可能很多人会不解：添加网桥的作用是什么，通过树莓派的以太网口不是已经可以很好的通信了吗？<br>不知道你有没有想过一个问题，为什么你把网线插到路由器上随便一个lan口，都可以ping通192.168.1.1（假设你的网关是这个），那几个lan口也有IP吗？路由器的lan口到底有什么特殊之处？<br>学过计算机网络的童鞋应该知道，网桥是一个工作在二层的设备，目的是分离不同的碰撞域，设备之间直接通过mac地址通信。<br>在Linux系统中，假设我们有4个以太网卡，一个网桥，并且将这4个以太网卡设置为网桥的4个接口，同时将网卡设置为混杂模式，那么我们就得到了一个虚拟的网桥设备，如果再为网桥设置一个IP，那么这个网桥就是传说中的lan了。<br>实际上基于Linux系统的路由器正是这么做的，在OpenWrt的终端下使用ifconfig命令可以看到一个br-lan的接口，那就是虚拟网桥。</p>
<p>明白了原理，接下来只要知道如何创建网桥并分配接口，配置IP就行了，首先需要安装网桥配置工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install bridge-utils</span><br></pre></td></tr></table></figure>

<p>然后输入如下命令，即可完成配置，更详细的使用方法可以参考man手册。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brctl addbr br-lan</span><br><span class="line">brctl addif br-lan eth0</span><br><span class="line">ifconfig br-lan 192.168.1.1 up</span><br><span class="line">ifconfig eth0 0.0.0.0 up</span><br></pre></td></tr></table></figure>

<h1 id="配置IP转发"><a href="#配置IP转发" class="headerlink" title="配置IP转发"></a>配置IP转发</h1><p>一般的Linux发行版默认都不会开启ip_forward，因为正常的计算机都是作为终端，没有转发数据报的需求，因此需要手动打开。</p>
<h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>

<h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">+ net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>

<h2 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>

<h1 id="配置iptables"><a href="#配置iptables" class="headerlink" title="配置iptables"></a>配置iptables</h1><p>如果我们中继的是运营商的wifi，那么可能会获得一个公网的IP，这种情况下想让内网的所有设备共享这一个公网IP，需要在wlan0网口启用nat。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<h1 id="安装DHCP-x2F-DNS服务器"><a href="#安装DHCP-x2F-DNS服务器" class="headerlink" title="安装DHCP&#x2F;DNS服务器"></a>安装DHCP&#x2F;DNS服务器</h1><p>作为一台准路由器，插在上面的设备最好能够自动获取IP，这里我选用的是dnsmasq，因为科学上网比较方便。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install dnsmasq</span><br><span class="line">vim /etc/dnsmasq.conf</span><br><span class="line">+ dhcp-range=192.168.1.50,192.168.1.150,255.255.255.0,12h</span><br></pre></td></tr></table></figure>

<p>dnsmasq的功能很强大，这里我仅仅使用了基础的DNS&#x2F;DHCP功能，你也可以根据自己的需求定制。</p>
<h1 id="在树莓派上连接WiFi"><a href="#在树莓派上连接WiFi" class="headerlink" title="在树莓派上连接WiFi"></a>在树莓派上连接WiFi</h1><p>通过图形界面连接wifi难度不大，这里主要说一下通过命令行连接wpa&#x2F;wpa2加密的wifi。<br>在Linux发行版中，一般都会集成一套wireless-tools，但是在树莓派中，同时还提供了wpa_supplicant，它基于C&#x2F;S模型，我们需要使用wpa_cli来和wpa_supplicant通信，完成相关设置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpa_cli</span><br></pre></td></tr></table></figure>
<p>然后会出现下面这样的命令行界面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpa_cli v2.4</span><br><span class="line">Copyright (c) 2004-2015, Jouni Malinen &lt;j@w1.fi&gt; and contributors</span><br><span class="line"></span><br><span class="line">This software may be distributed under the terms of the BSD license.</span><br><span class="line">See README for more details.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Selected interface &#x27;wlan0&#x27;</span><br><span class="line"></span><br><span class="line">Interactive mode</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span></span><br></pre></td></tr></table></figure>

<p>既然是命令行，就可以敲命令，首先扫描一下wifi</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scan</span><br></pre></td></tr></table></figure>

<p>然后读取一下扫描的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scan_result</span><br></pre></td></tr></table></figure>

<p>当看到你需要中继的wifi的SSID后，记下来，然后新建一个空网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_network</span><br></pre></td></tr></table></figure>

<p>此时会显示新建的网络的编号，如果没看清，可以查看一下当前所有配置过的热点信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list_network</span><br></pre></td></tr></table></figure>

<p>下面我们需要配置网络了，假设新建的网络编号为0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set_network 0 ssid &quot;OpenWrt&quot;</span><br><span class="line">set_network 0 psk &quot;1234567890&quot;</span><br></pre></td></tr></table></figure>

<p>最后选择一个网络进行连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select_network 0</span><br></pre></td></tr></table></figure>

<p>如果正常的话，就可以连接成功，可以查看当前状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">status</span><br></pre></td></tr></table></figure>

<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>此时，将无线路由器的wan口与树莓派的lan口连接，并设置为自动获取IP，就可以上网了。<br>这样可以将中继的接收方与发送方通过网线连接，因此灵活性更高，前提是你能给树莓派找到一个不会被偷的地方(¬､¬)</p>
]]></content>
      <categories>
        <category>Embedded</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>raspberrypi</tag>
        <tag>wireless</tag>
        <tag>bridge</tag>
      </tags>
  </entry>
  <entry>
    <title>在Debian下配置Samba服务器</title>
    <url>/2018/12/29/configure-samba-server-under-debian.html</url>
    <content><![CDATA[<blockquote>
<p>有时，我们需要在Windows下访问Linux下的文件，但又不想把文件权限搞乱，这时可以使用Samba将Linux下的文件共享给Windows。之所以不使用FTP，是因为它需要将文件下载后才能编辑；而基于SSH的SFTP则不被Windows原生支持，需要额外的客户端。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装Samba"><a href="#安装Samba" class="headerlink" title="安装Samba"></a>安装Samba</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure>

<h1 id="配置Samba"><a href="#配置Samba" class="headerlink" title="配置Samba"></a>配置Samba</h1><p>Samba的配置文件比较长，单纯的共享不需要进行复杂设置，只需要在配置文件<code>/etc/samba/smb.conf</code>最下方添加自定义的共享即可。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[my-share]</span></span><br><span class="line">   <span class="attr">comment</span> = my share directory</span><br><span class="line">   <span class="attr">path</span> = &lt;patch to you share directory&gt;</span><br><span class="line">   <span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">   read <span class="attr">only</span> = <span class="literal">no</span></span><br><span class="line">   guest <span class="attr">ok</span> = <span class="literal">no</span></span><br><span class="line">   create <span class="attr">mask</span> = <span class="number">0644</span></span><br><span class="line">   directory <span class="attr">mask</span> = <span class="number">0775</span></span><br></pre></td></tr></table></figure>

<p>如果想要搭建一个匿名访问的共享目录，可以使用下面的配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[anon-share]</span></span><br><span class="line">   <span class="attr">path</span> = &lt;patch to you share directory&gt;</span><br><span class="line">   <span class="attr">writeable</span> = <span class="literal">yes</span></span><br><span class="line">   <span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line">   <span class="attr">public</span> = <span class="literal">yes</span></span><br><span class="line">   create <span class="attr">mask</span> = <span class="number">0644</span></span><br><span class="line">   directory <span class="attr">mask</span> = <span class="number">0755</span></span><br><span class="line">   force <span class="attr">user</span> = &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h1 id="重启Samba服务"><a href="#重启Samba服务" class="headerlink" title="重启Samba服务"></a>重启Samba服务</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> you are using systemd</span></span><br><span class="line">sudo systemctl restart smbd.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> you are using sysvinit</span></span><br><span class="line">sudo service smbd restart</span><br></pre></td></tr></table></figure>

<h1 id="将用户添加到Samba"><a href="#将用户添加到Samba" class="headerlink" title="将用户添加到Samba"></a>将用户添加到Samba</h1><p>如果你发现自己的用户密码无法用来登陆Samba服务器，那么需要将用户添加到Samba。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo smbpasswd -a &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h1 id="在Windows下访问Samba服务器"><a href="#在Windows下访问Samba服务器" class="headerlink" title="在Windows下访问Samba服务器"></a>在Windows下访问Samba服务器</h1><h2 id="一般情况下"><a href="#一般情况下" class="headerlink" title="一般情况下"></a>一般情况下</h2><p>打开“网络”，系统会自动搜索网络上的Samba服务器，如果你发现了自己的服务器，直接点击然后登陆即可。</p>
<h2 id="特殊情况下"><a href="#特殊情况下" class="headerlink" title="特殊情况下"></a>特殊情况下</h2><p>某些情况下，比如本机与Samba服务器有多条网络连接，且速度各异，或者“网络发现”没有及时找到可用的Samba服务器时，可以手动访问Samba服务器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开Windows的资源管理器，在地址栏输入</span></span><br><span class="line">\\xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure>

<p>其中“xxx.xxx.xxx.xxx”为Samba服务器的IP地址，此时就可以指定某一网络直接访问Samba服务器了。</p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>samba</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Ftrace调试Linux内核</title>
    <url>/2019/12/07/debug-kernel-with-ftrace.html</url>
    <content><![CDATA[<blockquote>
<p>在进行内核调试时， 最长使用的方式就是<code>printk()</code>，由于<code>printk()</code>被设计成可以在任何上下文（进程上下文、中断上下文）执行，因此它会在执行过程中带来较大的开销，尤其是所调试的代码对时间很敏感时，比如时间中断。而ftrace则能够在输出log的同时，最大程度上降低调试带来的开销。</p>
</blockquote>
<span id="more"></span>

<h1 id="配置Ftrace"><a href="#配置Ftrace" class="headerlink" title="配置Ftrace"></a>配置Ftrace</h1><p>Ftrace的API接口位于DebugFS中，可以直接通过修改对应的文件来控制Ftrace，它们都位于</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/sys/kernel/debug/tracing</span><br></pre></td></tr></table></figure>

<p>如果没有该目录，首先检查DebugFS是否挂载，如果没有可以手动挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -v | grep debugfs</span><br><span class="line">mount -t debugfs debugfs /sys/kernel/debug</span><br></pre></td></tr></table></figure>

<p>然后检查相关的内核选项是否开启</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CONFIG_FUNCTION_TRACER</span><br><span class="line">CONFIG_FUNCTION_GRAPH_TRACER</span><br><span class="line">CONFIG_STACK_TRACER</span><br><span class="line">CONFIG_DYNAMIC_FTRACE</span><br></pre></td></tr></table></figure>

<p>以下的操作都在该目录中进行。</p>
<h1 id="启动-x2F-停止tracing"><a href="#启动-x2F-停止tracing" class="headerlink" title="启动&#x2F;停止tracing"></a>启动&#x2F;停止tracing</h1><p>开启Ftrace后虽然不会影响系统的功能，但是会对性能造成一定的影响，而且用于记录log的buffer空间有限，如果不及时停止，关键的数据就会被新数据覆盖。</p>
<h2 id="用户空间"><a href="#用户空间" class="headerlink" title="用户空间"></a>用户空间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">start tracing</span></span><br><span class="line">echo 1 &gt; tracing_on</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stop tracing</span></span><br><span class="line">echo 0 &gt; tracing_on</span><br></pre></td></tr></table></figure>

<h2 id="内核空间"><a href="#内核空间" class="headerlink" title="内核空间"></a>内核空间</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* start tracing */</span></span><br><span class="line">tracing_on();</span><br><span class="line"><span class="comment">/* stop tracing*/</span></span><br><span class="line">tracing_off();</span><br></pre></td></tr></table></figure>

<h1 id="Tracers"><a href="#Tracers" class="headerlink" title="Tracers"></a>Tracers</h1><p>Ftrace提供了多种tracer，每种tracer都会以特定的格式记录PID、TIMESTAMP、FUNCTION等数据，同一时刻只能选择一种tracer。</p>
<p>查看当前内核所支持的tracer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat available_tracers</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hwlat blk mmiotrace function_graph wakeup_dl wakeup_rt wakeup function nop</span><br></pre></td></tr></table></figure>

<p>要启用对应的tracer，直接将其名称echo到<code>current_tracer </code>中即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo function &gt; current_tracer</span><br></pre></td></tr></table></figure>

<p>通过<code>trace</code>文件可以直接读取抓取的log数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat trace</span><br></pre></td></tr></table></figure>

<p>下面介绍几种常用的tracer</p>
<h2 id="function-tracer"><a href="#function-tracer" class="headerlink" title="function tracer"></a>function tracer</h2><p>function tracer生成的log数据较为全面，但是对于函数的嵌套关系描述不是很直观。</p>
<p>抓取的log格式如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tracer: <span class="keyword">function</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># entries-in-buffer/entries-written: 410007/21079612   #P:8</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#                              _-----=&gt; irqs-off</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                            / _----=&gt; need-resched</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                           | / _---=&gt; hardirq/softirq</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                           || / _--=&gt; preempt-depth</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                           ||| /     delay</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          TASK-PID   CPU<span class="comment">#  ||||    TIMESTAMP  FUNCTION</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             | |       |   ||||       |         |</span></span><br><span class="line">             awk-8215  [006] d... 17018.301564: __mod_zone_page_state &lt;-release_pages</span><br></pre></td></tr></table></figure>

<p>第一函数是当前执行的函数，第二个是其调用者。</p>
<h2 id="function-graph-tracer"><a href="#function-graph-tracer" class="headerlink" title="function_graph tracer"></a>function_graph tracer</h2><p>function_graph tracer很适合分析内核代码的执行路径，以及性能优化。</p>
<p>抓取的log格式如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tracer: function_graph</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># CPU  DURATION                  FUNCTION CALLS</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">|     |   |                     |   |   |   |</span></span><br><span class="line"> 6)   0.546 us    |                  get_mem_cgroup_from_mm();</span><br><span class="line"> 6)               |                  memcg_kmem_charge_memcg() &#123;</span><br><span class="line"> 6)   0.325 us    |                    try_charge();</span><br><span class="line"> 6)   0.331 us    |                    page_counter_try_charge();</span><br><span class="line"> 6)   1.551 us    |                  &#125;</span><br><span class="line"> 6)   3.050 us    |                &#125; /* memcg_kmem_charge */</span><br><span class="line"> 6)   7.527 us    |              &#125; /* __alloc_pages_nodemask */</span><br><span class="line"> 6) + 10.066 us   |            &#125; /* alloc_pages_current */</span><br><span class="line"> 6)   0.365 us    |            inc_zone_page_state();</span><br><span class="line"> 6) + 11.301 us   |          &#125; /* pte_alloc_one */</span><br><span class="line"> 6)               |          filemap_map_pages() &#123;</span><br><span class="line"> 6)               |            alloc_set_pte() &#123;</span><br></pre></td></tr></table></figure>

<p>通过<strong>DURATION</strong>这一列可以看出每个函数的执行时间。</p>
<p>如果超过10微秒，则在前面会有“**+**”</p>
<p>如果超过100微秒，则在前面会有“**!**”</p>
<h1 id="添加自定义log"><a href="#添加自定义log" class="headerlink" title="添加自定义log"></a>添加自定义log</h1><p>有时，内核自带的trace point可能无法满足我们需求，这时，我们可以添加额外的trace log，并让其与原本的log结合起来。</p>
<h2 id="内核空间-——-trace-printk"><a href="#内核空间-——-trace-printk" class="headerlink" title="内核空间 —— trace_printk()"></a>内核空间 —— trace_printk()</h2><p>文章一开始就提到，虽然<code>printk()</code>使用起来简单，但是其开销较大，有时甚至会影响到我们对内核进行调试。</p>
<p>比如在调试scheduler或者network这种非常忙碌的子系统时，<code>printk()</code>会极大地拖慢系统性能，甚至造成死锁；而在调试一些竞态问题时，使用<code>printk()</code>甚至会让问题“消失”，或者难以复现。</p>
<p>而Ftrace提供的<code>trace_printk()</code>则可以用于这些调试场景，跟printk()一样，它也可以用于任何上下文中；不同的是，它不会把log输出到console，而是输出到一个独立的buffer。使用<code>trace_printk()</code>输出的log会与其它tracer输出的log结合。</p>
<p>在内核模块中测试<code>trace_printk()</code>，模块代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;colorfulshark@hotmail.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">hello_kernel_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        tracing_on();</span><br><span class="line">        trace_printk(<span class="string">&quot;hello kernel\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">hello_kernel_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">        trace_printk(<span class="string">&quot;goodbye kenrel\n&quot;</span>);</span><br><span class="line">        tracing_off();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(hello_kernel_init);</span><br><span class="line">module_exit(hello_kernel_exit);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当使用<strong>nop&#x2F;function</strong>作为tracer时，输出的log如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tracer: nop</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># entries-in-buffer/entries-written: 2/2   #P:8</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#                              _-----=&gt; irqs-off</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                            / _----=&gt; need-resched</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                           | / _---=&gt; hardirq/softirq</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                           || / _--=&gt; preempt-depth</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                           ||| /     delay</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          TASK-PID   CPU<span class="comment">#  ||||    TIMESTAMP  FUNCTION</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             | |       |   ||||       |         |</span></span><br><span class="line">          insmod-1442  [002] .... 23080.367994: 0xffffffffc044a005: hello kernel</span><br><span class="line">           rmmod-4353  [003] .... 23271.094110: 0xffffffffc044a025: goodbye kenrel</span><br></pre></td></tr></table></figure>
</li>
<li><p>当使用<strong>function_graph</strong>作为tracer时，自定义的log会以类似注释的形式出现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tracer: function_graph</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># CPU  DURATION                  FUNCTION CALLS</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">|     |   |                     |   |   |   |</span></span><br><span class="line"> 5)               |  /* hello kernel */</span><br><span class="line"> 6)   1.430 us    |  _raw_spin_unlock_irqrestore();</span><br><span class="line"> 5)               |  blocking_notifier_call_chain() &#123;</span><br><span class="line"> 5)               |    down_read() &#123;</span><br><span class="line"> 5)               |      _cond_resched() &#123;</span><br><span class="line"> 5)   0.195 us    |        rcu_all_qs();</span><br><span class="line"> 5)   0.627 us    |      &#125;</span><br><span class="line"> [...]</span><br><span class="line"> 2)               |      0xffffffffc044a030() &#123;</span><br><span class="line"> 5)   0.235 us    |                  rcu_cblist_dequeue();</span><br><span class="line"> 2)               |        /* goodbye kenrel */</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="用户空间-——-trace-marker"><a href="#用户空间-——-trace-marker" class="headerlink" title="用户空间 —— trace_marker"></a>用户空间 —— trace_marker</h2><p>在调试用户空间程序时，我们可能会希望能够同步了解内核里的状态，虽然Ftrace输出的log有时间戳，但它跟墙钟并没有非常精确的对应关系，所以最好的解决方法是让用户空间的程序有能力把log输出到Ftrace的buffer中，从而与tracer输出的log结合。使用trace_marker这个文件即可实现这个功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;hello trace&#x27; &gt; trace_marker</span><br></pre></td></tr></table></figure>

<p>其效果与在内核空间使用的<code>trace_printk()</code>相同。</p>
<h1 id="使用Ftrace调试oops"><a href="#使用Ftrace调试oops" class="headerlink" title="使用Ftrace调试oops"></a>使用Ftrace调试oops</h1><p>当内核崩溃时，我们通常只能获得崩溃发生时的上下文信息，但是对于崩溃之前发生的事却所知甚少，通过使用<strong>ftrace_dump_on_oops</strong>，即可在内核发生崩溃时，将Ftrace buffer中的内容打印到console上。这对于揭示崩溃发生的原因可能起到至关重要的作用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; ftrace_dump_on_oops</span><br></pre></td></tr></table></figure>

<p>使用<code>sysrq-z</code>可以手动触发这个过程，也可以直接在内核代码中使用<code>ftrace_dump()</code>来触发。</p>
<h1 id="使用Ftrace跟踪栈的使用"><a href="#使用Ftrace跟踪栈的使用" class="headerlink" title="使用Ftrace跟踪栈的使用"></a>使用Ftrace跟踪栈的使用</h1><p>因为内核栈空间非常有限，分析内核函数对于栈空间的使用可以用于优化内核代码。</p>
<p>要使用这个功能，首先要启动相应的内核选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CONFIG_STACK_TRACER</span><br></pre></td></tr></table></figure>

<p>虽然这个tracer是基于function tracer开发的，但是它使用独立的buffer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/kernel/stack_tracer_enabled</span><br></pre></td></tr></table></figure>

<p>如果需要从系统启动就开始记录栈的使用，将<code>stacktrace</code>加到内核的启动参数中即可。</p>
<ul>
<li><p>查看到目前为止被使用过的最大的栈</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat stack_max_size</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2728</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看每个函数使用的栈大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat stack_trace</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">      Depth    Size   Location    (15 entries)</span><br><span class="line">      -----    ----   --------</span><br><span class="line">0)     2840      64   __msecs_to_jiffies+0x5/0x30</span><br><span class="line">1)     2776      80   update_group_capacity+0x28/0x1f0</span><br><span class="line">2)     2696     384   find_busiest_group+0xff/0x9c0</span><br><span class="line">3)     2312     248   load_balance+0x164/0x9d0</span><br><span class="line">4)     2064     112   pick_next_task_fair+0x443/0x5b0</span><br><span class="line">5)     1952     104   __schedule+0x11e/0x880</span><br><span class="line">6)     1848      16   schedule+0x2c/0x80</span><br><span class="line">7)     1832     144   schedule_hrtimeout_range_clock+0x181/0x190</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Ftrace非常强大，但是通过DebugFS使用起来也非常复杂，以后会介绍基于Ftrace API接口的工具，比如trace-cmd，kernelshark，它们可以大大简化Ftrace的使用。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://lwn.net/Articles/365835/">Debugging the kernel using Ftrace - part 1</a></p>
<p><a href="https://lwn.net/Articles/366796/">Debugging the kernel using Ftrace - part 2</a></p>
<p><a href="https://www.kernel.org/doc/Documentation/trace/ftrace.txt">ftrace - Function Tracer</a></p>
]]></content>
      <categories>
        <category>Kernel</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>debug</tag>
        <tag>ftrace</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu（Debian）下配置全志A33开发环境</title>
    <url>/2018/05/03/environment-setup-for-a33-development.html</url>
    <content><![CDATA[<blockquote>
<p>之前参加某嵌入式培训机构，送了一个全志A33平台的平板，一开始看到全志平台，其实我是拒绝的 (￢_￢)，不过鉴于物尽其用（钱包空空）的原则，还是免为其难的玩耍一番。</p>
</blockquote>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 基本软件环境</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install git</span><br><span class="line"># 32位兼容库</span><br><span class="line">apt-get install lib32z1 lib32ncurses5</span><br><span class="line">apt-get install lib32stdc++6</span><br><span class="line"># 解决awk: line 2: function strtonum never defined</span><br><span class="line">sudo apt-get install gawk</span><br><span class="line"># uboot编译工具集</span><br><span class="line">sudo apt-get install u-boot-tools</span><br></pre></td></tr></table></figure>

<h1 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h1><p>注意，这个代码目前只适合我这个平板，不过据说这个培训机构学生不少，所以这个平板的保有量也应该比较多～～～</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/colorfulshark/fspad-a33.git</span><br></pre></td></tr></table></figure>
<h1 id="配置与编译"><a href="#配置与编译" class="headerlink" title="配置与编译"></a>配置与编译</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置工程</span><br><span class="line">./build.sh config</span><br><span class="line"># 编译工程</span><br><span class="line">./build.sh</span><br><span class="line"># 打包工程</span><br><span class="line">./build pack_debug</span><br></pre></td></tr></table></figure>

<h1 id="清理工程"><a href="#清理工程" class="headerlink" title="清理工程"></a>清理工程</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./build clean</span><br><span class="line">./build distclean</span><br></pre></td></tr></table></figure>

<h1 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像"></a>烧录镜像</h1><p>参见<a href="https://www.colorfulshark.net/2018/04/30/a33-flash-firmware-under-ubuntuhttps://www.colorfulshark.net/2018/04/30/a33-flash-firmware-under-ubuntu.html">在Ubuntu（Debian）下烧写全志A33系统镜像</a></p>
]]></content>
      <categories>
        <category>Embedded</category>
      </categories>
      <tags>
        <tag>a33</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hack China Unicom Optical Modem</title>
    <url>/2022/02/06/hack-chinaunicom-optical-modem.html</url>
    <content><![CDATA[<blockquote>
<p>Normally, in Fiber-to-Home condition, optical modem will take charge of PPPoE dialing, then the router connected to it will regard it as a gateway. Such scheme will lead to 2 limitations: Double NAT and Public IP restriction. To solve them, we need to hack the modem and make it working in bridge mode.</p>
</blockquote>
<span id="more"></span>

<h1 id="Extract-Database"><a href="#Extract-Database" class="headerlink" title="Extract Database"></a>Extract Database</h1><p>Though the web page of modem can be a good hack point, we will use a much more universal and geek way: connecting to modem though TTL.</p>
<img src="/2022/02/06/hack-chinaunicom-optical-modem/ttl.jpeg" class="">

<p>Because modem is basically an embeded board running Linux, the vendor will always preserve the serial port to do some debug conveniently. Theoretically, end users will never have anything to do with serial port, so the protection is pretty weak. For example, the password for <code>root</code> user is just <code>root</code>…</p>
<p>After logining into modem through TTL, what we need is the database located in</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/userconfig/cfg/db_user_cfg.xml</span><br></pre></td></tr></table></figure>

<p>As this file is encrypted, we need to transfer it from modem to laptop and do some decryption.</p>
<p>And the only transfer tool in modem is TFTP client, then a TFTP server will be required.</p>
<ul>
<li><p>Mac: <strong>Transfer</strong></p>
</li>
<li><p>WIndows: <strong>Tftpd64</strong></p>
</li>
<li><p>Linux: <strong>tftpd-hpa</strong></p>
</li>
</ul>
<p>Of course, before we start transfer, we need to connect laptop with the modem through an ethernet cable firstly. And set a static IP for laptop, such as <code>192.168.1.2</code>, according to the subnet of the modem.</p>
<p>Finally, we can start uploading the database to TFTP server by</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tftp -p -l /userconfig/cfg/db_user_cfg.xml 192.168.1.2</span><br></pre></td></tr></table></figure>

<h1 id="Decrypt-Database"><a href="#Decrypt-Database" class="headerlink" title="Decrypt Database"></a>Decrypt Database</h1><p>To decrypt the database, we will use a tool called <a href="http://aluigi.altervista.org/mytoolz/offzip.zip">offzip</a>. It needs to be compiled mannually on MacOS or Linux.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd offzip</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>Then decrypt with</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./offzip -a ./db_user_cfg.xml ./ 0</span><br></pre></td></tr></table></figure>

<p>There will be many files being decompressed out, what we need are the files with <code>xml</code> extention.</p>
<p>Then search <code>admin</code> in those <code>xml</code> files and find out the admin password.</p>
<h1 id="Admin-Account"><a href="#Admin-Account" class="headerlink" title="Admin Account"></a>Admin Account</h1><p>For me, to open the web page for admin login, I need to append <code>/cu.html</code> after the IP of modem, such as</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://192.168.1.1/cu.html</span><br></pre></td></tr></table></figure>

<p>Now, do everything you want.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://moy.cat/2021/09/%E8%AE%B0%E4%B8%AD%E5%85%B4-f477v2-%E6%96%B0%E7%89%88%E5%9B%BA%E4%BB%B6%E6%94%B9%E6%A1%A5%E6%8E%A5/">记中兴 F477V2 新版固件改桥接 &#x2F; 末影随想</a></p>
<p><a href="https://www.codenong.com/cs107096858/">[教程] 中兴光猫f477V2改固话桥接，支持电脑、手机SIP APP拨打</a></p>
<p><a href="http://aluigi.altervista.org/mytoolz.htm">Luigi Auriemma</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
  </entry>
  <entry>
    <title>Cache工作流程</title>
    <url>/2020/01/04/hardware-cache-access-example.html</url>
    <content><![CDATA[<p>Cache出现的目的是为了弥补CPU与内存之间速度不匹配的状况，如果要访问的内存地址的内容已经存在于Cache中，那么CPU就无需访问速度较慢的内存。本文通过一个内存访问的例子，简单介绍两种Cache模型，以及它们是如何工作的。</p>
<span id="more"></span>

<h1 id="Cache-Line"><a href="#Cache-Line" class="headerlink" title="Cache Line"></a>Cache Line</h1><p>Cache的理论基础是程序的局部性原理，当访问了某个不在Cache中的内存地址后，通过将相关内存地址的数据迁移到Cache中，降低再次需要访问内存的概率。</p>
<p>从内存向Cache迁移数据是以Line Size为基础单位，假如Line Size是32Byte，那么每次迁移都是32Byte。</p>
<p>当给定一个内存地址时，我们怎样让其与Cache Line中的某个具体Byte对应呢？参照内存分页机制，不妨也将内存地址拆分为几组，这就引申出了Set，Tag和Offset三个概念。</p>
<p>整个Cache空间被分为若干个Set，每个Set包含若干个Cache Line，每个Cache Line用Tag标识，当找到对应的Cache Line后，使用Offset来确定在Cache Line中的偏移。</p>
<p>根据每个Set中Cache Line的数量，Cache可以分为<strong>直接映射</strong>、<strong>组相联</strong>和<strong>全相联</strong>三种。</p>
<h1 id="Direct-Mapped"><a href="#Direct-Mapped" class="headerlink" title="Direct Mapped"></a>Direct Mapped</h1><p>在直接映射模式中，每个Set只有1个Cache Line，假设我们的Cache有128Byte，每个Cache Line有32Byte，内存地址是12bit（通常来说是32bit或者64bit，为简单起见使用12bit），那么</p>
<p>Offset &#x3D; log(32) &#x3D; 5bit，即使用5bit作为在Cache Line中的索引</p>
<p>Set &#x3D; log(128&#x2F;32&#x2F;1) &#x3D; log(4) &#x3D; 2bit，其中1表示每个Set有1个Cache Line</p>
<p>Tag &#x3D; 12 - 5 -2 &#x3D; 5bit，剩下的bit用于标识Cache Line</p>
<p>即内存地址被分割为</p>
<table>
<thead>
<tr>
<th align="center">Addr</th>
<th align="center">Tag</th>
<th align="center">Set</th>
<th align="center">Offset</th>
</tr>
</thead>
<tbody><tr>
<td align="center">12bit</td>
<td align="center">5bit</td>
<td align="center">2bit</td>
<td align="center">5bit</td>
</tr>
<tr>
<td align="center">0x070</td>
<td align="center">00000</td>
<td align="center">11</td>
<td align="center">10000</td>
</tr>
</tbody></table>
<p>对应的Cache空间布局如下表所示</p>
<table>
<thead>
<tr>
<th align="center">Set</th>
<th align="center">Valid</th>
<th align="center">Tag (Line)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">00</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">01</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>当我们在访问内存时，首先把内存地址划分为Tag、Set和Offset，然后根据Set选择对应的组，如果Valid字段为1，并且Tag字段匹配，那么Cache命中，否则Cache未命中，需要把内存中1 Line的数据存储到对应的Cache Line。</p>
<p>假如我们有一组待访问的内存地址，那么第一次访问以及第二次访问的命中情况如下表所示。</p>
<table>
<thead>
<tr>
<th align="center">Addr</th>
<th align="center">Tag</th>
<th align="center">Set</th>
<th align="center">Offset</th>
<th align="center">1st</th>
<th align="center">2nd</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0x070</td>
<td align="center">00000</td>
<td align="center">11</td>
<td align="center">10000</td>
<td align="center">M</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0x080</td>
<td align="center">00001</td>
<td align="center">00</td>
<td align="center">00000</td>
<td align="center">M</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">0x068</td>
<td align="center">00000</td>
<td align="center">11</td>
<td align="center">01000</td>
<td align="center">H</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0x190</td>
<td align="center">00011</td>
<td align="center">00</td>
<td align="center">10000</td>
<td align="center">M</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">0x084</td>
<td align="center">00001</td>
<td align="center">00</td>
<td align="center">00100</td>
<td align="center">M</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">0x178</td>
<td align="center">00010</td>
<td align="center">11</td>
<td align="center">11000</td>
<td align="center">M</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">0x08c</td>
<td align="center">00001</td>
<td align="center">00</td>
<td align="center">01100</td>
<td align="center">H</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0xf00</td>
<td align="center">11110</td>
<td align="center">00</td>
<td align="center">00000</td>
<td align="center">M</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">0x064</td>
<td align="center">00000</td>
<td align="center">11</td>
<td align="center">00100</td>
<td align="center">M</td>
<td align="center">M</td>
</tr>
</tbody></table>
<p>第一次访问Cache的命中率是：2&#x2F;9 &#x3D; 22%</p>
<p>第二次访问Cache的命中率是：2&#x2F;9 &#x3D; 33%</p>
<h1 id="2-way-Set-Associative"><a href="#2-way-Set-Associative" class="headerlink" title="2-way Set Associative"></a>2-way Set Associative</h1><p>在2路组相联模式中，每个Set有2个Cache Line，假设我们的Cache有128Byte，每个Cache Line有32Byte，内存地址是12bit（通常来说是32bit或者64bit，为简单起见使用12bit），那么</p>
<p>Offset &#x3D; log(32) &#x3D; 5bit，即使用5bit作为在Cache Line中的索引</p>
<p>Set &#x3D; log(128&#x2F;32&#x2F;2) &#x3D; log(2) &#x3D; 1bit，其中2表示每个Set有2个Cache Line</p>
<p>Tag &#x3D; 12 - 5 -1 &#x3D; 6bit，剩下的bit用于标识Cache Line</p>
<p>即内存地址被分割为</p>
<table>
<thead>
<tr>
<th align="center">Addr</th>
<th align="center">Tag</th>
<th align="center">Set</th>
<th align="center">Offset</th>
</tr>
</thead>
<tbody><tr>
<td align="center">12bit</td>
<td align="center">6bit</td>
<td align="center">1bit</td>
<td align="center">6bit</td>
</tr>
<tr>
<td align="center">0x070</td>
<td align="center">000001</td>
<td align="center">1</td>
<td align="center">10000</td>
</tr>
</tbody></table>
<p>对应的Cache空间布局如下表所示</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center">Way 1</th>
<th align="center"></th>
<th align="center">Way 0</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Set</td>
<td align="center">LRU</td>
<td align="center">Valid</td>
<td align="center">Tag (Line)</td>
<td align="center">Valid</td>
<td align="center">Tag (Line)</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>注意，由于此时每个Set中有2个Cache Line，那么当Cache未命中时，应该替换哪一个Cache Line呢？这时候就有多种策略可以选择，比较常见的是LRU，即最近最少使用算法。比如我们刚更新过Line0，那么LRU就被设置为1，表示Line1将在下一次未命中发生时被替换。本意是将最不活跃的Line替换出去。</p>
<p>那么，使用同样一组数据，Cache命中情况如下表</p>
<table>
<thead>
<tr>
<th align="center">Addr</th>
<th align="center">Tag</th>
<th align="center">Set</th>
<th align="center">Offset</th>
<th align="center">1st</th>
<th align="center">2nd</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0x070</td>
<td align="center">000001</td>
<td align="center">1</td>
<td align="center">10000</td>
<td align="center">M</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0x080</td>
<td align="center">000010</td>
<td align="center">0</td>
<td align="center">00000</td>
<td align="center">M</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0x068</td>
<td align="center">000001</td>
<td align="center">1</td>
<td align="center">01000</td>
<td align="center">H</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0x190</td>
<td align="center">000110</td>
<td align="center">0</td>
<td align="center">10000</td>
<td align="center">M</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">0x084</td>
<td align="center">000010</td>
<td align="center">0</td>
<td align="center">00100</td>
<td align="center">H</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0x178</td>
<td align="center">000101</td>
<td align="center">1</td>
<td align="center">11000</td>
<td align="center">M</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0x08c</td>
<td align="center">000010</td>
<td align="center">0</td>
<td align="center">01100</td>
<td align="center">H</td>
<td align="center">H</td>
</tr>
<tr>
<td align="center">0xf00</td>
<td align="center">111100</td>
<td align="center">0</td>
<td align="center">00000</td>
<td align="center">M</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">0x064</td>
<td align="center">000001</td>
<td align="center">1</td>
<td align="center">00100</td>
<td align="center">H</td>
<td align="center">H</td>
</tr>
</tbody></table>
<p>第一次访问Cache的命中率是：4&#x2F;9 &#x3D; 44%</p>
<p>第二次访问Cache的命中率是：7&#x2F;9 &#x3D; 77%</p>
<p>可以看出，在没有增大Cache空间的情况下，仅仅改变了Cache的模式，就大幅提高了命中率。</p>
<h1 id="Fully-Associative"><a href="#Fully-Associative" class="headerlink" title="Fully Associative"></a>Fully Associative</h1><p>在全相联模式下，只有1个Set，假设我们的Cache有128Byte，每个Cache Line有32Byte，那么这个Set中将包含4个Cache Line。</p>
<p>Way &#x3D; 128&#x2F;32 &#x3D; 4</p>
<p>对于小空间的Cache来说，似乎不是什么问题，但是当Cache有几百KB甚至几MB，那么就会存在大量的Cache Line，这会造成两个问题</p>
<ol>
<li>由于是通过比较Tag来确定对应的Cache Line，而不是使用索引，比较这么多Tag很低效</li>
<li>LRU算法需要找到最长时间未被使用的Cache Line，而这一般是硬件完成的，如果Cache Line很多，硬件设计会变得很复杂</li>
</ol>
<p>因此，几乎没有实际的硬件使用这种Cache模式。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简单的介绍了一下Cache模型，以及其工作方式，虽然Cache对于程序员来说是透明，但了解其工作方式可以帮助我们更好的优化代码性能。如果想了解文中例子的具体执行流程，可以观看<a href="#%E5%8F%82%E8%80%83">参考</a>中的两个视频。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.youtube.com/watch?v=RqKeEIbcnS8">Cache Access Example (Part 1)</a></p>
<p><a href="https://www.youtube.com/watch?v=quZe1ehz-EQ">Cache Access Example (Part 2)</a></p>
]]></content>
      <categories>
        <category>Kernel</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>DLP的工作原理</title>
    <url>/2021/01/24/how-does-dlp-work.html</url>
    <content><![CDATA[<blockquote>
<p>投影仪在日常生活中非常常见，无论是用来在会议中播放PPT，观看电影或是打游戏，都能获得不错的大屏体验，主流的投影仪使用DLP作为其核心显示部件，相较于LCD，它的工作方式有些特别，今天就来看看DLP是怎样工作的。</p>
</blockquote>
<span id="more"></span>

<p>首先来看看今天的主角，一台老（报）式（废）的Dell投影仪。</p>
<img src="/2021/01/24/how-does-dlp-work/dell-projector.png" class="" title="dell-projector.png">

<p>所有投影仪的工作原理都是相同的：光线从光源发出，然后通过一个<strong>光线过滤部件</strong>，这个部件会根据当前显示的画面，让正确的光线通过透镜，最后在投影幕布上成像。</p>
<p>胶片投影仪的工作方式非常简单：光源发出的光线通过胶片，然后通过透镜在幕布上成像。</p>
<img src="/2021/01/24/how-does-dlp-work/film-projector.gif" class="" title="film-projector.gif">

<p>而LCD投影仪就是把胶片换成了LCD，通过液晶分子的偏转角度来控制通光量。</p>
<img src="/2021/01/24/how-does-dlp-work/lcd-projector.gif" class="" title="lcd-projector.gif">

<p>LCD投影仪有个问题，为了显示彩色的画面，我们可能需要使用3块LCD来分别控制红、绿、蓝三种颜色的光线。这在一定程度上增加了设计难度，因为最后我们需要把这三条光路精确地拼接在一起。</p>
<p>而DLP投影仪则只需要一条光路即可显示彩色的画面，从而降低了成本，并且在某些特性上也更有优势。</p>
<p>那么DLP是怎么做到只需要一条光路的呢，让我们把它拆开来看看。</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-open-1.png" class="" title="dlp-open-1.png">

<img src="/2021/01/24/how-does-dlp-work/dlp-open-2.png" class="" title="dlp-open-2.png">

<img src="/2021/01/24/how-does-dlp-work/dlp-open-3.png" class="" title="dlp-open-3.png">

<p>在DLP芯片的表面，有无数个可以偏转的“小镜子”，每一个“小镜子”对应一个像素。为了便于大家理解，这里通过一个模型来演示。</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-demo-1.png" class="" title="dlp-demo-1.png">

<p>这个模型里面有36个可以独立偏转的小镜子，每个小镜子后面有一个小铁环，这样，当磁铁在它们后面移动时，镜子就会随之发生偏转</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-demo-2.png" class="" title="dlp-demo-2.png">

<img src="/2021/01/24/how-does-dlp-work/dlp-demo-3.gif" class="" title="dlp-demo-3.gif">

<p>下面打开光源，调整好透镜，然后在DLP模型后面移动磁铁，此时可以在墙上看到对应的“像素”发生了明暗变化。</p>
<p>当小镜子朝向透镜时，其反射的光线可以正常通过透镜，此时对应的像素发光；而当它转向一边时，光线就不会通过透镜，此时对应的像素不发光。</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-demo-4.gif" class="" title="dlp-demo-4.gif">

<p>这时候你可能会想，现在只看到了一种颜色的光，那它要如何显示彩色画面呢？答案就在光源上。</p>
<p>使用DLP成像的投影仪中有一个特殊部件，叫做<strong>色轮</strong>，它被放置在光源的前方。</p>
<img src="/2021/01/24/how-does-dlp-work/color-wheel-1.png" class="" title="color-wheel-1.png">

<p>投影仪的处理器需要将一幅画面分成红绿蓝三个色彩通道。当绿色区域旋转到光源前方时，此时投射到DLP上的光线就是绿色，而DLP则显示绿色通道的画面，红色和蓝色通道也是相同的道理。当切换速度非常快时，我们的大脑就会自动将不同色彩通道的画面合并，从而拼凑出正常的颜色。</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-demo-5.gif" class="" title="dlp-demo-5.gif">

<p>LCD可以通过控制液晶分子的偏转角度来实现灰度控制。然而DLP上的小镜子却只有两个偏转角度，对应了像素的“开”和“关”，那么它是怎样控制像素的明暗呢？</p>
<p>答案还是通过小镜子的快速翻转。这有点类似于现在OLED的PWM调光，当像素在“开”和“关”之间快速切换时，通过控制像素打开时间所占总时间的比例，也就是“占空比”，并利用人眼的暂留效应，来达到控制像素明暗的效果。实际上，DLP上的小镜子可以在5到10毫秒内完成一个翻转。</p>
<p>下面我们来近距离看看DLP芯片的真实模样，这张图是光学显微镜下的画面。</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-zoom-in-1.png" class="" title="dlp-zoom-in-1.png">

<p>我们清楚地看到这些紧密排列的小镜子，每个小镜子大约10微米长。</p>
<p>为了更加清楚地看到其结构，需要使用扫描电子显微镜。</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-zoom-in-2.png" class="" title="dlp-zoom-in-2.png">

<p>在电子显微镜下，DLP芯片的细节显露无疑。</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-zoom-in-3.png" class="" title="dlp-zoom-in-3.png">

<p>可以看到画面中有许多小镜子已经损坏了，这是由于在拆卸过程中撬棍接触到了DLP芯片表面，虽然力度非常小，但还是导致其结构被破坏。不过，这对我们来说是件好事，因为这样就能更清楚地看到小镜子下面的结构了。</p>
<img src="/2021/01/24/how-does-dlp-work/dlp-zoom-in-4.png" class="" title="dlp-zoom-in-4.png">

<p>可以看到，小镜子实际上是以对角线为轴进行旋转的。与模型不同，DLP是通过电压来控制小镜子旋转，当施加电压时，小镜子会偏转到一侧，电压消失后，它会自动回位。</p>
<p>LCD投影仪的另一个缺点是，光源发出的光线通过LCD面板后会损失近一半，因为LCD中需要电极来控制液晶分子，而电极本身并不是完全透明的。</p>
<p>DLP则不存在这个问题，因为光线并不是穿过DLP，而是直接被反射的，从而光源的利用率大大提升。这样就可以使用功率更小的光源，以及更小的电源，从而降低整机的成本和体积。</p>
<p><a href="https://www.youtube.com/watch?v=9nb8mM3uEIc&t=1s&ab_channel=AppliedScience">https://www.youtube.com/watch?v=9nb8mM3uEIc&amp;t=1s&amp;ab_channel=AppliedScience</a></p>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>DLP</tag>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>在终端下调整ext4文件系统的大小</title>
    <url>/2019/12/29/how-to-resize-ext4-filesystem.html</url>
    <content><![CDATA[<blockquote>
<p>在带有GUI的Linux系统中，我们可以通过GParted方便地管理磁盘分区，但是在很多时候我们没有条件使用GUI工具，所以本文简单介绍一下如何在命令行界面调整ext4分区的大小。</p>
</blockquote>
<span id="more"></span>

<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><ul>
<li>待分配分区：<code>/dev/sdb1</code></li>
<li>分区工具：<code>fdisk</code></li>
<li>文件系统检查工具：<code>e2fsck</code></li>
<li>文件系统调整工具：<code>resize2fs</code></li>
</ul>
<h1 id="扩大文件系统"><a href="#扩大文件系统" class="headerlink" title="扩大文件系统"></a>扩大文件系统</h1><p>首先需要明确，决定文件系统上限的是其所在的分区大小，因此，如果待调整的文件系统已经占满了整个分区，那么在调整文件系统之前，需要先调整分区大小，<strong>本文假设待调整分区的后面仍然有可用的空间</strong>。</p>
<h2 id="重建分区"><a href="#重建分区" class="headerlink" title="重建分区"></a>重建分区</h2><p>原始状态下，分区<code>dev/sdb1</code>有<code>512M</code>，我们要把它调整为<code>768M</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sdb      8:16   0     1G  0 disk</span><br><span class="line">└─sdb1   8:17   0   512M  0 part /mnt</span><br></pre></td></tr></table></figure>

<ol>
<li><p>解挂分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo umount /mnt</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除旧分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x485cc8a2</span><br><span class="line"></span><br><span class="line">Device     Boot Start     End Sectors  Size Id Type</span><br><span class="line">/dev/sdb1        2048 1050623 1048576  512M 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): d</span><br><span class="line">Selected partition 1</span><br><span class="line">Partition 1 has been deleted.</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to fdisk (util-linux 2.31.1).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-2097151, default 2048):</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-2097151, default 2097151): +768M</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &#x27;Linux&#x27; and of size 768 MiB.</span><br><span class="line">Partition #1 contains a ext4 signature.</span><br><span class="line"></span><br><span class="line">Do you want to remove the signature? [Y]es/[N]o: n</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line"></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>

<p><strong>注意：新分区的起始扇区必须跟老分区的起始扇区一致。</strong></p>
</li>
</ol>
<h2 id="检查文件系统"><a href="#检查文件系统" class="headerlink" title="检查文件系统"></a>检查文件系统</h2>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo e2fsck -f /dev/sdb1</span><br></pre></td></tr></table></figure>

   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">e2fsck 1.44.1 (24-Mar-2018)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">/dev/sdb1: 12/32768 files (0.0% non-contiguous), 6354/131072 blocks</span><br></pre></td></tr></table></figure>

<h2 id="调整文件系统"><a href="#调整文件系统" class="headerlink" title="调整文件系统"></a>调整文件系统</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo resize2fs /dev/sdb1</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resize2fs 1.44.1 (24-Mar-2018)</span><br><span class="line">Resizing the filesystem on /dev/sdb1 to 196608 (4k) blocks.</span><br><span class="line">The filesystem on /dev/sdb1 is now 196608 (4k) blocks long.</span><br></pre></td></tr></table></figure>

<h1 id="缩小文件系统"><a href="#缩小文件系统" class="headerlink" title="缩小文件系统"></a>缩小文件系统</h1><p>缩小文件系统理论上不需要调整分区，但是这样会造成空间的浪费，其操作顺序与扩大文件系统相反。我们现在把刚才的<code>768M</code>的文件系统再调整为<code>512M</code>。</p>
<h2 id="检查文件系统-1"><a href="#检查文件系统-1" class="headerlink" title="检查文件系统"></a>检查文件系统</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo e2fsck -f /dev/sdb1</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">e2fsck 1.44.1 (24-Mar-2018)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">/dev/sdb1: 12/49152 files (0.0% non-contiguous), 7447/196608 blocks</span><br></pre></td></tr></table></figure>

<h2 id="调整文件系统-1"><a href="#调整文件系统-1" class="headerlink" title="调整文件系统"></a>调整文件系统</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo resize2fs /dev/sdb1 512M</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resize2fs 1.44.1 (24-Mar-2018)</span><br><span class="line">Resizing the filesystem on /dev/sdb1 to 131072 (4k) blocks.</span><br><span class="line">The filesystem on /dev/sdb1 is now 131072 (4k) blocks long.</span><br></pre></td></tr></table></figure>

<h2 id="重建分区-1"><a href="#重建分区-1" class="headerlink" title="重建分区"></a>重建分区</h2><ol>
<li><p>删除旧分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x485cc8a2</span><br><span class="line"></span><br><span class="line">Device     Boot Start     End Sectors  Size Id Type</span><br><span class="line">/dev/sdb1        2048 1574911 1572864  768M 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): d</span><br><span class="line">Selected partition 1</span><br><span class="line">Partition 1 has been deleted.</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 1 GiB, 1073741824 bytes, 2097152 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x485cc8a2</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1):</span><br><span class="line">First sector (2048-2097151, default 2048):</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-2097151, default 2097151): +512M</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type &#x27;Linux&#x27; and of size 512 MiB.</span><br><span class="line">Partition #1 contains a ext4 signature.</span><br><span class="line"></span><br><span class="line">Do you want to remove the signature? [Y]es/[N]o: n</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line"></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文所描述的场景仅仅适用于分区后面仍然有可分配的空间，如果后面紧跟着其它分区或者该分区是最后一个分区，会涉及到分区的移动，以后有机会会讲到。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://geekpeek.net/resize-filesystem-fdisk-resize2fs/">Resize Partition and Filesystem with fdisk &amp; resize2fs</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>filesystem</tag>
      </tags>
  </entry>
  <entry>
    <title>人性的弱点</title>
    <url>/2021/01/23/how-to-win-friends-and-influence-people.html</url>
    <content><![CDATA[<blockquote>
<p>如果你要从这本书里获得最大的益处，有一个必须具备的条件。不然，你再怎么研究，也不会有多少用处。如果有这种天赋的才智，你即使没有看这篇建议的文章，也能获得奇迹。</p>
</blockquote>
<span id="more"></span>

<h1 id="获得奇迹"><a href="#获得奇迹" class="headerlink" title="获得奇迹"></a>获得奇迹</h1><p>这种奇妙的条件是什么？那是一种深入的、想要学习的欲望，一个增加你应付他人能力的强烈决心。</p>
<p>你如何出发这样一个冲动呢？经常提醒你自己，让自己知道这些原则对自己是何等的重要。替你自己做这样的想象——<strong>如果将这些原则运用自如，将使你接触到多姿多彩的环境；在经济酬劳上，将有更多的帮助。</strong>你要一次又一次地对自己说：“<strong>我所以受人欢迎，我所获得的快乐，和我酬劳收入的增加，那是由于我知道了与人相处的技巧。</strong>”</p>
<p>记住，只有恒久的，深切的温习，才能使这些原则的运用成为习惯。</p>
<h1 id="新奇的尝试"><a href="#新奇的尝试" class="headerlink" title="新奇的尝试"></a>新奇的尝试</h1><p>当你的妻子、子女或是同事，找出你违反某一项原则时，你不妨付出10元或是20元给他们，作为对自己的处罚。</p>
<p>记录实施这些原则的效果，把日期、效果和对方的姓名记录下来。</p>
<p>每星期做一次检讨，质问你又犯了什么错误，有哪些地方需要改进，将来该怎么做。</p>
<h1 id="为人处世的基本技巧"><a href="#为人处世的基本技巧" class="headerlink" title="为人处世的基本技巧"></a>为人处世的基本技巧</h1><h2 id="不要批评、责怪或抱怨"><a href="#不要批评、责怪或抱怨" class="headerlink" title="不要批评、责怪或抱怨"></a>不要批评、责怪或抱怨</h2><h2 id="发自内心地赞赏别人"><a href="#发自内心地赞赏别人" class="headerlink" title="发自内心地赞赏别人"></a>发自内心地赞赏别人</h2><p>思考对方的优点。</p>
<h2 id="知悉对方的想法"><a href="#知悉对方的想法" class="headerlink" title="知悉对方的想法"></a>知悉对方的想法</h2><p>思考对方需要什么。</p>
<h2 id="学会关心和帮助他人"><a href="#学会关心和帮助他人" class="headerlink" title="学会关心和帮助他人"></a>学会关心和帮助他人</h2><p>能够获得更多朋友和快乐。</p>
<h1 id="平安快乐的14项法则"><a href="#平安快乐的14项法则" class="headerlink" title="平安快乐的14项法则"></a>平安快乐的14项法则</h1><h2 id="选择正确的思想"><a href="#选择正确的思想" class="headerlink" title="选择正确的思想"></a>选择正确的思想</h2><p>意志 <strong>—控制—&gt;</strong> 行动 <strong>—影响—&gt;</strong> 感觉</p>
<h2 id="坚守自我，拒绝模仿"><a href="#坚守自我，拒绝模仿" class="headerlink" title="坚守自我，拒绝模仿"></a>坚守自我，拒绝模仿</h2><p>保持本色，做独一无二的自己。</p>
<h2 id="从悲伤中走出来"><a href="#从悲伤中走出来" class="headerlink" title="从悲伤中走出来"></a>从悲伤中走出来</h2><p>将内心中的恐惧转化为奋斗的决心。</p>
<h2 id="学会放松，解除疲劳"><a href="#学会放松，解除疲劳" class="headerlink" title="学会放松，解除疲劳"></a>学会放松，解除疲劳</h2><p>接受最坏的情况，思考如何改善它。</p>
<h2 id="克服忧虑的心理"><a href="#克服忧虑的心理" class="headerlink" title="克服忧虑的心理"></a>克服忧虑的心理</h2><p>健全的信仰、睡眠、音乐和欢笑。</p>
<h2 id="活在真实的今天"><a href="#活在真实的今天" class="headerlink" title="活在真实的今天"></a>活在真实的今天</h2><p>不要忧虑过去和未来，全力做好今天的每件事。</p>
<h2 id="勿存报复之心"><a href="#勿存报复之心" class="headerlink" title="勿存报复之心"></a>勿存报复之心</h2><p>集中精力去做一些超出能力之外的事。</p>
<h2 id="施恩不图报"><a href="#施恩不图报" class="headerlink" title="施恩不图报"></a>施恩不图报</h2><p>唯一能得到爱的方法，就是不求回报地付出。</p>
<h2 id="时刻怀有感恩的心"><a href="#时刻怀有感恩的心" class="headerlink" title="时刻怀有感恩的心"></a>时刻怀有感恩的心</h2><p>珍惜目前所拥有的一切。</p>
<h2 id="将酸柠檬变成甜柠檬汁"><a href="#将酸柠檬变成甜柠檬汁" class="headerlink" title="将酸柠檬变成甜柠檬汁"></a>将酸柠檬变成甜柠檬汁</h2><p>从损失中获利。</p>
<h2 id="每天都要带给别人快乐"><a href="#每天都要带给别人快乐" class="headerlink" title="每天都要带给别人快乐"></a>每天都要带给别人快乐</h2><p>真诚地对别人感兴趣，忘记自己的需求。</p>
<h2 id="没有人愿意踢一条死狗"><a href="#没有人愿意踢一条死狗" class="headerlink" title="没有人愿意踢一条死狗"></a>没有人愿意踢一条死狗</h2><p>受到批评是因为自己足够优秀。</p>
<h2 id="不要被批评伤害"><a href="#不要被批评伤害" class="headerlink" title="不要被批评伤害"></a>不要被批评伤害</h2><p>坚持做自己认为对的事。</p>
<h2 id="学会自我批评"><a href="#学会自我批评" class="headerlink" title="学会自我批评"></a>学会自我批评</h2><p>记下别人的批评和自己所犯的错误。</p>
<h1 id="获取信服的12种方法"><a href="#获取信服的12种方法" class="headerlink" title="获取信服的12种方法"></a>获取信服的12种方法</h1><h2 id="争论中没有赢家"><a href="#争论中没有赢家" class="headerlink" title="争论中没有赢家"></a>争论中没有赢家</h2><p>永远避免正面的冲突。</p>
<h2 id="如何避免制造敌人"><a href="#如何避免制造敌人" class="headerlink" title="如何避免制造敌人"></a>如何避免制造敌人</h2><p>永远别指责对方是错的。</p>
<h2 id="如果不对就及时认错"><a href="#如果不对就及时认错" class="headerlink" title="如果不对就及时认错"></a>如果不对就及时认错</h2><p>愚蠢的人才会辩护自己的过错。</p>
<h2 id="使你走上理智的大路"><a href="#使你走上理智的大路" class="headerlink" title="使你走上理智的大路"></a>使你走上理智的大路</h2><p>以友善的方法开始。</p>
<h2 id="苏格拉底的秘密"><a href="#苏格拉底的秘密" class="headerlink" title="苏格拉底的秘密"></a>苏格拉底的秘密</h2><p>使对方很快地回答：“是！是！”</p>
<h2 id="处理一个抱怨者的安全手法"><a href="#处理一个抱怨者的安全手法" class="headerlink" title="处理一个抱怨者的安全手法"></a>处理一个抱怨者的安全手法</h2><p>尽量让对方有多说话的机会。</p>
<h2 id="让别人愿意跟你合作"><a href="#让别人愿意跟你合作" class="headerlink" title="让别人愿意跟你合作"></a>让别人愿意跟你合作</h2><p>使对方以为这是他的意念。</p>
<h2 id="一个创造奇迹的公式"><a href="#一个创造奇迹的公式" class="headerlink" title="一个创造奇迹的公式"></a>一个创造奇迹的公式</h2><p>要真诚地以他人地观点去看事情。</p>
<h2 id="同情对方的意念和欲望"><a href="#同情对方的意念和欲望" class="headerlink" title="同情对方的意念和欲望"></a>同情对方的意念和欲望</h2><p>人类普遍追求同情。</p>
<h2 id="吸引所有人的魅力"><a href="#吸引所有人的魅力" class="headerlink" title="吸引所有人的魅力"></a>吸引所有人的魅力</h2><p>激发人们更高尚的动机。</p>
<h2 id="实行、推进，别停顿下来"><a href="#实行、推进，别停顿下来" class="headerlink" title="实行、推进，别停顿下来"></a>实行、推进，别停顿下来</h2><p>使你的意念戏剧化。</p>
<h2 id="当你无计可施时，就试试这个吧"><a href="#当你无计可施时，就试试这个吧" class="headerlink" title="当你无计可施时，就试试这个吧"></a>当你无计可施时，就试试这个吧</h2><p>提出一个挑战。</p>
<h1 id="说服别人的9种方法"><a href="#说服别人的9种方法" class="headerlink" title="说服别人的9种方法"></a>说服别人的9种方法</h1><h2 id="选好开始批评的方法"><a href="#选好开始批评的方法" class="headerlink" title="选好开始批评的方法"></a>选好开始批评的方法</h2><p>称赞和真诚的欣赏。</p>
<h2 id="如何批评才不致引起反感"><a href="#如何批评才不致引起反感" class="headerlink" title="如何批评才不致引起反感"></a>如何批评才不致引起反感</h2><p>间接地指出人们的过错。</p>
<h2 id="先说出你自己的错误"><a href="#先说出你自己的错误" class="headerlink" title="先说出你自己的错误"></a>先说出你自己的错误</h2><p>谦逊和称赞。</p>
<h2 id="没有人喜欢接受命令"><a href="#没有人喜欢接受命令" class="headerlink" title="没有人喜欢接受命令"></a>没有人喜欢接受命令</h2><p>建议，而不是命令。</p>
<h2 id="让对方保住他的面子"><a href="#让对方保住他的面子" class="headerlink" title="让对方保住他的面子"></a>让对方保住他的面子</h2><p>体恤、谅解对方。</p>
<h2 id="如何鼓励人们成功"><a href="#如何鼓励人们成功" class="headerlink" title="如何鼓励人们成功"></a>如何鼓励人们成功</h2><p>称赞最细微的进步。</p>
<h2 id="给狗取个好名字"><a href="#给狗取个好名字" class="headerlink" title="给狗取个好名字"></a>给狗取个好名字</h2><p>给人一个美名让他去保全。</p>
<h2 id="使错误看起来容易改正"><a href="#使错误看起来容易改正" class="headerlink" title="使错误看起来容易改正"></a>使错误看起来容易改正</h2><p>鼓励对方把事情看成很容易。</p>
<h2 id="使人们乐意做你所建议的事"><a href="#使人们乐意做你所建议的事" class="headerlink" title="使人们乐意做你所建议的事"></a>使人们乐意做你所建议的事</h2><p>不让人有不愉快的感觉。</p>
<h1 id="让你处处受欢迎的6项法则"><a href="#让你处处受欢迎的6项法则" class="headerlink" title="让你处处受欢迎的6项法则"></a>让你处处受欢迎的6项法则</h1><h2 id="让你到处受欢迎的实用方法"><a href="#让你到处受欢迎的实用方法" class="headerlink" title="让你到处受欢迎的实用方法"></a>让你到处受欢迎的实用方法</h2><p>真诚地对别人产生兴趣。</p>
<h2 id="如何给人好印象"><a href="#如何给人好印象" class="headerlink" title="如何给人好印象"></a>如何给人好印象</h2><p>微笑。</p>
<h2 id="这样做，你就能避免发生麻烦"><a href="#这样做，你就能避免发生麻烦" class="headerlink" title="这样做，你就能避免发生麻烦"></a>这样做，你就能避免发生麻烦</h2><p>记住别人的名字。</p>
<h2 id="如何养成优雅而获得好感的谈吐"><a href="#如何养成优雅而获得好感的谈吐" class="headerlink" title="如何养成优雅而获得好感的谈吐"></a>如何养成优雅而获得好感的谈吐</h2><p>善于倾听。</p>
<h2 id="如何使人对你感兴趣"><a href="#如何使人对你感兴趣" class="headerlink" title="如何使人对你感兴趣"></a>如何使人对你感兴趣</h2><p>就别人的兴趣讨论。</p>
<h2 id="如何使人很快地喜欢你"><a href="#如何使人很快地喜欢你" class="headerlink" title="如何使人很快地喜欢你"></a>如何使人很快地喜欢你</h2><p>使别人感觉到他的重要。</p>
<h1 id="创造奇迹的信"><a href="#创造奇迹的信" class="headerlink" title="创造奇迹的信"></a>创造奇迹的信</h1><h2 id="奇迹是可以创造的"><a href="#奇迹是可以创造的" class="headerlink" title="奇迹是可以创造的"></a>奇迹是可以创造的</h2><h2 id="请你帮我解决一项困难"><a href="#请你帮我解决一项困难" class="headerlink" title="请你帮我解决一项困难"></a>请你帮我解决一项困难</h2><h2 id="运用“请你帮我一个忙”的心理学"><a href="#运用“请你帮我一个忙”的心理学" class="headerlink" title="运用“请你帮我一个忙”的心理学"></a>运用“请你帮我一个忙”的心理学</h2><h1 id="9种方法打造幸福快乐的家庭"><a href="#9种方法打造幸福快乐的家庭" class="headerlink" title="9种方法打造幸福快乐的家庭"></a>9种方法打造幸福快乐的家庭</h1><h2 id="你是否在自掘婚姻的坟墓"><a href="#你是否在自掘婚姻的坟墓" class="headerlink" title="你是否在自掘婚姻的坟墓"></a>你是否在自掘婚姻的坟墓</h2><p>切莫喋喋不休。</p>
<h2 id="爱他就给他多一些自由"><a href="#爱他就给他多一些自由" class="headerlink" title="爱他就给他多一些自由"></a>爱他就给他多一些自由</h2><p>别尝试改变你的伴侣。</p>
<h2 id="这样做你就快要离婚了"><a href="#这样做你就快要离婚了" class="headerlink" title="这样做你就快要离婚了"></a>这样做你就快要离婚了</h2><p>不要批评。</p>
<h2 id="使人快乐的方法"><a href="#使人快乐的方法" class="headerlink" title="使人快乐的方法"></a>使人快乐的方法</h2><p>给予真诚的欣赏。</p>
<h2 id="对女人特别有意义的事"><a href="#对女人特别有意义的事" class="headerlink" title="对女人特别有意义的事"></a>对女人特别有意义的事</h2><p>随时注意琐碎细微的小地方。</p>
<h2 id="如果你要快乐，就请牢记这些"><a href="#如果你要快乐，就请牢记这些" class="headerlink" title="如果你要快乐，就请牢记这些"></a>如果你要快乐，就请牢记这些</h2><p>要有礼貌。</p>
<h2 id="如何与女性相处"><a href="#如何与女性相处" class="headerlink" title="如何与女性相处"></a>如何与女性相处</h2><h2 id="如何与男性相处"><a href="#如何与男性相处" class="headerlink" title="如何与男性相处"></a>如何与男性相处</h2><h2 id="不要做一个“婚姻的文盲”"><a href="#不要做一个“婚姻的文盲”" class="headerlink" title="不要做一个“婚姻的文盲”"></a>不要做一个“婚姻的文盲”</h2><h1 id="如何把自己修炼成成熟有魅力的人"><a href="#如何把自己修炼成成熟有魅力的人" class="headerlink" title="如何把自己修炼成成熟有魅力的人"></a>如何把自己修炼成成熟有魅力的人</h1><h2 id="成熟，从勇于担当开始"><a href="#成熟，从勇于担当开始" class="headerlink" title="成熟，从勇于担当开始"></a>成熟，从勇于担当开始</h2><p>为自己的行为负责。</p>
<h2 id="困难不等于不幸"><a href="#困难不等于不幸" class="headerlink" title="困难不等于不幸"></a>困难不等于不幸</h2><p>勇敢地面对、接受、克服、解决。</p>
<h2 id="摆脱生活中的不幸"><a href="#摆脱生活中的不幸" class="headerlink" title="摆脱生活中的不幸"></a>摆脱生活中的不幸</h2><p>让时间去治疗伤痛。</p>
<h2 id="拥有自己的信仰"><a href="#拥有自己的信仰" class="headerlink" title="拥有自己的信仰"></a>拥有自己的信仰</h2><p>并付诸行动。</p>
<h2 id="你就是唯一"><a href="#你就是唯一" class="headerlink" title="你就是唯一"></a>你就是唯一</h2><p>持续不断地自我发现，自我探寻。</p>
<h2 id="了解并喜欢自己"><a href="#了解并喜欢自己" class="headerlink" title="了解并喜欢自己"></a>了解并喜欢自己</h2><p>期待自己完美是愚蠢至极。</p>
<h2 id="坚持自我本色"><a href="#坚持自我本色" class="headerlink" title="坚持自我本色"></a>坚持自我本色</h2><p>展现自己的独特性，有自己的观点和主张。</p>
<h2 id="不要做令人讨厌的人"><a href="#不要做令人讨厌的人" class="headerlink" title="不要做令人讨厌的人"></a>不要做令人讨厌的人</h2><p>避免言语乏味。</p>
<h2 id="先使自己让人喜欢"><a href="#先使自己让人喜欢" class="headerlink" title="先使自己让人喜欢"></a>先使自己让人喜欢</h2><p>专心一意去喜欢别人。</p>
<h1 id="8步走出孤独忧虑的人生"><a href="#8步走出孤独忧虑的人生" class="headerlink" title="8步走出孤独忧虑的人生"></a>8步走出孤独忧虑的人生</h1><h2 id="解开忧虑之谜"><a href="#解开忧虑之谜" class="headerlink" title="解开忧虑之谜"></a>解开忧虑之谜</h2><p>问自己4个问题。</p>
<h2 id="减少生意上50-的忧虑"><a href="#减少生意上50-的忧虑" class="headerlink" title="减少生意上50%的忧虑"></a>减少生意上50%的忧虑</h2><p>是什么？为什么？怎么办？</p>
<h2 id="消除思想上的忧虑"><a href="#消除思想上的忧虑" class="headerlink" title="消除思想上的忧虑"></a>消除思想上的忧虑</h2><p>让自己不停地忙着。</p>
<h2 id="不要为小事烦恼"><a href="#不要为小事烦恼" class="headerlink" title="不要为小事烦恼"></a>不要为小事烦恼</h2><p>生命如此短暂。</p>
<h2 id="不要杞人忧天"><a href="#不要杞人忧天" class="headerlink" title="不要杞人忧天"></a>不要杞人忧天</h2><p>看看事情发生地平均概率。</p>
<h2 id="勇于接受不可避免地事实"><a href="#勇于接受不可避免地事实" class="headerlink" title="勇于接受不可避免地事实"></a>勇于接受不可避免地事实</h2><p>接受还是毁灭。</p>
<h2 id="给忧虑设置底线"><a href="#给忧虑设置底线" class="headerlink" title="给忧虑设置底线"></a>给忧虑设置底线</h2><p>具备正确地价值观念。</p>
<h2 id="不要试着去锯木屑"><a href="#不要试着去锯木屑" class="headerlink" title="不要试着去锯木屑"></a>不要试着去锯木屑</h2><p>不要为已经发生地事情忧虑。</p>
<h1 id="抛却名利带来的烦恼"><a href="#抛却名利带来的烦恼" class="headerlink" title="抛却名利带来的烦恼"></a>抛却名利带来的烦恼</h1><h2 id="一生最重要的决定"><a href="#一生最重要的决定" class="headerlink" title="一生最重要的决定"></a>一生最重要的决定</h2><p>选择正确的工作。</p>
<h2 id="抛却工作和金钱的烦恼"><a href="#抛却工作和金钱的烦恼" class="headerlink" title="抛却工作和金钱的烦恼"></a>抛却工作和金钱的烦恼</h2><p>提高自己的财商。</p>
<h2 id="夫妻间的职业冲突"><a href="#夫妻间的职业冲突" class="headerlink" title="夫妻间的职业冲突"></a>夫妻间的职业冲突</h2><p>鼓励对方去做喜欢的事。</p>
<h2 id="合理开支，平衡收入"><a href="#合理开支，平衡收入" class="headerlink" title="合理开支，平衡收入"></a>合理开支，平衡收入</h2><p>制定合理的预算。</p>
<h1 id="高记忆力的3个自然技巧"><a href="#高记忆力的3个自然技巧" class="headerlink" title="高记忆力的3个自然技巧"></a>高记忆力的3个自然技巧</h1><h2 id="印象"><a href="#印象" class="headerlink" title="印象"></a>印象</h2><h2 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h2><h2 id="联想"><a href="#联想" class="headerlink" title="联想"></a>联想</h2>]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>人性</tag>
        <tag>情商</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Arm交叉编译工具链</title>
    <url>/2021/01/30/install-cross-toolchain-for-arm.html</url>
    <content><![CDATA[<blockquote>
<p>通常我们使用的Arm交叉编译器都是从各种开发板的SDK中得到的，那些toolchain的版本有可能比较旧或者无法满足我们的编译需求，所以今天来讲一下如何获取并安装一个预编译的Arm交叉工具链。</p>
</blockquote>
<span id="more"></span>

<h1 id="工具链的种类"><a href="#工具链的种类" class="headerlink" title="工具链的种类"></a>工具链的种类</h1><p>GCC 的命名规则为：<strong>arch [-vendor] [-os] [-(gnu)eabi]-gcc</strong></p>
<p>比如 <code>arm-linux-gnueabi-gcc</code> ， <code>arm-none-eabi-gcc</code>， <code>aarch64-linux-gnu-gcc</code></p>
<ul>
<li>带[]的是可选部分。</li>
<li>arch：芯片架构，比如32位的Arm架构对应的arch为arm，64 位的Arm架构对应的arch为aarch64。</li>
<li>vendor：工具链提供商，大部分工具链名字里面都没有包含这部分。</li>
<li>os：编译出来的可执行文件(目标文件)针对的操作系统，比如Linux。</li>
</ul>
<p>arm-none-eabi-gcc一般适用用于Arm Cortex-M&#x2F;Cortex-R平台，它使用的是newlib库。</p>
<p>arm-linux-gnueabi-gcc和aarch64-linux-gnu-gcc适用于Arm Cortex-A系列芯片，前者针对32位芯片，后者针对64位芯片，它使用的是glibc库。可以用来编译u-boot、linux kernel以及应用程序。</p>
<h1 id="工具链的下载"><a href="#工具链的下载" class="headerlink" title="工具链的下载"></a>工具链的下载</h1><p>现在Arm平台上用的最广泛的工具链是Linaro发布的，大家可以到<a href="http://releases.linaro.org/components/toolchain/binaries/">Linaro官网</a>下载。</p>
<p>如果要下载的工具链版本比较新，还可以从<a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain">Arm官网</a>下载。</p>
<p>另外，还可以使用国内的<a href="https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/_toolchain/">清华源</a>以加快下载速度。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://developer.arm.com/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf.tar.xz</span><br></pre></td></tr></table></figure>

<h1 id="工具链的安装"><a href="#工具链的安装" class="headerlink" title="工具链的安装"></a>工具链的安装</h1><p>首先需要解压到一个指定的目录，这里我们解压到<code>/usr/local/toolchain</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /usr/local/toolchain</span><br><span class="line">tar -xf gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf.tar.xz -C /usr/local/toolchain/</span><br></pre></td></tr></table></figure>

<p>然后我们需要添加环境变量，只有把可执行文件对应的路径加入到 <code>PATH</code> 环境变量里，系统才可以认到这些命令，可以添加到 <code>~/.bashrc</code> 文件的最后。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/toolchain/gcc-arm-10.2-2020.11-x86_64-arm-none-linux-gnueabihf/bin</span><br></pre></td></tr></table></figure>

<h1 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arm-none-linux-gnueabihf-gcc -v</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Embedded</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>arm</tag>
        <tag>toolchain</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu上安装MySQL</title>
    <url>/2019/12/28/install-mysql-on-ubuntu.html</url>
    <content><![CDATA[<blockquote>
<p>随着MySQL的升级，其安装配置方式也变得越来越复杂，以至于新手第一次安装可能无法顺利地登录数据库，因此本文对如何在Ubuntu上安装配置MySQL进行简单阐述。</p>
</blockquote>
<span id="more"></span>

<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><ul>
<li>Ubuntu 18.04</li>
<li>MySQL 5.7</li>
</ul>
<h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>直接从Ubuntu的软件源安装即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>

<h1 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h1><h2 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h2><p>首次配置MySQL，我们最好进行一次安全检查，它会修改一些默认的不安全配置，比如禁止root用户远程登陆，以及删除一些用于测试的账户和数据库等。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p>它将会做以下几件事：</p>
<ol>
<li>安装密码检查插件，它会对密码强度进行检测，并拒绝低强度的密码</li>
<li>设置root密码</li>
<li>删除匿名用户</li>
<li>禁止root用户远程登陆</li>
<li>删除测试数据库</li>
<li>重新加载权限配置</li>
</ol>
<h2 id="使用密码登录root用户"><a href="#使用密码登录root用户" class="headerlink" title="使用密码登录root用户"></a>使用密码登录root用户</h2><p>在MySQL 5.7中，root用户默认使用<code>auth_socket</code>进行身份验证，而不是使用密码。这样虽然可以在一定程度上提高安全性，但也增加了复杂性，尤其是当我们想要通过一些工具管理数据库时。要想使用密码登录root用户，需要将认证方式换成<code>mysql_native_password</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>

<p>首先查看一下每个账户在使用哪种认证方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| user             | authentication_string                     | plugin                | host      |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| root             |                                           | auth_socket           | localhost |</span><br><span class="line">| mysql.session    | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| mysql.sys        | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| debian-sys-maint | *06B203089FC724D1B1C4B9197F88991FB2D287B3 | mysql_native_password | localhost |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>从查询结果可以看出，默认为root用户分配的认证方式就是<code>auth_socket</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>

<p>注意，这条命令会修改两个地方：</p>
<ol>
<li>root用户的认证方式修改为<code>mysql_native_password</code></li>
<li>root用户的密码被设置为<code>password</code></li>
</ol>
<p>然后刷新MySQL的权限配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>最后确认一下root用户的认证方式是否被修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT user,authentication_string,plugin,host FROM mysql.user;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| user             | authentication_string                     | plugin                | host      |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">| root             | *84AAC12F54AB666ECFC2A83C676908C8BBC381B1 | mysql_native_password | localhost |</span><br><span class="line">| mysql.session    | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| mysql.sys        | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |</span><br><span class="line">| debian-sys-maint | *06B203089FC724D1B1C4B9197F88991FB2D287B3 | mysql_native_password | localhost |</span><br><span class="line">+------------------+-------------------------------------------+-----------------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>之后，我们就可以使用密码登录root用户了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><p>创建用户并设置密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;sammy&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>

<p>该命令创建了用户<code>sammy</code>并将其密码设置为<code>password</code>。</p>
<p>对新用户授权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;sammy&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<p>该命令授权<code>sammy</code>拥有所有数据库的所有表的所有权限，但仅限本地登录，如果希望能够远程登陆该用户，将<code>localhost</code>改为具体的<code>IP</code>，或者<code>%</code>表示任意IP。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;sammy&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<h1 id="测试MySQL数据库"><a href="#测试MySQL数据库" class="headerlink" title="测试MySQL数据库"></a>测试MySQL数据库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin -p -u root version</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin  Ver 8.42 Distrib 5.7.28, for Linux on x86_64</span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Server version          5.7.28-0ubuntu0.18.04.4</span><br><span class="line">Protocol version        10</span><br><span class="line">Connection              Localhost via UNIX socket</span><br><span class="line">UNIX socket             /var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:                 4 hours 20 min 8 sec</span><br><span class="line"></span><br><span class="line">Threads: 3  Questions: 29  Slow queries: 0  Opens: 127  Flush tables: 1  Open tables: 120  Queries per second avg: 0.001</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04">How To Install MySQL on Ubuntu 18.04</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows上安装OpenJDK</title>
    <url>/2020/12/30/install-openjdk-for-windows.html</url>
    <content><![CDATA[<blockquote>
<p>Linux用多了，即使切换到Windows，也开始有意无意地使用开源软件，最近Manager想要在Windows下使用TraceCompass，需要安装Java环境，于是就研究了一下在Windows下安装OpenJDK的方法，其实跟安装JavaSE是一样的。</p>
</blockquote>
<span id="more"></span>

<h1 id="下载OpenJDK"><a href="#下载OpenJDK" class="headerlink" title="下载OpenJDK"></a>下载OpenJDK</h1><p><a href="https://openjdk.java.net/">OpenJDK官网</a></p>
<p><a href="https://jdk.java.net/15/">OpenJDK下载</a></p>
<p>这里我下载的是Windows平台的二进制zip包。</p>
<h1 id="解压OpenJDK"><a href="#解压OpenJDK" class="headerlink" title="解压OpenJDK"></a>解压OpenJDK</h1><p>将下载的压缩包解压到任意位置，如果为了方便管理，可以解压到<code>C:\Program Files\Java\jdk-15.0.1</code>。</p>
<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>不同Windows版本设置环境变量的位置都一样，但是找到它的方式却不太一样，对于Windows10，是通过<code>设置 -&gt; 关于 -&gt; 高级系统设置 -&gt; 环境变量</code>。</p>
<p>需要设置的环境变量有5个：</p>
<ul>
<li><code>JAVA_HOME</code> : <code>C:\Program Files\Java\jdk-15.0.1</code></li>
<li><code>JDK_HOME</code> : <code>%JAVA_HOME%</code></li>
<li><code>JRE_HOME</code> : <code>%JAVA_HOME%\jre</code></li>
<li><code>CLASSPATH</code> : <code>.;%JAVA_HOME%\lib;%JAVA_HOME%\jre\lib</code></li>
<li><code>PATH</code> : <code>%JAVA_HOME%\bin</code></li>
</ul>
<p>注意设置PATH的时候要使用追加的方式。</p>
<h1 id="测试Java环境"><a href="#测试Java环境" class="headerlink" title="测试Java环境"></a>测试Java环境</h1><p>在PowerShell&#x2F;CMD中使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>openjdk</tag>
      </tags>
  </entry>
  <entry>
    <title>在Proxmox VE中安装Openwrt作为软路由</title>
    <url>/2019/11/03/install-openwrt-in-proxmox-ve.html</url>
    <content><![CDATA[<blockquote>
<p>最近一直种草软路由，从j1900看到i5 7200u，无奈囊中羞涩，最便宜的也得500以上，于是打算把大学时用的旧笔记本利用起来，i7 4702mq的处理器即使放到今天也不算过时（感谢牙膏厂）。但如果只是安装一个Openwrt的话，有点太浪费硬件性能，于是打算在Proxmox VE中安装Opnewrt虚拟机。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装Proxmox-VE"><a href="#安装Proxmox-VE" class="headerlink" title="安装Proxmox VE"></a>安装Proxmox VE</h1><ol>
<li><p>进入<a href="https://www.proxmox.com/en/downloads">PVE下载页面</a>，下载最新的iso镜像</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/download-pve-iso.jpg" class="" title="download-pve-iso.jpg">
</li>
<li><p>使用ultraISO将ISO写入U盘，注意写入方式需要选择<strong>RAW</strong>，Linux用户可以直接使用dd命令</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/make-install-disk.jpg" class="" title="make-install-disk.jpg">
</li>
<li><p>将U盘插入电脑，并从U盘引导系统</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/pve-install-1.jpg" class="" title="pve-install-1.jpg">
</li>
<li><p>选择安装到哪个硬盘，注意硬盘数据会被全部清除</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/pve-install-2.jpg" class="" title="pve-install-2.jpg">
</li>
<li><p>设置PVE的后台管理IP地址，这是一个静态地址，最好选择一个不容易冲突的，比如我设置的<strong>192.168.1.100</strong></p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/pve-install-3.jpg" class="" title="pve-install-3.jpg">
</li>
<li><p>安装完成后，使用另一台设备接入相同的网络，打开<a href="https://192.168.1.100:8006/">https://192.168.1.100:8006</a>，进入PVE的后台管理界面</p>
</li>
</ol>
<h1 id="安装Openwrt"><a href="#安装Openwrt" class="headerlink" title="安装Openwrt"></a>安装Openwrt</h1><p>首次打开时，将在左侧看到一个pve节点以及local和local-lvm这两个存储设备，其中</p>
<ul>
<li>local：存储虚拟机之外的数据，以文件形式存在于pve的文件系统之中，如iso镜像</li>
<li>local-lvm：存储虚拟机磁盘文件，当为虚拟机分配磁盘后，相应的磁盘文件存储于此</li>
</ul>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/default-server-view.jpg" class="" title="default-server-view.jpg">

<h2 id="设置桥接"><a href="#设置桥接" class="headerlink" title="设置桥接"></a>设置桥接</h2><p>在安装之前，我们首先要设置网卡桥接，因为虚拟机将会使用物理网口对应的网桥作为虚拟网口，从而实现网卡的虚拟化。</p>
<ol>
<li><p>选择<strong>pve</strong>节点，再选择<strong>System-&gt;Network</strong>，检查是否每个网卡都有对应的网桥</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/set-bridge-1.jpg" class="" title="set-bridge-1.jpg">
</li>
<li><p>如果有未设置桥接的网卡，需要手动创建桥接，选择<strong>Create-&gt;Linux Bridge</strong>，在<strong>Bridge ports</strong>中填入对应的物理网卡的名字，如enp3s0</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/set-bridge-2.jpg" class="" title="set-bridge-2.jpg"></li>
</ol>
<h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>由于Openwrt固件通常以image镜像的形式存在，因此并不能直接启动，我们首先要进入到一个LiveCD当中，然后把Openwrt的镜像写入到虚拟磁盘，LiveCD可以选择WinPE或者Linux，这里我选择Ubuntu Desktop。</p>
<ol>
<li><p>上传LiveCD，选择<strong>local-&gt;Content</strong>，点击<strong>Upload</strong>，选择镜像文件，并上传</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/upload-livecd.jpg" class="" title="upload-livecd">
</li>
<li><p>点击<strong>Create VM</strong>，在第二步选择LiveCD的镜像，其它步骤按提示进行</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/upload-livecd.jpg" class="" title="upload-livecd.jpg">
</li>
<li><p>创建完成后，在左侧的<strong>pve</strong>节点下即可看到对应的虚拟机，点击<strong>Start</strong>启动虚拟机，选择左侧的Console，即可进入LiveCD</p>
</li>
<li><p>进入LiveCD后下载所需的Openwrt固件，使用dd命令写入虚拟磁盘即可，例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=openwrt.img of=/dev/vda bs=4MB &amp;&amp; sync</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启虚拟机，即可进入Openwrt</p>
</li>
</ol>
<h1 id="配置Openwrt"><a href="#配置Openwrt" class="headerlink" title="配置Openwrt"></a>配置Openwrt</h1><p>我们首先来看一下网络拓扑结构，方便下一步的设置</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/network-topology.jpg" class="" title="network-topology.jpg">

<p>为了方便使用软路由，要求至少有两张物理网卡，这里我使用一个USB网卡作为第二张网卡。</p>
<ol>
<li><p>在Console中修改<code>/etc/config/network</code>，将<strong>192.168.1.1</strong>修改为<strong>192.168.50.1</strong>，避免与光猫的IP冲突</p>
</li>
<li><p>为Openwrt的虚拟机配置两个网卡，因为Openwrt默认会将第一张网卡作为lan口，第二张网卡作为wan口，所以根据图示，需要将第一张网卡连接到<strong>bridge1</strong>，第二张网卡连接到<strong>bridge0</strong>，这样Openwrt的wan口就可以从光猫获取IP，而所有连接到<strong>bridge1</strong>，即Openwrt的lan口的设备，都会从Openwrt获取IP</p>
<img src="/2019/11/03/install-openwrt-in-proxmox-ve/openwrt-bridge.jpg" class="" title="openwrt-bridge.jpg">
</li>
<li><p>将安装PVE的电脑的eth1，即Openwrt的lan口连接路由器的wan口，另一台电脑连接路由器，此时即可通过<strong>192.168.50.1</strong>这个IP地址进入Openwrt的后台</p>
</li>
</ol>
<h1 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h1><p>PVE不仅可以运行Openwrt，比如我还安装了一个ubuntu server作为开发服务器，通过桥接bridge1从而与Openwrt的lan口连接，甚至还可以再安装一个windows作为下载机。</p>
<p>开发的时候需要很多硬盘空间，可以将物理硬盘直接映射进虚拟机，通过下面这个命令实现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qm set VM-ID --virtio0 /dev/disk/by-id/DISK-ID</span><br></pre></td></tr></table></figure>

<p>其中VM-ID是虚拟机的编号，比如100；**–virtio**是映射类型，0是一个编号；最后一个参数是待映射的磁盘的ID。</p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>proxmoxve</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>解读基金——我的投资观与实践</title>
    <url>/2021/02/02/interpretation-of-fund-and-my-practice.html</url>
    <content><![CDATA[<blockquote>
<p>复利——被爱因斯坦称为“人类最有力的发现”，也被一些人称为“世界第八大奇迹”。复利，其实就是大家俗称的“利滚利”。一听到利滚利，我们想到的都是高利贷，我们都知道一旦陷入高利贷、利滚利的圈套，几乎永远不能翻身。是啊，当我们借贷的时候，利滚利会要我们的命。可我们如果把自己的钱利滚利，让利滚利为我所用，那得到的结果就是——你会成为一个百万富翁。</p>
</blockquote>
<span id="more"></span>

<h1 id="投资的准备"><a href="#投资的准备" class="headerlink" title="投资的准备"></a>投资的准备</h1><p>我们必须搞清楚的一点是：<strong>我们要投资而不是投机。</strong></p>
<p>基金就是把大家的钱收集到一起，由专门的人（基金经理）帮我们去投资证券市场。他提取他的佣金，我们拿我们的收益。</p>
<p>开放式基金的运行模式是采用一种严格的制衡关系。也就是说，基金资产的管理于保管是分开的，基金公司管理我们的钱的投资运作，而钱一般是托管在银行的。</p>
<p>佣金主要分为两部分：</p>
<ol>
<li>一次性收费<ul>
<li>认购 &#x2F; 申购费用：新发基金叫认购，成立后叫申购<ul>
<li>前端收费：购买时缴纳</li>
<li>后端收费：赎回时缴纳</li>
</ul>
</li>
<li>赎回费用</li>
</ul>
</li>
<li>非一次性收费<ul>
<li>管理费</li>
<li>托管费</li>
</ul>
</li>
</ol>
<p>开放式基金的总份额是不固定的，每份的销售价格就是其净值。主要有以下4种类型：</p>
<ol>
<li>股票基金：股票市场</li>
<li>债券基金：债券市场</li>
<li>货币基金：短期货币市场</li>
<li>配置型基金</li>
</ol>
<p>千万别立刻就开始投资。先学习，先做功课，态度决定一切。钱是我们自己的，投资是我们自己的事情，我们自己的事情还得我们自己做主。投资不是比智商，而是比谁更理性，而理性的前提就是理解，要理解就得花时间。</p>
]]></content>
      <categories>
        <category>Wealth</category>
      </categories>
      <tags>
        <tag>基金</tag>
        <tag>投资</tag>
      </tags>
  </entry>
  <entry>
    <title>Interview Questions for Linux Engineer</title>
    <url>/2022/01/22/interview-questions-for-linux-engineer.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6953e6ea7c7585dfe66b81ce3a41d32b9bb9d834dc3b9e64dec96ae1ddd7d548"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Interview</category>
      </categories>
  </entry>
  <entry>
    <title>The Bitcoin</title>
    <url>/2021/05/26/introduce-of-the-bitcoin.html</url>
    <content><![CDATA[<blockquote>
<p>Pathways: Dynamic Leadership</p>
<p>Level 1-3: Researching and Presenting</p>
</blockquote>
<span id="more"></span>

<p>5月19日，加密货币市场出现了一波大震荡，相较于一个月前，比特币的跌幅高达53%，以至于交易所都出现了宕机，许多购买了杠杆的炒币者被平仓，损失惨重。这次震荡也使得比特币再次进入公众视野当中。</p>
<p>谈起比特币，大家最先想到的是什么？</p>
<p>诸如区块链、电子货币、一夜暴富等词汇似乎与比特币有千丝万缕的联系，所以，第一部分我想跟大家聊聊，比特币到底是什么。</p>
<p>说起比特币，有两个计算机技术是绕不开的话题——哈希校验和非对称加密。</p>
<p>我们先来看比较简单的——哈希校验。</p>
<p>计算机中所存储的种种数据、如文档、音乐、视频等，都可以被看作是一长串数字，哈希校验算法通过对这一长串数字进行运算，得到一串新的数字，即使源数据发生微小的变化，经过计算得到的校验值也会与之前完全不同，因此这个数字就可以看作是一个特征值，用于标识一个特定的数据。</p>
<p>但是这种计算是不可逆的，通过一个哈希值，我们没有办法恢复原本的数据。</p>
<p><strong>Toastmaster: f27478c4d67652228fbbc189954d1068301622461bf817a5e4582614a13aae46</strong></p>
<p><strong>toastmaster: f98a53e31e80c45ddcb93bb5a9da73cf6db0c4425c41517a516c2795a113685b</strong></p>
<p>再来看第二个技术——非对称加密。</p>
<p>这里包含两个概念，公钥和私钥，可以简单的把它们理解成两个钥匙，并且具有这样的特点：</p>
<ol>
<li>使用私钥加密的数据，只能使用公钥解密</li>
<li>使用公钥加密的数据，只能使用私钥解密</li>
</ol>
<p>这里，比特币主要使用了第一种情况，即私钥加密、公钥解密，它还有一个很形象的名字——数字签名。</p>
<p>签名的目的就是为了证明这个东西是我的，而不是别人伪造的。</p>
<p>所以如果我想对一个视频进行数字签名，并发送给Lowensky，首先，我把我的公钥给Lowensky，然后计算文档的哈希值，接着用我的私钥加密这个哈希值，就得到了数字签名，最后将视频以及数字签名发送给Lowensky，Lowensky只需要用公钥解密数字签名，得到哈希值，再与他自己计算得到的哈希值进行比较，就能知道视频有没有被篡改。</p>
<p>了解了这两个技术，我们终于可以聊聊比特币的本质——比特币系统就是一个账本。</p>
<p>这里，我再举个例子：</p>
<p>我跟Bob、Alice是好朋友，我们经常一块出去玩，那么就需要对费用进行AA，但是每次算账很麻烦，不算帐实力又不允许，于是我们就把账都记录在一个账本上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Ryan 付了 50元 给 Bob</span><br><span class="line">2. Alice 收了 Bob 100元</span><br><span class="line">3. Bob 付了 30元 给 Ryan</span><br></pre></td></tr></table></figure>

<p>然后到了月末，对账本进行汇总，如果谁有盈余，就将盈余取走，如果谁欠了钱，就需要补回来，每月一次，方便了很多。</p>
<p>但如果有人偷偷加了一条不存在的交易记录怎么办？</p>
<p>这时，就可以使用数字签名技术，我们把每一条交易记录附上一个数字签名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Ryan 付了 50元 给 Bob 0011101...</span><br><span class="line">2. Alice 收了 Bob 100元 1010111...</span><br><span class="line">3. Bob 付了 30元 给 Ryan 1011011...</span><br></pre></td></tr></table></figure>

<p>这样，别人就不能偷偷的在账本上增加或者修改不存在的交易记录，因为每个人只有自己的私钥，而没有别人的私钥， 因此，每一条记录只能由当事人添加。</p>
<p>这样，大家就共同建立了一个互相信任的账本，但是还存在一个问题，如果有人欠了很多钱，跑路了怎么办？为了解决这个问题，可以在一开始，大家先在账本中充值，然后再使用账本，当某个人余额不足的时候，就决绝添加交易记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Ryan 充值了 100元 0010101...</span><br><span class="line">2. Alice 充值了 100元 0111011...</span><br><span class="line">3. Bob充值了 100元 1101101...</span><br><span class="line"></span><br><span class="line">4. Ryan 付了 50元 给 Bob 0011101...</span><br><span class="line">5. Alice 收了 Bob 100元 1010111...</span><br><span class="line">6. Bob 付了 30元 给 Ryan 1011011... -&gt; 余额不足，拒绝交易</span><br></pre></td></tr></table></figure>

<p>这时，我们就会发现，如果所有人都使用这个账本，我们就可以完全与现金脱钩了，每个人的财富由其所有的交易记录的汇总来定义。</p>
<p>因为这个账本人人都可以修改，人人都需要修改，那么放在哪里才能让大家都能访问呢？比特币为了区中心化，选择了一种独特的方式——工作量证明。</p>
<p>还记得我们刚才说的哈希值吗，因为它本身是不可逆的，所以如果我问：</p>
<p>（账本数据 + 未知数）&#x3D;&#x3D;哈希&#x3D;&#x3D;》 哈希值（256位的前60位都是0）</p>
<p>这个未知数是多少？要得到这个未知数，唯一的方法就是一个一个试。这个尝试并得到答案的过程就是工作量证明。</p>
<p>在比特币的网络中，存在许多计算节点，它们无时无刻不在监听，监听的对象就是一笔笔的交易记录。每个节点会把这些交易记录放在一个池子中，然后拿出一组交易记录，开始计算那个未知数，当计算出未知数后，这个（账本+未知数）就是一个区块，然后该节点会向其它节点广播这个区块，告诉大家，我算出答案了，这样，这组交易记录就被永远写在比特币网络当中，一个一个区块相互链接，就形成了区块链。</p>
<p>每生成一个新的区块，都会产生一定数量的比特币，这些比特币就会奖励给这个计算节点，也就是所谓的比特币矿工，这些新产生的比特币，本质上也就是交易记录。</p>
<p>随着区块数量的增多，每个区块所附加的比特币也会递减，最终减少到0，因此比特币的总量是有限的，大约是2100万枚。而比特币账户，也是完全匿名的，它只是一个字符串，用于唯一标识一个用户。</p>
<p>单纯从技术上来看，比特币似乎很美好，去中心化，总量有限，不会超发，交易完全匿名。</p>
<p>目前，中国对于比特币的态度是严厉禁止，主要可能基于以下两点：</p>
<ol>
<li>比特币基于互联网，它可以绕开外汇管制，对于洗钱等非法交易提供了极大的便利</li>
<li>人民币的本质是中心化，比特币的去中心化与中国的发展战略背道而驰</li>
</ol>
<p>甚至最近有新闻指出，比特币矿工将会被列入失信名单，可见中国对于比特币的强硬态度。</p>
<p>在可预见的未来，比特币都将长期存在，持有少量比特币也不会有太大风险，但是对于杠杆、合约、期货等炒币行为，希望大家能够谨慎对待。</p>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
        <tag>speech</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是液态镜头（Liquid Lens）</title>
    <url>/2021/01/31/introduction-of-liquid-lens.html</url>
    <content><![CDATA[<blockquote>
<p>随着手机拍照的大规模普及，越来越多的人拿起手机记录生活，摄像头的各种参数也逐渐被大众所熟知。相较于大家比较关注的CMOS尺寸和像素，镜头这个话题的热度比较冷清。目前主流的镜头都是使用玻璃作为镜片，通过调节镜片之前的间距来实现对焦。但是，还有一种使用液体来实现对焦的镜头，今天就介绍一下这种有趣的<strong>液态镜头</strong>。</p>
</blockquote>
<span id="more"></span>

<p>首先来看一下液态镜头的实际效果：</p>
<img src="/2021/01/31/introduction-of-liquid-lens/demonstrate_liquid_lens.gif" class="" title="demonstrate_liquid_lens.gif">

<p>可以看到，镜头可以在一个相当大的范围内连续调节焦距，并且整个过程非常顺滑。</p>
<p>液态镜头不使用传统的玻璃作为光学透镜，而是使用透明的油滴，没错，就是<strong>一滴油</strong>和<strong>一滴水</strong>。</p>
<p>传统的镜头是使用一组镜片，通过调节镜片的间距来调节整个光学系统的焦点，因为每个镜片的曲率半径是没有办法变化的，所以单一的镜片就不能实现对焦。</p>
<p>液态镜头则恰恰相反，它通过改变“镜片”的曲率半径来实现对焦，这非常类似于人眼的晶状体，如下图所示：</p>
<img src="/2021/01/31/introduction-of-liquid-lens/liquid_lenses_in_imaging.png" class="" title="liquid_lenses_in_imaging.png">

<p>与人眼通过睫状肌控制晶状体的形状不同，液态镜头利用了一种叫做<strong>电润湿（Electrowetting）</strong>的现象，简单的说就是通过改变电压来改变抗水表面的亲水性，由于原先抗水的表面现在变得更吸水，油膜不得不改变其形式。</p>
<p>所以液态镜头就是在两块玻璃板之间，夹着一滴水和一滴油，在没有电场的时候，水滴和油滴都处于松弛状态，此时充当“镜片”的油滴是一个凹透镜。</p>
<p>而当我们施加了一定的电压之后，右侧电极的金属表面变得更加<strong>亲水</strong>，于是就把更多的水吸引到镜头的边缘，也就是镜头中间的水会变少，此时油滴自然而然地就会变成一个<strong>边缘薄</strong>，<strong>中间厚</strong>地凸透镜，其曲率半径以及焦点地位置都会随之发生变化。</p>
<p>目前世界上最大的制造液态镜头的公司是<a href="http://varioptic.com/en/products.html">Varioptic</a>，镜头的外形类似于一个小金属按钮，电极的触点则是在镜头的前后两侧，所以通过把它夹在两块覆盖铜箔的电路板之间就可以对它进行供电。</p>
<img src="/2021/01/31/introduction-of-liquid-lens/liquid-lens-appearance.png" class="" title="liquid-lens-appearance.png">

<p>要驱动这个镜头需要比较高的电压，并且需要专用的芯片来驱动：HV892，这款芯片来自于Supertex。我们需要通过IIC来控制它。所以使用Arduino作为驱动板。</p>
<img src="/2021/01/31/introduction-of-liquid-lens/liquid-lens-driver.png" class="" title="liquid-lens-driver.png">

<p>液态镜头相较于传统的机械对焦镜头的优势就是体积小，对焦速度快，对焦范围大。比如在生产线上识别条形码的时候，不同高度的货品通过时需要连续地快速精确对焦。</p>
<img src="/2021/01/31/introduction-of-liquid-lens/liquid-lens-animation.gif" class="" title="liquid-lens-animation.gif">

]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>liquid</tag>
        <tag>lens</tag>
      </tags>
  </entry>
  <entry>
    <title>iTop-4412 learning —— beginning</title>
    <url>/2022/01/03/itop-4412-learning-beginning.html</url>
    <content><![CDATA[<blockquote>
<p>Recently I bought a new deveopment board: iTop-4412, which is based on samsung exynos 4412. Hoping this new board will increase my understanding of Linux and hardware.</p>
</blockquote>
<span id="more"></span>

<h1 id="Learning-Framework"><a href="#Learning-Framework" class="headerlink" title="Learning Framework"></a>Learning Framework</h1><ul>
<li><p><strong>Single chip microprocessor</strong> + <strong>C language</strong></p>
</li>
<li><p>Linux basic framework (Bootloader, Kernel, Filesystem)</p>
</li>
<li><p>Linux userspace programming</p>
</li>
<li><p>Linux character device programming</p>
</li>
</ul>
<h1 id="DIP-Switch"><a href="#DIP-Switch" class="headerlink" title="DIP Switch"></a>DIP Switch</h1><ul>
<li><p>0: near to number</p>
</li>
<li><p>1: near to letter</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>DIP switch</th>
<th align="center">1</th>
<th align="center">2</th>
</tr>
</thead>
<tbody><tr>
<td>EMMC</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td>TF</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
</tbody></table>
<h1 id="Board-Type"><a href="#Board-Type" class="headerlink" title="Board Type"></a>Board Type</h1><p>SCP: 6 chips</p>
<p>COP: 2 chips</p>
<h1 id="Flash-Image"><a href="#Flash-Image" class="headerlink" title="Flash Image"></a>Flash Image</h1><h2 id="Fastboot"><a href="#Fastboot" class="headerlink" title="Fastboot"></a>Fastboot</h2><p>In Uboot:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -c 0</span><br><span class="line">fatformat mmc 0:1</span><br><span class="line">ext3format mmc 0:2</span><br><span class="line">ext3format mmc 0:3</span><br><span class="line">ext3format mmc 0:4</span><br><span class="line">fastboot</span><br></pre></td></tr></table></figure>

<p>In fastboot shell:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fastboot flash bootloader u-boot-iTOP-4412.bin</span><br><span class="line">fastboot flash kernel zImage</span><br><span class="line">fastboot flash ramdisk ramdisk-uboot.img</span><br><span class="line">fastboot flash system system.img</span><br><span class="line">fastboot -w</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure>

<h2 id="TF-card"><a href="#TF-card" class="headerlink" title="TF card"></a>TF card</h2><p>Will update if needed.</p>
]]></content>
      <categories>
        <category>Embedded</category>
      </categories>
  </entry>
  <entry>
    <title>Leadership between Democracy and Authority</title>
    <url>/2021/06/24/leadership-between-democratic-and-authoritative.html</url>
    <content><![CDATA[<blockquote>
<p>Pathways: Dynamic Leadership</p>
<p>Level 2-1: Understanding Your Leadership Style</p>
</blockquote>
<span id="more"></span>

<h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><p>As a newbie without going through too much in the society, it seems I never have taken time to think about what if I am a leader, because in my work life, the only thing I can control is my computer, and she will never resist my order. What kind of leadership style will I have, and can I get along well with my subordinate? It turns out that if I want to figure out my leadership character, I need a real case.</p>
<p>After searching in my mind, I realized I did have an experience of leadership, but it’s not quite a delighted one. What happened? Please let me share the story.</p>
<p>When I was in college, to encourage students to do some technology innovation, the school established a foundation to support new ideas and creations. At that time, I was quite interested in coding, thus I decided to recruit two of my classmates and as a group we will make an Android app to apply for the fund. And of course, I would be the leader of the team. That’s the first time I realized that there could be so much problems coming from my leadership styles.</p>
<p>At the design stage of the project, to act as a friendly and democratic leader, I just let everyone to share their thoughts, this is all right, but the crazy part is that I decided to achieve them all. Though I knew some ideas were difficult, I just didn’t want to reject any idea from anyone, I didn’t want to be the bad guy. That’s the moment when the nightmare started.</p>
<p>After finished design, we needed to write the paper of project plan. At the meeting, I asked the team: do you want to write the document? No one responded. Then I continued, or I can do this if you don’t…  There is no doubt this job belonged to me. Actually I didn’t want it at all, what I wanted was just being nice and letting everyone can do anything. This idea sounded good but felt bad.</p>
<p>But just as the saying said: The only lesson mankind has learned from history is that it never learns anything. When we finished distributing the jobs and entered the coding stage, I said: please feel free and you can do this job at your spare time. Then we came to home on the summer holiday. To decrease the pressure I brought to my team, I didn’t ask about this among the whole holiday. After we went back to school, guess what, nothing had been done by them. I feel angry, but I need to be nice, so I behaved something like nice-angry. I said: It’s impossible to have zero free time to work at home, now that you didn’t finish yours, I will try to do these jobs by myself.</p>
<p>The project was complex and I have to work overtime. The coding had been not that attractive and made me exhausted. I felt tired, angry and regret, I just wanted to be a good leader but now all the things messed up.</p>
<p>Eventually, I nearly finished the whole project on my own, unfortunately all of us needed to report to the teacher about the role and duty in the project, then I had to make up some workload for them, how ironic it is!</p>
<p>I don’t think this is a smooth and successful project, there existed a candy bomb: I tried to be democratic, but failed to provide enough communications and connections in the team. It became so inefficient because too much freedom made the team lost the direction.</p>
<p>Suppose I have another chance to lead a team, I will limit the democratic in a reasonable range and be more authoritative in some critical stage to make sure everything can be finished on time.</p>
<p>That’s the leadership experience of mine and the style I have, now I believe the good ending of a project needs the balance between democracy and authority.</p>
<h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><p>Good point</p>
<ul>
<li>Start the speech by asking some questions</li>
<li>The speech title is interesting</li>
<li>the description of the story is vivid</li>
</ul>
<p>Bad point</p>
<ul>
<li>Could use more gestures , such as showing number</li>
<li>Could use more body language to make the conversation in the speech vivider</li>
<li>Put more emotion in the speech, do not act as reciting an article</li>
</ul>
<h1 id="Photos"><a href="#Photos" class="headerlink" title="Photos"></a>Photos</h1><img src="/2021/06/24/leadership-between-democratic-and-authoritative/photo1.jpg" class="">

<img src="/2021/06/24/leadership-between-democratic-and-authoritative/photo2.png" class="">

]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
        <tag>speech</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu安装OSX的主题</title>
    <url>/2019/05/19/make-ubuntu-look-like-osx.html</url>
    <content><![CDATA[<blockquote>
<p>随着Ubuntu再次回归Gnome的怀抱，其UI的可定制性再上了一个台阶，这次来看看基于Gnome3打造一个高仿OSX的界面。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><ol>
<li><p>安装gnome-tweak-tool</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Arc menu插件</p>
<p>在应用商店中搜索“Arc menu”并安装，如图所示</p>
<img src="/2019/05/19/make-ubuntu-look-like-osx/arc-menu.png" class="" title="Arc menu">
</li>
<li><p>安装user themes插件</p>
<p>在应用商店中搜索“user themes”并安装，如图所示</p>
<img src="/2019/05/19/make-ubuntu-look-like-osx/user-themes.png" class="" title="user themes">
</li>
<li><p>安装blyr插件</p>
<p>在应用商店中搜索“blyr”并安装，如图所示</p>
<img src="/2019/05/19/make-ubuntu-look-like-osx/blyr.png" class="" title="blyr"></li>
</ol>
<h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><ol>
<li><p>安装OSX主题</p>
<p><a href="https://www.gnome-look.org/p/1241688/"><strong>McOS-themes</strong></a>，需要下载图中的两个文件，分别对应亮色调和暗色调，然后将它们解压到<code>~/.themes</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xf McOS-MJV-Gn3.32-v2.1.tar.xz -C ~/.themes</span><br><span class="line">tar -xf Mc-OS-MJV-Dark-Gn3.32-V.2.1.tar.xz -C ~/.themes</span><br></pre></td></tr></table></figure>

<img src="/2019/05/19/make-ubuntu-look-like-osx/theme.png" class="" title="theme">
</li>
<li><p>安装OSX图标</p>
<p><a href="https://www.gnome-look.org/p/1102582/"><strong>Cupertino iCons Collection</strong></a>，需要下载图中的文件，然后解压到<code>~/.icons。</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xf Cupertino-Mojave.tar.xz	-C ~/.icons</span><br></pre></td></tr></table></figure>

<img src="/2019/05/19/make-ubuntu-look-like-osx/icon.png" class="" title="icon">
</li>
<li><p>安装OSX shell</p>
<p><a href="https://www.gnome-look.org/p/1213208/"><strong>macOS MOJAVE</strong></a>，需要下载图中的文件，解压后按照Gnome的版本，将相应的目录复制到<code>~/.themes</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gnome-shell --version # 确定gnome版本</span><br><span class="line">tar -xf OSX.for.Dash.to.DOCK.tar.xz</span><br><span class="line">cp -r 3.26\ -\ 3.28/Mojave ~/.themes/</span><br></pre></td></tr></table></figure>

<img src="/2019/05/19/make-ubuntu-look-like-osx/shell.png" class="" title="shell"></li>
</ol>
<h1 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h1><p>打开Tweaks，在Apperance -&gt; Themes下，分别选择安装好的项目。</p>
<img src="/2019/05/19/make-ubuntu-look-like-osx/tweaks.png" class="" title="tweaks">

<img src="/2019/05/19/make-ubuntu-look-like-osx/demo.png" class="" title="demo">

<h1 id="一些区别"><a href="#一些区别" class="headerlink" title="一些区别"></a>一些区别</h1><p>由于OSX原生的Dock会挤占屏幕上下的空间，这对于读写代码很不利，所以我并没有追求完全一样的效果，相对来说，竖排的Dock栏更加高效。</p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>gnome3</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法大全</title>
    <url>/2018/10/15/markdown-syntax.html</url>
    <content><![CDATA[<p>&lt;&lt; <a href="http://wowubuntu.com/">访问 Wow!Ubuntu</a></p>
<p><strong>NOTE:</strong> This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax">Markdown: Syntax</a>.</p>
<p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">查看这里</a> 。」–By @<a href="http://twitter.com/riku">riku</a></p>
<span id="more"></span>

<p><strong>注：</strong> 本项目托管于 <a href="https://github.com/riku/Markdown-Syntax-CN">GitHub</a>上，请通过”派生”和”合并请求”来帮忙改进本项目。</p>
<h1 id="Markdown-语法说明-简体中文版-x2F-点击查看快速入门"><a href="#Markdown-语法说明-简体中文版-x2F-点击查看快速入门" class="headerlink" title="Markdown 语法说明 (简体中文版) &#x2F; (点击查看快速入门)"></a>Markdown 语法说明 (简体中文版) &#x2F; (<a href="./basic.html">点击查看快速入门</a>)</h1><ul>
<li><a href="#overview">概述</a><ul>
<li><a href="#philosophy">宗旨</a></li>
<li><a href="#html">兼容 HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
</ul>
</li>
<li><a href="#block">区块元素</a><ul>
<li><a href="#p">段落和换行</a></li>
<li><a href="#header">标题</a></li>
<li><a href="#blockquote">区块引用</a></li>
<li><a href="#list">列表</a></li>
<li><a href="#precode">代码区块</a></li>
<li><a href="#hr">分隔线</a></li>
</ul>
</li>
<li><a href="#span">区段元素</a><ul>
<li><a href="#link">链接</a></li>
<li><a href="#em">强调</a></li>
<li><a href="#code">代码</a></li>
<li><a href="#img">图片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a><ul>
<li><a href="#backslash">反斜杠</a></li>
<li><a href="#autolink">自动链接</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感谢</a></li>
<li>   <a href="#editor">Markdown 免费编辑器</a></li>
</ul>
<hr>
<h2 id="overview">概述</h2>
<h3 id="philosophy">宗旨</h3>
Markdown 的目标是实现「易读易写」。

<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html">1</a>、[atx] <a href="http://www.aaronsw.com/2002/atx/">2</a>、[Textile] <a href="http://textism.com/tools/textile/">3</a>、[reStructuredText] <a href="http://docutils.sourceforge.net/rst.html">4</a>、[Grutatext] <a href="http://www.triptico.com/software/grutatxt.html">5</a> 和 [EtText] <a href="http://ettext.taint.org/doc/">6</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h3 id="html">兼容 HTML</h3>
Markdown 语法的目标是：成为一种适用于网络的*书写*语言。

<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
<pre><code>这是一个普通段落。

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

这是另一个普通段落。
</code></pre>
<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>
<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<h3 id="autoescape">特殊字符自动转换</h3>
在 HTML 文件中，有两个字符需要特殊处理： `<` 和 `&` 。 `<` 符号用于起始标签，`&` 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 `&lt;` 和 `&amp;`。

<p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p>
<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre>
<p>你必须要把网址转换写为：</p>
<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre>
<p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>
<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p>
<p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p>
<pre><code>&amp;copy;
</code></pre>
<p>Markdown 会保留它不动。而若你写：</p>
<pre><code>AT&amp;T
</code></pre>
<p>Markdown 就会将它转为：</p>
<pre><code>AT&amp;amp;T
</code></pre>
<p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>
<pre><code>4 &lt; 5
</code></pre>
<p>Markdown 将会把它转换为：</p>
<pre><code>4 &amp;lt; 5
</code></pre>
<p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>
<hr>
<h2 id="block">区块元素</h2>

<h3 id="p">段落和换行</h3>
一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。

<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p>
<p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
<p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="header">标题</h3>
Markdown 支持两种标题的语法，类 [Setext] [1] 和类 [atx] [2] 形式。

<p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>
<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre>
<p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p>
<pre><code># 这是 H1

## 这是 H2

###### 这是 H6
</code></pre>
<p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<pre><code># 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######
</code></pre>
<h3 id="blockquote">区块引用 Blockquotes</h3>
Markdown 标记区块引用是使用类似 email 中用 `>` 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 `>` ：

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre>
<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>
<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>
<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre>
<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre><code>&gt; ## 这是一个标题。
&gt; 
&gt; 1.   这是第一行列表项。
&gt; 2.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre>
<p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p>
<h3 id="list">列表</h3>
Markdown 支持有序列表和无序列表。

<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre><code>*   Red
*   Green
*   Blue
</code></pre>
<p>等同于：</p>
<pre><code>+   Red
+   Green
+   Blue
</code></pre>
<p>也等同于：</p>
<pre><code>-   Red
-   Green
-   Blue
</code></pre>
<p>有序列表则使用数字接着一个英文句点：</p>
<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre>
<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>
<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre>
<p>如果你的列表标记写成：</p>
<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre>
<p>或甚至是：</p>
<pre><code>3. Bird
1. McHale
8. Parish
</code></pre>
<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>
<p>但是如果你懒，那也行：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>
<p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code><br>标签包起来，举例来说：</p>
<pre><code>*   Bird
*   Magic
</code></pre>
<p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>但是这个：</p>
<pre><code>*   Bird

*   Magic
</code></pre>
<p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>
<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>
<p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&#39;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre>
<p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre>
<p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p>
<pre><code>*   一列表项包含一个列表区块：

        &lt;代码写在这&gt;
</code></pre>
<p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<pre><code>1986. What a great season.
</code></pre>
<p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<pre><code>1986\. What a great season.
</code></pre>
<h3 id="precode">代码区块</h3>
和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 `<pre>` 和 `<code>` 标签来把代码区块包起来。

<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<pre><code>这是一个普通段落：

    这是一个代码区块。
</code></pre>
<p>Markdown 会转换成：</p>
<pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;
</code></pre>
<p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>
<pre><code>Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell
</code></pre>
<p>会被转换为：</p>
<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre>
<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>
<p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>
<pre><code>    &lt;div class=&quot;footer&quot;&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
</code></pre>
<p>会被转换为：</p>
<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>
<p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>
<h3 id="hr">分隔线</h3>
你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：

<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>
<hr>
<h2 id="span">区段元素</h2>
<h3 id="link">链接</h3>
Markdown 支持两种形式的链接语法： *行内式*和*参考式*两种形式。

<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>
<p>会产生：</p>
<pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre>
<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>
<pre><code>See my [About](/about/) page for details.   
</code></pre>
<p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>
<pre><code>This is [an example][id] reference-style link.
</code></pre>
<p>你也可以选择性地在两个方括号中间加上一个空格：</p>
<pre><code>This is [an example] [id] reference-style link.
</code></pre>
<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre>
<p>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<p>下面这三种链接的定义都是相同：</p>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &#39;Optional Title Here&#39;
[foo]: http://example.com/  (Optional Title Here)
</code></pre>
<p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>
<p>链接网址也可以用尖括号包起来：</p>
<pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;
</code></pre>
<p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>
<pre><code>[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;
</code></pre>
<p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>
<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p>
<pre><code>[link text][a]
[link text][A]
</code></pre>
<p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p>
<pre><code>[Google][]
</code></pre>
<p>然后定义链接内容：</p>
<pre><code>[Google]: http://google.com/
</code></pre>
<p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>
<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>
<p>然后接着定义链接：</p>
<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>
<p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>
<p>下面是一个参考式链接的范例：</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre>
<p>如果改成用链接名称的方式写：</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre>
<p>上面两种写法都会产生下面的 HTML。</p>
<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>
<p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
</code></pre>
<p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>
<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>
<h3 id="em">强调</h3>
Markdown 使用星号（`*`）和底线（`_`）作为标记强调字词的符号，被 `*` 或 `_` 包围的字词会被转成用 `<em>` 标签包围，用两个 `*` 或 `_` 包起来的话，则会被转成 `<strong>`，例如：

<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre>
<p>会转成：</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>
<p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>
<p>强调也可以直接插在文字中间：</p>
<pre><code>un*frigging*believable
</code></pre>
<p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p>
<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre>
<h3 id="code">代码</h3>
如果要标记一小段行内代码，你可以用反引号把它包起来（`` ` ``），例如：

<pre><code>Use the `printf()` function.
</code></pre>
<p>会产生：</p>
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre>
<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>
<pre><code>``There is a literal backtick (`) here.``
</code></pre>
<p>这段语法会产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre>
<p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>
<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>
<p>会产生：</p>
<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre>
<p>在代码区段内，<code>&amp;</code> 和尖括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>
<pre><code>Please don&#39;t use any `&lt;blink&gt;` tags.
</code></pre>
<p>转为：</p>
<pre><code>&lt;p&gt;Please don&#39;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre>
<p>你也可以这样写：</p>
<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre>
<p>以产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre>
<h3 id="img">图片</h3>
很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。

<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p>
<p>行内式的图片语法看起来像是：</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre>
<p>详细叙述如下：</p>
<ul>
<li>一个惊叹号 <code>!</code></li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上<br>选择性的 ‘title’ 文字。</li>
</ul>
<p>参考式的图片语法则长得像这样：</p>
<pre><code>![Alt text][id]
</code></pre>
<p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;
</code></pre>
<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="misc">其它</h2>
<h3 id="autolink">自动链接</h3>
Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：

<pre><code>&lt;http://example.com/&gt;
</code></pre>
<p>Markdown 会转为：</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;
</code></pre>
<p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>
<pre><code>&lt;address@example.com&gt;
</code></pre>
<p>Markdown 会转成：</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>
<p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a href="mailto:&#97;&#x64;&#100;&#114;&#101;&#x73;&#x73;&#64;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#x6d;">&#97;&#x64;&#100;&#114;&#101;&#x73;&#x73;&#64;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#x6f;&#x6d;</a>」链接。</p>
<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>
<h3 id="backslash">反斜杠</h3>
Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `<em>` 标签），你可以在星号的前面加上反斜杠：

<pre><code>\*literal asterisks\*
</code></pre>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜线
`   反引号
*   星号
_   底线
&#123;&#125;  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre>
<h2 id="acknowledgement">感谢</h2>
感谢 [leafy7382][] 协助翻译，[hlb][]、[Randylien][] 帮忙润稿，[ethantw][] 的[汉字标准格式・CSS Reset][]， [WM][] 回报文字错误。

<p>感谢 <a href="https://github.com/fenprace">fenprace</a>，<a href="https://github.com/addv">addv</a>。</p>
<hr>
<h2 id="editor">Markdown 免费编辑器</h2>
Windows 平台

<ul>
<li><a href="http://markdownpad.com/">MarkdownPad</a></li>
<li><a href="http://code52.org/DownmarkerWPF/">MarkPad</a></li>
</ul>
<p>Linux 平台</p>
<ul>
<li><a href="http://sourceforge.net/p/retext/home/ReText/">ReText</a></li>
</ul>
<p>Mac 平台</p>
<ul>
<li><a href="http://mouapp.com/">Mou</a></li>
</ul>
<p>在线编辑器</p>
<ul>
<li><a href="http://markable.in/">Markable.in</a></li>
<li><a href="http://dillinger.io/">Dillinger.io</a></li>
</ul>
<p>浏览器插件</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog">MaDe</a> (Chrome)</li>
</ul>
<p>高级应用</p>
<ul>
<li><a href="http://www.sublimetext.com/2">Sublime Text 2</a> + <a href="http://ttscoff.github.com/MarkdownEditing/">MarkdownEditing</a> &#x2F; <a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/">教程</a></li>
</ul>
<p>*** 如有更好的 Markdown 免费编辑器推荐，请到<a href="https://gitcafe.com/riku/Markdown-Syntax-CN/tickets/1">这里反馈</a>，谢谢！</p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Remote Access to Plex via IPv6</title>
    <url>/2022/06/03/remote-access-to-plex-via-ipv6.html</url>
    <content><![CDATA[<blockquote>
<p>Public IPv4 addresses become much rarer in recent years, at the same time IPv6 grows rapidly and most ISPs have started supported it. To remote access to plex media server via IPv6, some configurations need to be setup.</p>
</blockquote>
<span id="more"></span>

<h1 id="Prerequest"><a href="#Prerequest" class="headerlink" title="Prerequest"></a>Prerequest</h1><p>This article supposes you have a custom domain, and DDNS&#x2F;DNS has been properly configured. Thus the server can be accessed directly via domain.</p>
<h1 id="Install-Plex-Media-Server"><a href="#Install-Plex-Media-Server" class="headerlink" title="Install Plex Media Server"></a>Install Plex Media Server</h1><h2 id="DEB-based-distros-Ubuntu-etc"><a href="#DEB-based-distros-Ubuntu-etc" class="headerlink" title="DEB-based distros (Ubuntu, etc.)"></a>DEB-based distros (Ubuntu, etc.)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add source</span></span><br><span class="line"><span class="built_in">echo</span> deb https://downloads.plex.tv/repo/deb public main | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/plexmediaserver.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add key</span></span><br><span class="line">curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install plexmediaserver</span><br></pre></td></tr></table></figure>

<h2 id="RPM-based-distros-Fedora-CentOS-etc"><a href="#RPM-based-distros-Fedora-CentOS-etc" class="headerlink" title="RPM-based distros (Fedora, CentOS, etc.)"></a>RPM-based distros (Fedora, CentOS, etc.)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/plex.repo</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[PlexRepo]</span></span><br><span class="line"><span class="attr">name</span>=PlexRepo</span><br><span class="line"><span class="attr">baseurl</span>=https://downloads.plex.tv/repo/rpm/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://downloads.plex.tv/plex-keys/PlexSign.key</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install plexmediaserver</span><br></pre></td></tr></table></figure>

<h1 id="Configure-Network"><a href="#Configure-Network" class="headerlink" title="Configure Network"></a>Configure Network</h1><p>Goto <strong>Settings -&gt; Network</strong></p>
<h2 id="Enable-IPv6-support-in-plex-media-server"><a href="#Enable-IPv6-support-in-plex-media-server" class="headerlink" title="Enable IPv6 support in plex media server"></a>Enable IPv6 support in plex media server</h2><img src="/2022/06/03/remote-access-to-plex-via-ipv6/enable-ipv6.png" class="">

<h2 id="Set-custom-URL"><a href="#Set-custom-URL" class="headerlink" title="Set custom URL"></a>Set custom URL</h2><p>This step is to give you access to flex media server in android app.</p>
<img src="/2022/06/03/remote-access-to-plex-via-ipv6/custom-url.png" class="">

<h2 id="Allow-insecure-connection"><a href="#Allow-insecure-connection" class="headerlink" title="Allow insecure connection"></a>Allow insecure connection</h2><p>Open Android App, Goto <strong>Settings -&gt; Advantage -&gt; Allow insecure connection</strong></p>
<p>Set to <strong>Always</strong></p>
<h1 id="Just-Play"><a href="#Just-Play" class="headerlink" title="Just Play"></a>Just Play</h1><p>Now you can either access to your flex media server via</p>
<p><strong>http:&#x2F;&#x2F;&lt;your domain&gt;:32400</strong></p>
<p>Or through Android App.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://support.plex.tv/articles/235974187-enable-repository-updating-for-supported-linux-server-distributions/">https://support.plex.tv/articles/235974187-enable-repository-updating-for-supported-linux-server-distributions/</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>Media</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup Jellyfin as Your Home Media Server</title>
    <url>/2022/02/27/setup-jellyfin-as-home-media-server.html</url>
    <content><![CDATA[<blockquote>
<p>There are mainly two ways of storing multimedia: keeping them in client, or in server. For the later option, three softwares can be chose: Plex, Emby and Jellyfin. Today let’s talk about the last one —— Jellyfin.</p>
</blockquote>
<span id="more"></span>

<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>We choose Jellyfin because it’s the only open source solution. Actually, Emby used to be open source as well, but after the company decided to close source, some developer were get annoyed and launched the opensource version of Emby, that’s Jellyfin.</p>
<p>The main page of Jellyfin is as bellow</p>
<img src="/2022/02/27/setup-jellyfin-as-home-media-server/jellyfin.png" class="">

<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>I will try to install Jelyfin on Ubuntu, but it also supports a bunch of platforms, such as Windows, Mac and Android.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install apt-transport-https</span><br><span class="line">wget -O - https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$( dpkg --print-architecture )</span>] https://repo.jellyfin.org/<span class="subst">$( awk -F&#x27;=&#x27; &#x27;/^ID=/&#123; print $NF &#125;&#x27; /etc/os-release )</span> <span class="subst">$( awk -F&#x27;=&#x27; &#x27;/^VERSION_CODENAME=/&#123; print $NF &#125;&#x27; /etc/os-release )</span> main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/jellyfin.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install jellyfin</span><br></pre></td></tr></table></figure>

<p>Now you can access the server through <code>http://your_local_IP_address:8096</code> to finish the initial setup.</p>
<h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>If your server has public IP address, you may want to access Jellyfin through domain rather than IP:Port.</p>
<p>And normally a server will run multi service simultaneously, then you will need a reverse proxy to route different domain to the related service. Here I will take Nginx as example.</p>
<p>The default config will only use <code>http</code> as the lack of TLS cert. Your can uncomment the related line to enable <code>https</code> to increase security.</p>
<p><code>/etc/nginx/conf.d/jellyfin.conf</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Uncomment the commented sections after you have acquired a SSL Certificate</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="comment"># server_name DOMAIN_NAME;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uncomment to redirect HTTP to HTTPS</span></span><br><span class="line">    <span class="comment"># return 301 https://$host$request_uri;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment"># listen 443 ssl http2;</span></span><br><span class="line">    <span class="comment"># listen [::]:443 ssl http2;</span></span><br><span class="line">    <span class="attribute">server_name</span> DOMAIN_NAME;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># use a variable to store the upstream proxy</span></span><br><span class="line">    <span class="comment"># in this example we are using a hostname which is resolved via DNS</span></span><br><span class="line">    <span class="comment"># (if you aren&#x27;t using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)</span></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$jellyfin</span> jellyfin;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">127.0.0.1</span> valid=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#ssl_certificate /etc/letsencrypt/live/DOMAIN_NAME/fullchain.pem;</span></span><br><span class="line">    <span class="comment">#ssl_certificate_key /etc/letsencrypt/live/DOMAIN_NAME/privkey.pem;</span></span><br><span class="line">    <span class="comment">#include /etc/letsencrypt/options-ssl-nginx.conf;</span></span><br><span class="line">    <span class="comment">#ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;</span></span><br><span class="line">    <span class="comment">#add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;</span></span><br><span class="line">    <span class="comment">#ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN_NAME/chain.pem;</span></span><br><span class="line">    <span class="comment">#ssl_stapling on;</span></span><br><span class="line">    <span class="comment">#ssl_stapling_verify on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Security / XSS Mitigation Headers</span></span><br><span class="line">    <span class="attribute">add_header</span> X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Content-Type-Options <span class="string">&quot;nosniff&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Content Security Policy</span></span><br><span class="line">    <span class="comment"># See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP</span></span><br><span class="line">    <span class="comment"># Enforces https content and restricts JS/CSS to origin</span></span><br><span class="line">    <span class="comment"># External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.</span></span><br><span class="line">    <span class="comment">#add_header Content-Security-Policy &quot;default-src https: data: blob: http://image.tmdb.org; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;; script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; https://www.gstatic.com/cv/js/sender/v1/cast_sender.js https://www.gstatic.com/eureka/clank/95/cast_sender.js https://www.gstatic.com/eureka/clank/96/cast_sender.js https://www.gstatic.com/eureka/clank/97/cast_sender.js https://www.youtube.com blob:; worker-src &#x27;self&#x27; blob:; connect-src &#x27;self&#x27;; object-src &#x27;none&#x27;; frame-ancestors &#x27;self&#x27;&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> = / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">302</span> http://<span class="variable">$host</span>/web/;</span><br><span class="line">        <span class="comment">#return 302 https://$host/web/;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># Proxy main Jellyfin traffic</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://<span class="variable">$jellyfin</span>:8096;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Protocol <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Disable buffering when the nginx proxy gets very resource heavy upon streaming</span></span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/</span></span><br><span class="line">    <span class="section">location</span> = /web/ &#123;</span><br><span class="line">        <span class="comment"># Proxy main Jellyfin traffic</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://<span class="variable">$jellyfin</span>:8096/web/index.html;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Protocol <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /socket &#123;</span><br><span class="line">        <span class="comment"># Proxy Jellyfin Websockets traffic</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://<span class="variable">$jellyfin</span>:8096;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Protocol <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$http_host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Hardware-Acceleration"><a href="#Hardware-Acceleration" class="headerlink" title="Hardware Acceleration"></a>Hardware Acceleration</h2><p>Media server is not exactly like the file sharing server, such as samba. As the media files will be decoded on server side rather than client side.</p>
<p>This patten can be usefule when the media file can not be decoded by client. For example, Chrome can not play HEVC video. And when it happens, the server will transcode the file to a format which can be decoded by client. This process includes two routines: Decoding and Encoding.</p>
<p>Of cource these two works can be done by CPU, but as we know, CPU is not the perfect role to play such tasks, they should belong to the GPU. Then we need to enable GPU acceleration.</p>
<p>I will take Intel Quick Sync Video (QSV) as example because nearly most of home-based NAS are equipped with Intel CPU.</p>
<ul>
<li><p><strong>Install VAAPI driver</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install gpg-agent wget</span><br><span class="line">wget -qO - https://repositories.intel.com/graphics/intel-graphics.key | sudo apt-key add -</span><br><span class="line">sudo bash -c <span class="string">&quot;echo &#x27;deb [arch=amd64] https://repositories.intel.com/graphics/ubuntu focal main&#x27; &gt;&gt; /etc/apt/sources.list&quot;</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install intel-media-va-driver-non-free</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Add group</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG render jellyfin</span><br><span class="line">sudo systemctl restart jellyfin</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Check VA info</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/lib/jellyfin-ffmpeg/vainfo</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Configure QSV acceleration</strong></p>
<p>Go to <code>Dashboard -&gt; Playback -&gt; Transcoding</code>, select <code>Intel Quick Sync</code>, and click <code>Save</code>.</p>
</li>
<li><p><strong>Check GPU Usage</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install intel-gpu-tools</span><br><span class="line">sudo intel_gpu_top</span><br></pre></td></tr></table></figure>

<p>Play a HEVC video on Chrome, then check if there’s any GPU usage shown up.</p>
</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jellyfin.org/downloads/">Downloads - Jellyfin: The Free Software Media System</a></p>
<p><a href="https://jellyfin.org/docs/">Home | Documentation - Jellyfin Project</a></p>
<p><a href="https://github.com/Intel-Media-SDK/MediaSDK/wiki/Intel-media-stack-on-Ubuntu">Intel media stack on Ubuntu · Intel-Media-SDK&#x2F;MediaSDK Wiki · GitHub</a></p>
<p><a href="https://askubuntu.com/questions/387594/how-to-measure-gpu-usage">software recommendation - How to measure GPU usage? - Ask Ubuntu</a></p>
<p><a href="https://github.com/linuxserver/docker-jellyfin/issues/96#issuecomment-789768141">linuxserver&#x2F;jellyfin:10.6.4-1-ls96 broke Intel Quicksync (most likely due to jellyfin-ffmpeg4.3.1-4-focal) · Issue #96 · linuxserver&#x2F;docker-jellyfin · GitHub</a></p>
<p><a href="https://wiki.archlinux.org/title/Hardware_video_acceleration">Hardware video acceleration - ArchWiki</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>jellyfin</tag>
        <tag>media</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>从源码构建linux 2.6.10系统环境</title>
    <url>/2020/08/23/setup-linux-2-6-system-from-scratch.html</url>
    <content><![CDATA[<blockquote>
<p>最近想要重新看一遍ldd3，以前看的时候总是照着新版的内核写代码，结果很多接口都发生了变化，在这个问题上浪费了不少时间，以至于最后看不下去了。所以这次打算使用upstream的linux 2.6.10来做实验，一方面upstream的内核没有受到第三方patch的污染，另一方面可以把关注点放在内核的接口设计以及驱动框架本身。所以就花了一些时间把linux 2.6.10的系统环境搭建了出来，这里记录一下搭建过程。</p>
</blockquote>
<span id="more"></span>

<h1 id="Build-kernel"><a href="#Build-kernel" class="headerlink" title="Build kernel"></a>Build kernel</h1><p>由于linux 2.6.10是一个相当古老的内核版本，她是2004年release的，想要在2020年的系统中直接编译她是很难的，我们需要找一个与她release时间接近的发行版，这里我选择了ubuntu 5.04的Docker container，关于如何制作这样的Docker image，可以参考这篇文章：<a href="https://blog.colorfulshark.net/2020/08/23/transform-rootfs-to-docker-image.html">将rootfs转换成Dcoker image</a>。</p>
<h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libncurses-dev gcc make libc6-dev</span><br></pre></td></tr></table></figure>

<h2 id="配置kernel"><a href="#配置kernel" class="headerlink" title="配置kernel"></a>配置kernel</h2><p>由于我需要使用nfs挂载rootfs，所以需要需要保证kernel启动时能够正常配置网络。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make defconfig</span><br><span class="line">make menuconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置网卡驱动，qemu使用的网卡通常为E1000</span></span><br><span class="line">Intel(R) PRO/1000 Gigabit Ethernet support (E1000)</span><br><span class="line">Location:</span><br><span class="line"><span class="meta prompt_"> -&gt; </span><span class="language-bash">Device Drivers</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Networking support</span></span><br><span class="line"><span class="meta prompt_">   -&gt; </span><span class="language-bash">Network device support (NETDEVICES)</span></span><br><span class="line">    -&gt; Ethernet (1000 Mbit)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置IP PNP，NFS ROOT依赖此选项</span></span><br><span class="line">IP: kernel level autoconfiguration (IP_PNP)</span><br><span class="line">IP: DHCP support (IP_PNP_DHCP)</span><br><span class="line">IP: BOOTP support (IP_PNP_BOOTP)</span><br><span class="line">IP: RARP support (IP_PNP_RARP)</span><br><span class="line">Location:</span><br><span class="line"><span class="meta prompt_"> -&gt; </span><span class="language-bash">Device Drivers</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Networking support</span></span><br><span class="line"><span class="meta prompt_">   -&gt; </span><span class="language-bash">Networking support (NET)</span></span><br><span class="line">    -&gt; Networking options</span><br><span class="line">     -&gt; TCP/IP networking (INET)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置NFS ROOT</span></span><br><span class="line">Root file system on NFS (ROOT_NFS)</span><br><span class="line">Location:</span><br><span class="line"><span class="meta prompt_"> -&gt; </span><span class="language-bash">File systems</span></span><br><span class="line"><span class="meta prompt_">  -&gt; </span><span class="language-bash">Network File Systems</span></span><br></pre></td></tr></table></figure>

<h2 id="编译kernel"><a href="#编译kernel" class="headerlink" title="编译kernel"></a>编译kernel</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  SYSMAP  System.map</span><br><span class="line">  SYSMAP  .tmp_System.map</span><br><span class="line">  Building modules, stage 2.</span><br><span class="line">  MODPOST</span><br><span class="line">  AS      arch/x86_64/boot/setup.o</span><br><span class="line">  OBJCOPY arch/x86_64/boot/compressed/vmlinux.bin</span><br><span class="line">  LD      arch/x86_64/boot/setup</span><br><span class="line">  GZIP    arch/x86_64/boot/compressed/vmlinux.bin.gz</span><br><span class="line">  LD      arch/x86_64/boot/compressed/piggy.o</span><br><span class="line">  LD      arch/x86_64/boot/compressed/vmlinux</span><br><span class="line">  OBJCOPY arch/x86_64/boot/vmlinux.bin</span><br><span class="line">  BUILD   arch/x86_64/boot/bzImage</span><br><span class="line">Root device is (0, 60)</span><br><span class="line">Boot sector 512 bytes.</span><br><span class="line">Setup is 2444 bytes.</span><br><span class="line">System is 2141 kB</span><br><span class="line">Kernel: arch/x86_64/boot/bzImage is ready</span><br></pre></td></tr></table></figure>

<h1 id="Build-rootfs"><a href="#Build-rootfs" class="headerlink" title="Build rootfs"></a>Build rootfs</h1><p>构建rootfs的方式有很多种，比如busybox，buildroot，yocto等。由于本次的重点在于kernel，所以我们选择buildroot来快速构建一个rootfs。</p>
<h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>虽然kernel的系统调用接口是非常稳定的，但由于linux 2.6.10太老了，使用新版本的toolchain编译出的binary在她上执行可能会报“<strong>kernel too old</strong>”的错误，所以我们并不能直接使用最新的buildroot，经过实验，<a href="https://buildroot.org/downloads/buildroot-2014.11.tar.gz">buildroot-2014.11</a>是一个能够使用的版本。</p>
<h2 id="配置Buildroot"><a href="#配置Buildroot" class="headerlink" title="配置Buildroot"></a>配置Buildroot</h2><p>Buildroot自带一些config模板，因为我们使用的是qemu-x86-64的平台，因此只要执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make qemu_x86_64_defconfig</span><br></pre></td></tr></table></figure>

<p>因为我们并不需要Buildroot来编译内核，也不需要生成文件系统镜像，所以要基于此配置做一些修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消kernel编译</span></span><br><span class="line">Symbol: BR2_LINUX_KERNEL [=n]</span><br><span class="line">Type  : boolean</span><br><span class="line">Prompt: Linux Kernel</span><br><span class="line">  Location:</span><br><span class="line">    -&gt; Kernel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只打包tar包</span></span><br><span class="line">Symbol: BR2_TARGET_ROOTFS_TAR [=y]</span><br><span class="line">Type  : boolean</span><br><span class="line">Prompt: tar the root filesystem</span><br><span class="line">  Location:</span><br><span class="line">    -&gt; Filesystem images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置console</span></span><br><span class="line">Symbol: BR2_TARGET_GENERIC_GETTY_PORT [=console]</span><br><span class="line">Type  : string</span><br><span class="line">Prompt: TTY port</span><br><span class="line">  Location:</span><br><span class="line">    -&gt; System configuration</span><br><span class="line">      -&gt; Run a getty (login prompt) after boot (BR2_TARGET_GENERIC_GETTY [=y])</span><br><span class="line">        -&gt; getty options</span><br></pre></td></tr></table></figure>

<h2 id="编译Buildroot"><a href="#编译Buildroot" class="headerlink" title="编译Buildroot"></a>编译Buildroot</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>

<p>最后即可生成rootfs的tar包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">output/images/rootfs.tar</span><br></pre></td></tr></table></figure>

<h1 id="NFS-boot"><a href="#NFS-boot" class="headerlink" title="NFS boot"></a>NFS boot</h1><p>这里并不会直接使用命令行来启动qemu，而是使用virt-manager，ubuntu使用以下命令来安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install virt-manager</span><br></pre></td></tr></table></figure>

<p>NFS exports参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/exports/rootfs *(rw,no_root_squash,no_all_squash)</span><br></pre></td></tr></table></figure>

<p>使用的cmdline如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root=/dev/nfs nfsroot=192.168.1.1:/exports/rootfs,nfsvers=3 rw ip=dhcp console=ttyS0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>buildroot</tag>
        <tag>ldd3</tag>
      </tags>
  </entry>
  <entry>
    <title>shell脚本技巧</title>
    <url>/2021/04/27/shell-script-tips.html</url>
    <content><![CDATA[<p>实用shell脚本技巧。</p>
<span id="more"></span>

<ol>
<li><p><strong>bash下使用<code>echo</code>的时候<code>&#39;\n&#39;</code>不能换行？</strong></p>
<p>在shell脚本开头添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shopt -s xpg_echo</span><br></pre></td></tr></table></figure>
</li>
<li><p>shell script函数返回值</p>
<ul>
<li><p>使用全局变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function myfunc()</span><br><span class="line">&#123;</span><br><span class="line">    myresult=&#x27;some value&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myfunc</span><br><span class="line">echo $myresult</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用echo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function myfunc()</span><br><span class="line">&#123;</span><br><span class="line">    local  myresult=&#x27;some value&#x27;</span><br><span class="line">    echo &quot;$myresult&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result=$(myfunc)   # or result=`myfunc`</span><br><span class="line">echo $result</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用eval</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function myfunc()</span><br><span class="line">&#123;</span><br><span class="line">    local  __resultvar=$1</span><br><span class="line">    local  myresult=&#x27;some value&#x27;</span><br><span class="line">    eval $__resultvar=&quot;&#x27;$myresult&#x27;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myfunc result</span><br><span class="line">echo $result</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>分手后该不该做朋友</title>
    <url>/2021/04/02/should-we-keep-friendship-after-break-up.html</url>
    <content><![CDATA[<blockquote>
<p>Special meeting: Debates</p>
<p>情侣分手后能不能做朋友——不能做朋友</p>
</blockquote>
<span id="more"></span>

<p>传统心理学的观点认为爱情是由友爱与热爱组成。热爱是强烈的渴望，通常陪随着生理激起（呼吸急促、心跳加速，如堕入爱河）。而友爱，或者说友情是指人类或动物间的情谊或是指亲切的交谊、交情。友情是基于相互的了解、尊重和喜欢。存在友情的两人，互称朋友。</p>
<p>回到今天的辩题，分手后能不能做朋友。分手意味着两人都曾付出过真心，如果有一方抱着欺骗或者利用的心态，那不叫分手；而朋友意味着两人可以真诚相待，仅仅存在于微信好友列表那不叫朋友。</p>
<p>分手的原因大体可以分为：缺乏信任、冲突太多、不安全感等。纵观以上这几个原因，无论哪一个，都将导致我们不再信任对方，甚至厌恶对方，这直接打破了友情的基础——互相喜欢，互相不喜欢的两个人，即使再了解、再尊重，也不可能成为我们的朋友。</p>
<p>因此，我方认为，情侣分手之后，不能做朋友。</p>
<p>我将主要从以下三个方面来阐述：</p>
<p>第一，曾经的诺言变成谎言。试想，两个曾经互相倾心，互相仰慕，互相海誓山盟要共度此生的人分开之后，他们要如何面对这些难以承受的诺言。真诚是友情的基石，我们想要交朋友，是因为在这个复杂多变的世界，我们想要有一个人，可以毫无顾忌的倾诉。而面对一个曾经说过谎的人，你真的能够放下所有的防备，放下所有的戒心，去展露你最脆弱的一面吗？这是很难做到的。当我们向这样的人去分享自己心中的秘密时，我们会不会担心：这个人靠谱吗，他会不会把我的秘密说出去，他说的话真的可信吗？这些猜忌，不仅会毁了友情，也会给自己增添无意义的精神压力。本来我们跟朋友交流是为了获得愉悦，结果反而更加烦恼，这好吗，这不好。</p>
<p>第二，让自己处于进退两难的境地。分手后做朋友，可以说提出这个想法的人肯定是有私心的。两个相爱过的人分手后，无论是哪一方，都不会很好受，在这种强烈的负面情绪的刺激下，就会想出“我们继续做朋友”这种主意，但这是非理性的决定。两个人会走到分手这一步，说明互相有一些完全不可接受和忍让的点，但是处于分手痛苦中的人通常会忘记这些，而只是想着快乐的记忆，造成一种我们还能继续的错觉。但实际上真的重新相处后，又会重新面对这些问题，再次分手。这种死循环既浪费时间，也浪费精力，更浪费金钱。</p>
<p>第三，可能会给自己的爱情带来危险。我想，没有几个人会希望自己的另一半对前任念念不忘，爱情是自私的，我们都希望自己是对方的唯一。但是如果自己经常跟前任出去逛街，吃饭，看电影，做一切朋友之间都会做的事情，你的另一半会如何想？你们真的只是单纯的朋友关系吗？你们会不会死灰复燃？这些想法挥之不去，直到你的另一半崩溃，然后吵架，最后你的现任也变成了前任，你会暗自庆幸自己又多了一个朋友吗？</p>
<p>综上，我方认为，情侣分手后不能做朋友，那是一种非常不理性且危险的行为。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
        <tag>debates</tag>
      </tags>
  </entry>
  <entry>
    <title>通过trace-cmd和kernelshark简化Ftrace的使用</title>
    <url>/2019/12/21/simplify-ftrace-with-tracecmd-and-kernelshark.html</url>
    <content><![CDATA[<blockquote>
<p>虽然Ftrace在debugfs中的接口很简单，但在实际操作时，还是显得不太灵活。如果能让一个应用程序代替我们与Ftrace的接口交互，将会大大简化其使用，而这个程序就是trace-cmd。此外，为了能够更加直观的分析过滤Ftrace的log，将会介绍一个基于GUI的工具kernelshark。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="从软件源安装"><a href="#从软件源安装" class="headerlink" title="从软件源安装"></a>从软件源安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install trace-cmd kernelshark</span><br></pre></td></tr></table></figure>

<h2 id="从源码安装"><a href="#从源码安装" class="headerlink" title="从源码安装"></a>从源码安装</h2><ol>
<li><p>安装依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential git cmake libjson-c-dev -y</span><br><span class="line">sudo apt-get install freeglut3-dev libxmu-dev libxi-dev -y</span><br><span class="line">sudo apt-get install qtbase5-dev -y</span><br><span class="line">sudo apt-get install graphviz doxygen-gui -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>克隆源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://git.kernel.org/pub/scm/linux/kernel/git/rostedt/trace-cmd.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd trace-cmd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">compile trace-cmd</span></span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install trace-cmd</span></span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">compile kernelshark</span></span><br><span class="line">make gui</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install kernelshark</span></span><br><span class="line">make install_gui</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>下面是一个简单的例子:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo trace-cmd record -e ext4 ls</span><br><span class="line">sudo trace-cmd report</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CPU 0 is empty</span><br><span class="line">CPU 1 is empty</span><br><span class="line">CPU 2 is empty</span><br><span class="line">CPU 3 is empty</span><br><span class="line">CPU 4 is empty</span><br><span class="line">CPU 6 is empty</span><br><span class="line">CPU 7 is empty</span><br><span class="line">cpus=8</span><br><span class="line">              ls-8018  [005] 1233847.755818: ext4_es_lookup_extent_enter: dev 252,1 ino 28442625 lblk 0</span><br><span class="line">              ls-8018  [005] 1233847.755834: ext4_es_lookup_extent_exit: dev 252,1 ino 28442625 found 1 [0/1) 113778720 W</span><br><span class="line">              ls-8018  [005] 1233847.755859: ext4_journal_start:   dev 252,1 blocks, 2 rsv_blocks, 0 caller ext4_dirty_inode</span><br><span class="line">              ls-8018  [005] 1233847.755861: ext4_mark_inode_dirty: dev 252,1 ino 28442625 caller ext4_dirty_inode</span><br></pre></td></tr></table></figure>

<p>第一条命令记录了<code>ls</code>命令在执行时，<code>ext4</code>子系统中所有tracepoint的输出。输出结果保存在文件<code>trace.dat</code>中，可以分别对<code>record</code>和<code>report</code>使用<code>-o</code>和<code>-i</code>来设置输出和输入的文件名。</p>
<p>第二条命令解析<code>trace.dat</code>中的内容并打印到标准输出。可以看到CPU的数量以及哪些CPU的buffer为空，最下面则是记录的log，其格式与function tracer相同。</p>
<p>当开始记录时，<code>trace-cmd</code>会为每一个CPU创建一个进程，每个进程打开对应CPU的buffer文件并记录到单独的文件中，比如CPU0的buffer映射到<code>/sys/kernel/debug/tracing/per_cpu/cpu0/trace_pipe_raw</code>，其数据会被记录到<code>trace.dat.cpu0</code>。当结束记录时，这些文件会被合并到一个文件中，比如<code>trace.dat</code>。</p>
<p>使用<code>trace-cmd</code>不需要手动挂载debugfs，它会自动挂载debugfs并寻找其挂载路径。</p>
<h1 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h1><h2 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h2><p><code>record</code>的参数实际上对应了Ftrace在debugfs中的接口。</p>
<ul>
<li><p><code>-e</code>表示跟踪一个event，可以使用event名，子系统名，如果要跟踪多个event，可以多次使用该选项，或者<code>all</code>用来监控所有的event。可以使用<code>sudo trace-cmd list -e</code>来查看当前系统中有哪些支持跟踪的event。</p>
</li>
<li><p><code>-f</code>表示对一个event中的某些域（field）进行过滤，只对其之前<code>-e</code>设置的event生效，因此一般紧跟在<code>-e</code>之后。要查看一个event有哪些域可以进行过滤，可以查看<code>/sys/kernel/debug/tracing/events/&lt;subsystem&gt;/&lt;event&gt;/format</code>，其中subsystem和event可以通过<code>sudo trace-cmd list -e</code>来获得。</p>
</li>
<li><p><code>-p</code>表示使用一个plugin，实际上就是Ftrace中的tracer，可以使用<code>sudo trace-cmd list -t</code>查看当前系统支持哪些tracer。同一时刻只能使用一种plugin。</p>
</li>
<li><p><code>-l</code>表示后面跟上函数名，表示只跟踪这个函数；<code>-n</code>后面跟上函数名，表示不跟踪这个函数，这两个选项均可多次使用来设置多个函数。可以通过<code>sudo trace-cmd list -f</code>查看哪些函数可以进行过滤。注意，函数过滤仅在使用<code>function</code>和<code>function_graph</code>这两个plugin时有效。</p>
</li>
<li><p><code>-M</code>表示CPU掩码，使用16进制表示，每一位表示一个CPU，例如4(16) &#x3D; 100(2)，因此只有CPU2的数据会被记录。</p>
</li>
</ul>
<p>下面是一些例子：</p>
<ul>
<li><p>跟踪内核中中断的执行时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo trace-cmd record -p function_graph -l do_IRQ -e irq_handler_entry sleep 1</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CPU 1 is empty</span><br><span class="line">CPU 2 is empty</span><br><span class="line">CPU 3 is empty</span><br><span class="line">CPU 5 is empty</span><br><span class="line">CPU 6 is empty</span><br><span class="line">CPU 7 is empty</span><br><span class="line">cpus=8</span><br><span class="line">          &lt;idle&gt;-0     [000] 1251617.972283: funcgraph_entry:                   |  do_IRQ() &#123;</span><br><span class="line">          &lt;idle&gt;-0     [000] 1251617.972302: irq_handler_entry:    irq=10 name=virtio0</span><br><span class="line">          &lt;idle&gt;-0     [000] 1251617.972359: funcgraph_exit:       + 77.853 us  |  &#125;</span><br><span class="line">          &lt;idle&gt;-0     [004] 1251618.092777: funcgraph_entry:                   |  do_IRQ() &#123;</span><br><span class="line">          &lt;idle&gt;-0     [004] 1251618.092792: irq_handler_entry:    irq=15 name=ata_piix</span><br><span class="line">          &lt;idle&gt;-0     [004] 1251618.092892: funcgraph_exit:       ! 116.705 us |  &#125;</span><br><span class="line">          &lt;idle&gt;-0     [004] 1251618.092907: funcgraph_entry:                   |  do_IRQ() &#123;</span><br><span class="line">          &lt;idle&gt;-0     [004] 1251618.092908: irq_handler_entry:    irq=15 name=ata_piix</span><br><span class="line">          &lt;idle&gt;-0     [004] 1251618.092954: funcgraph_exit:       + 47.463 us  |  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过bytes_req域过滤kmalloc_node event</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">trace-cmd record -e kmalloc_node -f &#x27;bytes_req &gt; 1000&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name: kmalloc_node</span><br><span class="line">ID: 515</span><br><span class="line">format:</span><br><span class="line">        field:unsigned short common_type;       offset:0;       size:2; signed:0;</span><br><span class="line">        field:unsigned char common_flags;       offset:2;       size:1; signed:0;</span><br><span class="line">        field:unsigned char common_preempt_count;       offset:3;       size:1; signed:0;</span><br><span class="line">        field:int common_pid;   offset:4;       size:4; signed:1;</span><br><span class="line"></span><br><span class="line">        field:unsigned long call_site;  offset:8;       size:8; signed:0;</span><br><span class="line">        field:const void * ptr; offset:16;      size:8; signed:0;</span><br><span class="line">        field:size_t bytes_req; offset:24;      size:8; signed:0;</span><br><span class="line">        field:size_t bytes_alloc;       offset:32;      size:8; signed:0;</span><br><span class="line">        field:gfp_t gfp_flags;  offset:40;      size:4; signed:0;</span><br><span class="line">        field:int node; offset:44;      size:4; signed:1;</span><br><span class="line">    [...]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="通过网络传输"><a href="#通过网络传输" class="headerlink" title="通过网络传输"></a>通过网络传输</h2><p>对于一些存储空间非常有限，或者存储器速度较慢的设备，可以通过网络将<code>trace.dat</code>保存到其它设备中。</p>
<ul>
<li><p>host</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">trace-cmd listen -p 12345 -D -d /images/tracing/ -l /images/tracing/logfile</span><br></pre></td></tr></table></figure>

<p><code>-p</code>：端口</p>
<p><code>-D</code>：daemon模式</p>
<p><code>-d</code>：trace文件保存的位置</p>
<p><code>-l</code>：log文件保存的位置</p>
</li>
<li><p>client</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">trace-cmd record -N 192.168.1.100:12345 -e ext4 ls</span><br></pre></td></tr></table></figure>

<p><code>-N</code>：IP地址和端口号</p>
</li>
</ul>
<h1 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h1><p>此时，我们已经拿到了trace.dat，现在需要对其进行分析。因为其中可能包含海量的数据，所以仍然需要过滤。</p>
<h2 id="trace-cmd"><a href="#trace-cmd" class="headerlink" title="trace-cmd"></a>trace-cmd</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">trace-cmd report</span><br></pre></td></tr></table></figure>

<p><code>trace-cmd</code>本身提供了非常灵活且强大的过滤功能，但是使用起来也非常繁琐，尤其是当处理大量数据时，因此，这里不对其进行详细介绍，有需要可以通过<code>man trace-cmd-report</code>了解其详细用法。</p>
<h2 id="kernelshark"><a href="#kernelshark" class="headerlink" title="kernelshark"></a>kernelshark</h2><p>kernelshark是一个用来查看<code>trace.dat</code>的GUI程序，完整的文档请访问<a href="https://kernelshark.org/Documentation.html">KernelShark</a>。</p>
<img src="/2019/12/21/simplify-ftrace-with-tracecmd-and-kernelshark/kernelshark.jpg" class="">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上是对Ftrace的两个前端工具——trace-cmd和kernelshark的简单介绍，通过这两个工具，可以更加容易的使用Ftrace接口，从而更加高效的调试、优化内核。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://lwn.net/Articles/410200/">trace-cmd: A front-end for Ftrace</a></p>
<p><a href="https://lwn.net/Articles/425583/">Using KernelShark to analyze the real-time scheduler</a></p>
<p><a href="https://kernelshark.org/">KernelShark</a></p>
]]></content>
      <categories>
        <category>Kernel</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>debug</tag>
        <tag>ftrace</tag>
        <tag>trace-cmd</tag>
        <tag>kernelshark</tag>
      </tags>
  </entry>
  <entry>
    <title>软件收集</title>
    <url>/2021/07/03/software-collection.html</url>
    <content><![CDATA[<blockquote>
<p>本文用来记录曾经使用过的软件。</p>
</blockquote>
<span id="more"></span>

<h1 id="软件站点"><a href="#软件站点" class="headerlink" title="软件站点"></a>软件站点</h1><p><a href="https://www.isharepc.com/">乐软博客</a></p>
<h1 id="软件资源"><a href="#软件资源" class="headerlink" title="软件资源"></a>软件资源</h1><h2 id="Matlab"><a href="#Matlab" class="headerlink" title="Matlab"></a>Matlab</h2><p><a href="https://www.isharepc.com/14196.html">MathWorks MATLAB R2021a中文破解版</a></p>
<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><a href="https://www.diagrams.net/">Diagrams</a></p>
<h2 id="视频编辑"><a href="#视频编辑" class="headerlink" title="视频编辑"></a>视频编辑</h2><p><a href="http://fixounet.free.fr/avidemux/">Avidemux</a></p>
<h2 id="Xserver"><a href="#Xserver" class="headerlink" title="Xserver"></a>Xserver</h2><p><a href="https://sourceforge.net/projects/vcxsrv/files/vcxsrv/">Vcxsrv</a></p>
<h2 id="PXE"><a href="#PXE" class="headerlink" title="PXE"></a>PXE</h2><p><a href="https://ipxe.org/">iPXE</a></p>
<h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><p><a href="https://godbolt.org/">Compiler Explore</a></p>
]]></content>
      <categories>
        <category>Resources</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Survive in the Debate</title>
    <url>/2021/10/20/survive-in-the-debate.html</url>
    <content><![CDATA[<blockquote>
<p>Pathways: Dynamic Leadership</p>
<p>Level 2-2: Understanding Your Communication Style</p>
</blockquote>
<span id="more"></span>

<h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><p>Survive in the debate, after reading this title, you may guess I will introduce some magic debate skills to you, right? Well, please let me share a small story to you first, then you may understand what I’m going to talk about.</p>
<p>It’s a sunshiny morning at about one year ago. I was having a voice call with my girl friend. In the phone, she said: today I got up very early and wiped the floor. I responded: wow, it must be pretty tired to squat and wipe. “No, I used a mop”, she said. “But if you use a mop, it should be mopping rather than wiping the floor”, I queried her. Then she said:”But all of us call that wiping, nobody says mopping”. I debated:”It seems only you use wiping, in my family, we always use mopping”. “Then what, I just use wiping”, she’s a little angry. But I still wanted to persuade her, “it’s wired using wiping, you should use mopping”. Then, she ended the call.</p>
<p>I didn’t understand why she got angry, because at that time, I was a kind of debate elf in the real life. I always tried my best to stand for my point, during the lunch with my colleague, during the evening with my family, or even in the comments of a microblog. I debated with these people and I enjoined it, because on most of time I wo . Maybe these people just didn’t want to argue with me.</p>
<p>At the end, my girl friend left me after a quarrel, I can’t even remember what we were arguing for. Then I got into a heart broken period.</p>
<p>Occasionally, I found a interesting view in a book, It said: The only way to win in a debate is avoiding debate. Because our life is not a debate contest, most of us are just normal people, thus we may have some weakness in our mind. And one of them is that it’s nearly impossible to change one’s mind unless he would like to. If we debate with a person, we are challenging his knowledge and dignity, then he will get into fight mode, and stands for his point from start to the end, even if you are right.</p>
<p>I was little curious if this theory would work for me, because it seemed I didn’t have many friends and good relationship with my family, so I start trying to change my communication style, to be more gentle and approachable, to see what will happen. In the later days, when I had conversation with colleague, even if I knew someone was wrong, I would not point out directly if it’s not that important. While talking with my parents, I just listened and answered their questions, without debating for small things. I suddenly realized, when I was a child, I must made lots of small mistakes, but my parents seemed never arguing with me. Now, they are getting old and some knowledge is out of date, I should do the same thing to them.</p>
<p>Now I’m perceived as patient, amiable and supportive by my friends. My parents like to share their story with me,  and even my girl friend said that I am changing a lot, to the good way.</p>
<p>Just like the book said: If you argue and debate, you may gain the victory for temporary, but that is short and useless, and you will never earn other’s favor. We are in a society and have connection with others. Sometimes, it may change everything if we let our customer, lover, husband or wife win us in a small debate.</p>
<h1 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h1><img src="/2021/10/20/survive-in-the-debate/evaluation.jpeg" class="">

<h1 id="Photos"><a href="#Photos" class="headerlink" title="Photos"></a>Photos</h1><img src="/2021/10/20/survive-in-the-debate/joy.jpeg" class="">

<img src="/2021/10/20/survive-in-the-debate/jun.jpeg" class="">

<img src="/2021/10/20/survive-in-the-debate/sherry.jpeg" class="">

<img src="/2021/10/20/survive-in-the-debate/ryan.jpeg" class="">

<img src="/2021/10/20/survive-in-the-debate/together.jpeg" class="">
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
        <tag>speech</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Windows注册表交换Ctrl和Caps按键</title>
    <url>/2019/11/09/swap-ctrl-and-caps-under-windows.html</url>
    <content><![CDATA[<blockquote>
<p>在使用键盘的时候，经常会用到Ctrl来触发各种快捷键，但每次使用Ctrl，手都需要大幅度扭曲，非常不舒服，反观Caps这个按键，不仅位置舒适，而且按键更大，但却常年得不到有效利用。目前市面上已经有一些键盘另辟蹊径，把Ctrl和Caps进行交换来获得更好的打字体验，但这通常需要特殊的固件或者驱动才能实现。实际上，在Windows下可以通过修改注册表来重新映射按键，从而让普通键盘也能做到这一点。</p>
</blockquote>
<span id="more"></span>

<h1 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h1><ol>
<li><p>Win+R，输入regedit，打开注册表编辑器</p>
<img src="/2019/11/09/swap-ctrl-and-caps-under-windows/open-regedit.jpg" class="" title="open-regedit.jpg">
</li>
<li><p>按照以下路径找到<strong>Keyboard Layout</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout</span><br></pre></td></tr></table></figure>
</li>
<li><p>右键<strong>Keyboard Layout</strong>，选择新建<strong>二进制值</strong>，并将新建的值重命名为<strong>Scancode Map</strong></p>
<img src="/2019/11/09/swap-ctrl-and-caps-under-windows/create-new-value.jpg" class="" title="create-new-value.jpg">
</li>
<li><p>右键<strong>Scancode Map</strong>，选择修改，然后输入以下数值，<strong>注意，数值不能复制，必须手动输入</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">03 00 00 00 1D 00 3A 00</span><br><span class="line">3A 00 1D 00 00 00 00 00</span><br></pre></td></tr></table></figure>

<p>输入完成后的效果如下</p>
<img src="/2019/11/09/swap-ctrl-and-caps-under-windows/input-value.jpg" class="" title="input-value.jpg">
</li>
<li><p>重启电脑即可生效</p>
</li>
</ol>
<h1 id="自动修改"><a href="#自动修改" class="headerlink" title="自动修改"></a>自动修改</h1><p>将以下代码保存为<strong>swap-ctrl-caps.reg</strong>，双击运行即可直接导入数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]</span><br><span class="line">&quot;Scancode Map&quot;=hex:00,00,00,00,00,00,00,00,03,00,00,00,3a,00,1d,00,1d,00,3a,00,\</span><br><span class="line">  00,00,00,00</span><br></pre></td></tr></table></figure>

<h1 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h1><p>将<strong>Scancode Map</strong>删除，重启即可恢复。</p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>The Goose that Lays Golden Eggs</title>
    <url>/2021/03/14/the-goose-that-lays-golden-eggs.html</url>
    <content><![CDATA[<blockquote>
<p>Pathways: Dynamic Leadership</p>
<p>Level 1-2: Evaluation and Feedback</p>
</blockquote>
<span id="more"></span>

<p>You may be curious about this title, but please let me share a story with you first.</p>
<p>There was once a Countryman who possessed the most wonderful Goose you can imagine, for every day when he visited the nest, the Goose had laid a beautiful, glittering, golden egg. The Countryman took the eggs to market and soon began to get rich. But it was not long before he grew impatient with the Goose because she gave him only a single golden egg a day. He was not getting rich fast enough. Then one day, after he had finished counting his money, the idea came to him that he could get all the golden eggs at once by killing the Goose and cutting it open. But when the deed was done, not a single golden egg did he find, and his precious Goose was dead.</p>
<p>In the real life, the goose means our money, while the golden egg is the money made by our money, which means the interest.</p>
<p>The story revealed the most usual scenario in our daily life: We save money and we gain interest.</p>
<p>And this is the topic I would like to share: Saving money.</p>
<p>Why should we save money? (Ask audiences)</p>
<p>About this, my point is: Saving is for making. By saving money, the interest we get could even cover our daily cost, which sounds too good to be true and seems to decades of years, or does it?</p>
<p>The magic key is the compound interest. In one word, compound interest means that the interest can also make interest. There is a principle named “Rule of 72”, let’s do the math about it. Suppose I have 100 yuan, and the annual interest rate is 8%, then we use 72 divide 8 and get 9, it means I will have 200 yuan after 9 years, the money becomes double. Under the effect of compound interest, the assets will grow in a much faster speed than we can imagine.</p>
<p>Now we know why we should save money, but do you know how to save money? In the past, after I got salary, I just left it in the bank account, and used it whenever I would like to buy something. You know I am a computer fans, thus I often upgraded my computer by buying some hardware, such as memory, hard drive and monitor. And in the end of year, I always found I didn’t have much money saved, not even think about the interest. Where did my money go? Actually, My goose was killed by the wrong method of saving money. Is there existing a better way of saving money? Let’s think about the following solution.</p>
<p>I separate my income into three parts:</p>
<ol>
<li>The first part is for daily life, such as food and traffic.</li>
<li>The second part is for my dreams, such as new phone or traveling. Once the account becomes ready, I will use it to achieve one of my dream.</li>
<li>The last part is for making interest, and that is my goose account. I will never take out the money from my goose account. As the goose grows up, the interest made by it will increase as well.</li>
</ol>
<p>By following this approach, my daily life is covered well, and my dream will come true one by one. The most important thing is that I have a goose that will lay golden eggs for me all the time, and I will never kill it.</p>
<p>I believe the financial intelligence will also be the crucial ability in 21 century. As there are too much things we want, if the desire is not handled properly, we may get trapped in financial problem.</p>
<p>It’s a good way to start leaning financial knowledge by saving money. Raise a goose of ourselves and watch it growing up, the interest will be the power we move on. And in the journey, the dreams in the list will also come true, with a healthy finance status and a better life.</p>
]]></content>
      <categories>
        <category>Wealth</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
        <tag>speech</tag>
      </tags>
  </entry>
  <entry>
    <title>The Person Upholding My Mind</title>
    <url>/2022/01/12/the-person-uphold-my-mind.html</url>
    <content><![CDATA[<blockquote>
<p>Pathways: Dynamic Leadership</p>
<p>Level 2-3: Introduction to Toastmasters Mentoring</p>
</blockquote>
<span id="more"></span>

<!-- more -->

<p>Why do you join Toastmaster? Maybe you have heard of this question for many times. But here’s another question: Why do you stay in the club? Maybe you want to make friends, or learn new speak skills, for me, I may have a kind different answer.</p>
<p>I still remember the first time when I joined the meeting. I had totally no idea about what you guys were doing. Suddenly someone asked me: Ryan, please introduce yourself. I had to say, this is the first time in my life I delivered a self introduction in English. Even though that’s a online meeting, I was just too nerverous to speak, countless Ahs just slid out of my mouth. But what amazed me is that no one laughed at me. This is the moment I decided to join. After I joined the club, Jun Ge contacted me soon and said: Hey Ryan, you can choose a person in club as your mentor.</p>
<p>Emm… But what is mentor? I asked. Well, it’s just an experienced club member, who can help you if you need help. Oh, I knew it, just like a new staff in company, someone would help him in work. But then another question came to my mind, who should I choose? At that moment, I totally didn’t understand what is toastmaster, table topic master or evalutor. Suddenly, a word arose in my mind: President, Emm… yes, as a president, she must be the most experienced person in club. And her name is… Well, I forgot it, I browsed the agenda, then, Sherry became my mentor. Even though we haven’t talked with each other, it seems I have already gained a lot confidence because I believe someone good will help me.</p>
<p>My first role play is Ah-counter, when I was worrying how to do that, Sherry contacted me and gave me some links about Ah-counter, it’s just too good to be true, then I started to exploring those documents and prepared my role. After the meeting, she contacted me again and sent me 4 sections of wechat voice to congratulate my performance, it’s so encourage and sincere, which made it the moment I’d like to stay.</p>
<p>Well you can see, today’s topic is mentor. In toastmasters, we all have mentors. Someone regard mentors as a coach, actually, it’s not exactly the same. Compared to teaching stuff hand by hand, I think there is a much magical capability of a mentor, and that’s the title of my speech: Upholding your mind. Think about it, when we are in trouble, if someone just gives us a task list, like step1, step2, step3… Well, that’s good. But if someone helps us analyze the problem, leads our mind and let us figure out the solution by ourselves, that woud be fantantic. And if there’s any encourage after we finish the task, like “good job Ryan”, I would call it the “perfect” experience.</p>
<p>If friendly environment is the key point of attracting new member in toastmaster, then mentor must be an important key of keeping old guys. Maybe after the meeting, you can contact with your mentor for your problem as he will always be the guy who can upholds your mind.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Toastmaster</tag>
        <tag>Speech</tag>
      </tags>
  </entry>
  <entry>
    <title>Toastmaster常规会议(2021-05-07)</title>
    <url>/2021/05/06/toastmaster-regular-meeting-aatmc-20210507.html</url>
    <content><![CDATA[<blockquote>
<p>I am toastmaster and table topic master.</p>
</blockquote>
<span id="more"></span>

<h1 id="Toastmaster"><a href="#Toastmaster" class="headerlink" title="Toastmaster"></a>Toastmaster</h1><p>Dear toastmasters, I’m Ryan, toastmaster of today’s meeting. After 5 days holiday we get together again, you may be tired or still be excited about your journey, we will talk about that later, but don’t forget an important thing, it’s workday on Saturday.</p>
<p>Before we start the meeting, please keep your mobile phone in silent mode and there are 4 forbidden topics we should not talk about, they are religion, race, politics and sex.</p>
<p>Next please let me introduce the treasure part of our club: Evalution team. First is our timer Sherry, next is Grammarian Christina, the last is Ah-counter Lisa.</p>
<p>Today our theme is “Journey on Internal Labour Day”. It’s the holiday for workers, you and me. </p>
<p>First I would like to know how many of you people went outside of home and visited somewhere, please raise your hand.</p>
<p>For me, I have gone through 27 Labour Days, but this one is special, because for the first time I decided to went out of home to have a trip, though it’s a short trip. Do you know what changed my mind? Of course my girlfriend.</p>
<p>Now let’s step into Table topic section.</p>
<p>About one month before the holiday, she asked me: I want to go to Mount Tai on holiday, you, make a plan. In less than 0.01 seconds, I have imagined a picture, we are pushed and squeezed in the flow of people, the hotel is pretty expensive and we can not even rent a clothes on the top of Mount Tai, shaking in the cold dark night. So I decided to respond her: OK, no problem.</p>
<p>Then I started making the plan, I searched other’s strategy on the internet, figured out when to buy train tickets, where to order the hotel, and the path we would take to climb the mountain. Final, I had everything done except the train ticket, and this is the most crazy part. I pressed the order button by counting the seconds, but I didn’t even see 1 tickets. I could only buy the candidate ticket. Well, we waited for it until 28, April, then we gave up.</p>
<p>Then I proposed staying at Beijing, I quickly chose 3 places, Luohong Photography Exhibition, CCTV Tower and Hongluo Temple. And we went to study at last two days. It’s tired but fun, we enjoyed the amazing photo, the delicious food and the beautiful scenery.</p>
<h1 id="Table-topic-master"><a href="#Table-topic-master" class="headerlink" title="Table topic master"></a>Table topic master</h1><p>Topic: <strong>Journey on International Labour day</strong></p>
<p>For the people who took the journey:</p>
<ol>
<li>The most impressive thing in your journey?</li>
<li>Do you feel satisfied with your journey and why?</li>
<li>What do you think about the person who just stayed at home in such a long holiday?</li>
</ol>
<p>For the people who didn’t take the journey:</p>
<ol>
<li>If there any reason that stops you from travelling?</li>
<li>If you can do time travelling and go back to the start of holiday, will you decide to go somewhere?</li>
<li>What do you think about the person who go travelling despite the crowded people and expensive hotel?</li>
</ol>
<p>Common problem:</p>
<ol>
<li>Travelling alone or travelling with someone, which one do you prefer?</li>
<li>Though we have continuous 5 days holiday, but actually 2 of them are exchanged from weekends, do you like this approach?</li>
</ol>
<img src="/2021/05/06/toastmaster-regular-meeting-aatmc-20210507/1.jpg" class="" title="1.jpg">

<img src="/2021/05/06/toastmaster-regular-meeting-aatmc-20210507/2.jpg" class="" title="2.jpg">

<img src="/2021/05/06/toastmaster-regular-meeting-aatmc-20210507/3.jpg" class="" title="3.jpg">

<img src="/2021/05/06/toastmaster-regular-meeting-aatmc-20210507/4.jpg" class="" title="4.jpg">

<img src="/2021/05/06/toastmaster-regular-meeting-aatmc-20210507/5.jpg" class="" title="5.jpg">

<img src="/2021/05/06/toastmaster-regular-meeting-aatmc-20210507/6.jpg" class="" title="6.jpg">]]></content>
      <categories>
        <category>Toastmaster</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Toastmaster Regular Meeting</title>
    <url>/2021/07/03/toastmaster-regular-meeting-aatmc-20210702.html</url>
    <content><![CDATA[<blockquote>
<p>Date: 2021-07-02 12:00 - 13:30</p>
<p>Site: Novo Nordisk, Wangjing, Beijing</p>
<p>Role: Table Topic Evaluator</p>
</blockquote>
<span id="more"></span>

<p>本以为又是一次没有多少人的普通会议，没想到来了这么多新老会员，连guest都有三位。</p>
<p>Sherry，Jane，Alex不远万里打车从Sony赶到NN分部（bushi），Jun哥也Order了一个大会议室，现场配有完善的远程连线设备，Nan哥与guest小佛在线参加。</p>
<img src="/2021/07/03/toastmaster-regular-meeting-aatmc-20210702/nan_in_tv.jpg" class="">

<p>会议的主题是“Plastic Surrgery”，整容。似乎在场的女生都有很多故事可以分享。为什么要整容，如何看待整容，大家各抒己见。Jane觉得“We can use but not overuse it”，Nicole则相信“It can change destiny”，更多的人则认为“We should pay more attention to our inner building”。不过确实有很多人，通过整容获得了更多自信。</p>
<p>由于只有一个Speaker，Table Topic延长了10分钟，给作为Evalutor的我造成了很大挑战。不过更大的压力似乎也促使自己提高注意力，在记录的同时还能听清Speaker所讲的内容。结果最后响铃了也没有report完（还差一个guest）。</p>
<img src="/2021/07/03/toastmaster-regular-meeting-aatmc-20210702/tte.jpg" class="">

<p>接下来的Prepared Speech，Nicole表现的非常出色，个人觉得俱乐部中的女生的英语水平比男生高了不止一倍。她绘声绘色地通过两个故事描述为什么要重新回到Toastermasters，整个演讲错落有致，节奏恰到好处，最后用5、2、1三个数字点题，同时表达了对俱乐部的热爱，可谓是点睛之笔。</p>
<img src="/2021/07/03/toastmaster-regular-meeting-aatmc-20210702/nicole.jpg" class="">

<p>Roxanne的到场也是一个小惊喜，作为俱乐部中最年轻的成员，英语水平一流，作为本次会议的General Evalutor，她详尽地点评了本场会议，没有停顿，没有重复，干货满满。</p>
<p>她给我的建议则是：作为TTE，应该更关注Speaker的performance，logical，而不是content。</p>
<img src="/2021/07/03/toastmaster-regular-meeting-aatmc-20210702/roxanne.jpg" class="">

<p>表情管理大失败~~~</p>
<img src="/2021/07/03/toastmaster-regular-meeting-aatmc-20210702/ryan.jpg" class="">

<p>本场会议无论是阵容还是内容都属于高水准，最后作为三月续费的会员，还送了一个主题菜篮。</p>
<img src="/2021/07/03/toastmaster-regular-meeting-aatmc-20210702/all.jpg" class="">

<img src="/2021/07/03/toastmaster-regular-meeting-aatmc-20210702/gift.jpg" class="">
]]></content>
      <categories>
        <category>Toastmaster</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Toastmaster Regular Meeting</title>
    <url>/2021/07/08/toastmaster-regular-meeting-aatmc-20210709.html</url>
    <content><![CDATA[<blockquote>
<p>Date: 2021-07-09 12:00 - 13:30</p>
<p>Site: Novo Nordisk, Wangjing, Beijing</p>
<p>Role: Table Topic Master</p>
</blockquote>
<span id="more"></span>

<p>这是一场小而精致的会议，所有的Function Role，Prepared Speech一应俱全，Alex作为Toastmaster，稳控全场，每一个转场都自然流畅，恰倒好处。当然还有Online的Jane。</p>
<img src="/2021/07/08/toastmaster-regular-meeting-aatmc-20210709/jane.jpg" class="">

<img src="/2021/07/08/toastmaster-regular-meeting-aatmc-20210709/alex.jpg" class="">

<p>我们还为新会员Annie和Nicole举办了入会仪式，有趣的是，她们都是曾经的Toastmasters会员，都由于一些特殊原因离开，待生活稳定之后，又出于对提高自己的渴求，重新加入Toastmasters这个大家庭。看来Toastmasters真的是会让人上瘾。</p>
<img src="/2021/07/08/toastmaster-regular-meeting-aatmc-20210709/new_member.jpg" class="">

<p>接下来就是我的主场，Table Topic环节，虽然我非常喜欢这个Role，但是由于准备的确实不充分（前一天晚上才想好开场词），整个开场磕磕绊绊。好在主题比较有趣，“Owe A Favor”，欠人情。大家也讨论的颇为尽兴。Christina的论点我很赞同：大多数时候，我们都不需要担心“Owe A Favor”，因为当你“Return it back”的时候，The relationship will be enhanced。</p>
<img src="/2021/07/08/toastmaster-regular-meeting-aatmc-20210709/ttm.jpg" class="">

<p>Christina的演讲绝对是本次会议的亮点，她非常专业流畅地向我们职场人传授“How to manage your boos”。第一，准确理解老板的意图；第二，向老板申请资源；第三，向老板寻求反馈。这三步是依次递进的，最终能使你出色地完成工作。</p>
<img src="/2021/07/08/toastmaster-regular-meeting-aatmc-20210709/christina.jpg" class="">

<p>最后，我居然还获得了最佳Function Role地奖状，有点不好意思，下次我一定认真准备。</p>
<img src="/2021/07/08/toastmaster-regular-meeting-aatmc-20210709/best_fun_role.jpg" class="">

<h1 id="Table-Topic-Master"><a href="#Table-Topic-Master" class="headerlink" title="Table Topic Master"></a>Table Topic Master</h1><p>Good afternoon, I’m Ryan, table topic master of today’s meeting. During this section, I will share my stories and thoughts related to today’s topic. And you will have the chance standing on the stage, sharing your mind. No further ado, let’s start.</p>
<p>You may have noticed, today our topic is Owe A Favor (欠人情). I believe it’s quite an usual phenomenon for Chinese because we used to put a high value on the relationship with other people.</p>
<p>We will owe a favor to someone under plenty of situation, the most common one could be that you obtain some help from people. And after that, you may start to think about how to return it back. By aSSffording for a meal, or giving a present, you will have your own way.</p>
<p>But what if you owe a favor to someone, and then he asks you for help as well, not at your convenience. giving the help may keep you far away from your important work, or if you just reject, things may get worse, you can imagine what he will think about: What an ungrateful person, I gave my help but he just reject my request, I will never help him again.</p>
<p>This is a tough condition and actually I just encountered it recently. Last month, my mother did a physical examination and the doctor recommended to take out something from her body by a small operation. But she has been not caught up with mobile phone. As we know, to register at hospital, you need mobile phone, to check your health status, you need mobile phone, and even when paying money, you are suggested to use mobile phone. She just can’t figure these things out and then asked a doctor neighbour for help. Finally she finished the operation and everything went well. I am pretty grateful and want to thank her face to face. But when she heard that I am a software engineer, she believed I must be good at computer and want me to make a ppt for her. I just couldn’t say no at that moment. And it takes me nearly two days to organize the data and design the diagram. After that, I will have to work over and over time to make up the progress of my job.</p>
<p>I still feel grateful for her. But I also realize it’s hard to return the favor sometime. Have you ever owed favor to some one and how did you return it, now it’s you turn.</p>
<p>I prepared 8 questions for you, you can choose the question or just share the story about what kind of favor you have ever owed and how did you return it back.</p>
<ol>
<li>If some one owe a favor to you but never return it back, will you help him again?</li>
<li>Will you return the favor by doing something you are not good at?</li>
<li>Do you agree this statement: we can owe anything but not a favor?</li>
<li>Will you feel pressure if you owe a favor to someone?</li>
<li>Will you spend a lot of money just to avoid owing a favor?</li>
</ol>
]]></content>
      <categories>
        <category>Toastmaster</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
      </tags>
  </entry>
  <entry>
    <title>Break the Lucky Silence</title>
    <url>/2021/02/23/toastmaster-speech-ice-breaker.html</url>
    <content><![CDATA[<blockquote>
<p>Pathways: Dynamic Leadership</p>
<p>Level 1-1: Ice Breaker</p>
</blockquote>
<span id="more"></span>

<p>I was born in a snowy midnight in a small village of Heilongjiang Province. My mother gave me the name Rui which means lucky in Chinese. That word comes from the saying: A snowy year, A harvest year.</p>
<p>As my mother’s wish, I am truly a lucky boy, not means winning the lottery, to be more precise, I am a quiet boy. </p>
<p>Not like my cousins, I never cried for any toy or candy. My mother told me to study, I just began studying. I didn’t understand why I should learn Chinese and math, actually I didn’t even heard of collage until junior high school. But what I did know is that my parents would feel happy if I said nothing and follow their instruction.</p>
<p>I followed my parents to Zhejiang Province and went through the whole primary school period. The dialect in that place is quite hard to understand. Luckily both teachers and students spoke mandarin in the class. In the school I was a kind of transparent person as I didn’t talk much. My favorite habit was reading books about computer and electronic, those books were put in the corner of the shelf at library, I really enjoyed the content in those books even though I couldn’t understand it.</p>
<p>Talking less let me have more time to read and think, gradually I became a good listener. My friends preferred to share their happiness and sadness with me, of course, they wouldn’t expect much voice response. Also Being quiet prevented me from many troubles, such as fighting with other people.</p>
<p>Things got change at middle high school after I came to Shandong Province with my family. The knowledge became harder and harder to learn, but I was not good at asking others for help. What’s worse, nobody had time talking with me, I could only solve the problem by myself, which would not turn to good result at that period. Eventually I went to an ordinary university at Yantai city to learn computer science.</p>
<p>The shortcoming of being not good at talking became even more obvious in collage. I saw many people make friends, make money, and even make girl friends by communicating with others. I had no idea how to make change because I got nervous and afraid while taking with strangers. At last I joined in a lab and made use of my entire spare time to study. Yes I got a great performance on my subject, but in my deep heart, I knew I didn’t make any progress at some aspect.</p>
<p>After graduated, I came to Beijing with one of my collage classmates and rented a room together. I guess we are the most strange roommates in the world: At weekends, we laid on our beds, played mobile phone or computer, without saying a word among whole day. Even at meal time, we ordered our food silently.</p>
<p>This weakness also started affecting my life, while interviewing for a job, I never had courage to argue for a better salary. While getting along with my girl friend, the failure of expressing my feelings made me lost her.</p>
<p>But just like someone had said: Love has a magic power. I never had made such a great determination to make change after breakup. The sadness forced myself to experience different kind groups of people. Some people got exercise at night, I tried it; Some people were discussing a news, I joined it. Someone joined a club, I am here.</p>
<p>The past is the past, now I am seeking for a rebirth. There is a saying: Silence is gold. but I hope I have the ability to express my thought, to influence people, to break the silence. I need to talk, I want to talk, I will be good at talk.</p>
]]></content>
      <categories>
        <category>Toastmaster</category>
      </categories>
      <tags>
        <tag>toastmaster</tag>
        <tag>speech</tag>
      </tags>
  </entry>
  <entry>
    <title>将rootfs转换成Dcoker image</title>
    <url>/2020/08/23/transform-rootfs-to-docker-image.html</url>
    <content><![CDATA[<blockquote>
<p>我们在编译一些老版本的软件时，通常必须选择一个较老版本的host环境，这时候我们可能会选择vm，但是vm有几个比较明显的缺陷：一是资源的消耗较大，因为vm本质上是一个独立的系统，内核以及大量的服务在host运行了一份，在vm里还要再运行一份，消耗了大量内存；二是在host和vm之间共享存储不方便，虽然可以使用nfs，samba之类的方式，但是他们都是基于网络的，当编译时会有大量小文件读写，这时可能会遇到性能瓶颈。通过使用Docker，则可以较好的解决这类问题。</p>
</blockquote>
<span id="more"></span>

<h1 id="Docker的优势"><a href="#Docker的优势" class="headerlink" title="Docker的优势"></a>Docker的优势</h1><p>Docker并不会重新运行一个新的内核，它只是通过内核的cgroup和namespace机制，对进程的权限和资源进行控制，从而实现一种轻量级的隔离。</p>
<p>不同container中的进程虽然使用自己的lib以及binary，但是他们都是依靠host的kernel的系统调用来工作，因此，理论上会有更小的性能损失。</p>
<p>container中也不需要运行那些与编译无关的服务，因为编译过程只会用到rootfs中的lib和binary，这会节省大量的内存。</p>
<p>还有很重要的一点，host的目录可以直接映射到container内，而不是通过网络，这样在container内部对于存储的读写性能几乎跟host是一样的。</p>
<h1 id="创建Docker-image"><a href="#创建Docker-image" class="headerlink" title="创建Docker image"></a>创建Docker image</h1><p>通常来说，有三种方法来创建Docker image：</p>
<ul>
<li>Dockerfile</li>
<li>Dockerhub</li>
<li>rootfs</li>
</ul>
<p>我们重点说Dockerhub和rootfs这两种方式，因为第一种我还不会。。。</p>
<h2 id="Docker-hub"><a href="#Docker-hub" class="headerlink" title="Docker hub"></a>Docker hub</h2><p>获得Docker image最简单的方法就是直接从Docker hub上pull下来，例如我需要一个Ubuntu 18.04的Docker image，只需要执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure>

<p>这种方法有个局限，就是有些非常老的发行版并没有对应的官方Dcoker image，你可能会找到一些个人上传的，但如果你对于环境的安全性和稳定性有较高的要求，那就需要自己制作一个。</p>
<h2 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h2><p>如果你现在有一个运行的linux系统，可能是物理机，可能是虚拟机，你只是用它来做编译，那么你现在有一个更好的选择，那就是将它转换成一个Docker image。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tar --numeric-owner --exclude=/boot/* --exclude=/dev/* --exclude=/lost+found --exclude=/proc/* --exclude=/selinux --exclude=/sys/* --exclude=/tmp/* --exclude=/var/run/* --exclude=/var/log/* -cf ubuntu-5.04.tar /</span><br></pre></td></tr></table></figure>

<p>然后，我们只需要将ubuntu-5.04.tar导入Docker的本地Repository，即可启动这个container。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker import ubuntu-5.04.tar ubuntu:5.04</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --rm ubuntu:5.04 bash</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>rootfs</tag>
      </tags>
  </entry>
  <entry>
    <title>使用kcptun来加速shadowsocks</title>
    <url>/2019/03/30/use-kcptun-to-accelecate-proxy-md.html</url>
    <content><![CDATA[<blockquote>
<p>最近gfw升级之后，似乎带来一个全新的特性——TCP阻断。受影响的vps可以ping，但是所有使用tcp协议的应用都会失效，如ssh和shadowsocks，不过udp并未受到影响，个人分析可能tcp的长连接更容易识别。由于shadowsocks并不支持udp通讯，所以需要使用kcptun作为中间层。</p>
</blockquote>
<span id="more"></span>

<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>这是kcptun项目网站的原理图片。</p>
<img src="/2019/03/30/use-kcptun-to-accelecate-proxy-md/kcptun.png" class="" title="kcptun workflow">

<p>可以看到kcptun的客户端会在本地监听来自应用程序的流量，同时将数据发往服务端，kcptun服务端程序会将数据发往目标端口。客户端和服务端之间使用kcp协议，它基于udp。</p>
<h1 id="安装kcptun"><a href="#安装kcptun" class="headerlink" title="安装kcptun"></a>安装kcptun</h1><p>根据你的设备的处理器架构以及系统类型，从<a href="https://github.com/shadowsocks/kcptun/releases/latest">https://github.com/shadowsocks/kcptun/releases/latest</a>下载相应的程序。</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol>
<li><p>将下载好的服务端程序改名为<strong>kcp-server</strong>，并且复制到<code>/usr/bin</code></p>
</li>
<li><p>由于kcptun目前不支持直接生成守护进程，同时为了方便管理，我编写了基于systemd的服务脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/colorfulshark/kcptun-daemon.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装服务脚本及配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd kcptun-daemon</span><br><span class="line">chmod +x install.sh</span><br><span class="line">sudo ./install.sh</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>Windows：<a href="https://github.com/shadowsocks/kcptun/releases/latest">https://github.com/shadowsocks/kcptun/releases/latest</a></p>
<p>下载解压之后，将客户端程序复制到shadowsocks所在目录，并改名为kcp-client.exe</p>
<p>Android：<a href="https://github.com/shadowsocks/kcptun-android/releases/latest"><a href="https://github.com/shadowsocks/kcptun-android/releases/latest">https://github.com/shadowsocks/kcptun-android/releases/latest</a></a></p>
<p>直接安装即可</p>
<h1 id="配置kcptun"><a href="#配置kcptun" class="headerlink" title="配置kcptun"></a>配置kcptun</h1><p>这里并不探讨最佳配置，因为每个人的网络情况都不同，所以这里只介绍一个最小的可工作配置。</p>
<h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><p>服务端的配置文件在<code>/etc/kcptun/config.json</code></p>
<ol>
<li>listen：kcptun的本地监听端口，用于与客户端通讯</li>
<li>target：服务端接收到数据后转发的地址，这里就是你的shadowsocks所监听的IP地址和端口号</li>
<li>key：客户端与服务端认证的密钥</li>
<li>crypt：加密方式，由于shadowsocks本身已经加密，所以不需要设置非常复杂的加密方式</li>
<li>mode：响应模式，更快的响应可能造成更高的丢包率</li>
</ol>
<p>注意，shadowsocks的监听端口与kcptun的target端口要一致。</p>
<h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol>
<li>打开shadowsocks<strong>编辑服务器</strong>的界面</li>
<li>将<strong>服务器端口</strong>改为kcptun所监听的端口，默认是29900</li>
<li>在<strong>插件程序</strong>中，填入<strong>kcp-server.exe</strong></li>
<li>在<strong>插件选项</strong>中，填入<code>mode=fast;key=&quot;it&#39;s a secrect&quot;</code></li>
<li>确认即可</li>
</ol>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ol>
<li>安装kcptun后，在shadowsocks的服务器编辑界面的Plugin中选择kcptun</li>
<li>在Configure中填入<code>mode=fast;key=&quot;it&#39;s a secrect&quot;</code></li>
<li>确认后重新连接服务器</li>
</ol>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shadowsocks</tag>
        <tag>kcptun</tag>
      </tags>
  </entry>
  <entry>
    <title>在Debian下使用Gnome3</title>
    <url>/2018/12/31/using-gnome3-under-debian.html</url>
    <content><![CDATA[<blockquote>
<p>接触Gnome最早是在Ubuntu上，但是后来Ubuntu换成了Unity，不过最后又换回了Gnome，可谓一波三折。目前Gnome3无论是在性能、稳定性还是可玩性都已经有了长足的进步，所以打算将Debian上的Ubuntu-Mate切换为Gnome3。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装Gnome3"><a href="#安装Gnome3" class="headerlink" title="安装Gnome3"></a>安装Gnome3</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install task-gnome-desktop</span><br></pre></td></tr></table></figure>

<p>在安装的过程中，会安装GDM3作为桌面管理器，如果你当前的桌面管理器不是它，会让你选择一个默认的桌面管理器。</p>
<h1 id="配置Gnome3"><a href="#配置Gnome3" class="headerlink" title="配置Gnome3"></a>配置Gnome3</h1><h2 id="完善插件环境"><a href="#完善插件环境" class="headerlink" title="完善插件环境"></a>完善插件环境</h2><p>Gnome3的一个很大的优势就是有一个活跃的社区，以及大量的桌面扩展支持。如果想要方便的安装扩展程序，需要一些额外的步骤。</p>
<ol>
<li><p>在Chrome安装“<strong>GNOME Shell integration</strong>”插件</p>
</li>
<li><p>安装“<strong>chrome-gnome-shell</strong>”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/opt/chrome</span><br><span class="line">sudo cp -r /etc/chromium/* /etc/opt/chrome/</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以上步骤的目的是开启Chrome等浏览器中检测Gnome信息的功能，详见<a href="https://wiki.gnome.org/Projects/GnomeShellIntegrationForChrome/Installation">GNOME Shell integration for Chrome Installation Guide</a></p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><a href="https://extensions.gnome.org/">Gnome Extensions</a></p>
<p>Gnome3中一个争议很大的地方就是Gnome-Shell，它有点类似于MacOS的LaunchPad，但由于Linux下的GPU加速支持并不完善，因此其过多的动画反而成了减分项，为了更高效的打开程序，需要额外的插件支持。</p>
<ol>
<li><p><a href="https://extensions.gnome.org/extension/1228/arc-menu/">Arc Menu</a></p>
<p>这时一个类似于WIndows开始菜单的插件，里面对于系统中的软件进行了分类，也支持快速搜索</p>
</li>
<li><p><a href="https://extensions.gnome.org/extension/307/dash-to-dock/">Dash to Dock</a></p>
<p>这是一个类似于MacOS中的Dock栏的插件，通过简单的配置可以变得类似于Gnome2中的侧栏，可以快速打开或者切换应用</p>
</li>
<li><p><a href="https://extensions.gnome.org/extension/358/activities-configurator">Activities Configurator</a></p>
<p>这是一个用来调节顶栏效果的插件，目的是让顶栏与侧栏在效果上一致，不会有割裂感。</p>
</li>
<li><p><a href="https://extensions.gnome.org/extension/1276/night-light-slider">Night Light Slider</a></p>
<p>这是一个用来调整护眼模式级别的插件，默认的护眼模式只能打开或关闭，不能调整色温。</p>
</li>
</ol>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p><a href="https://www.gnome-look.org/">Gnome Look</a></p>
<p>为了能够在网页上方便的安装主题，需要安装<a href="https://www.opendesktop.org/p/1136805/">ocs-url</a>。</p>
<p>首先打开ocs-url的主页，然后在“Files”选项卡中下载deb安装包，下载后执行以下命令即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo dpkg -i ocs-url*</span><br><span class="line">sudo apt install -f</span><br></pre></td></tr></table></figure>

<p>最后，在Gnome Look上直接在响应主题点击Install即可。</p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul>
<li><p>如何使dock栏的活跃图标在不同工作区内完全隔离？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gsettings set org.gnome.shell.app-switcher current-workspace-only true</span><br><span class="line">gsettings set org.gnome.shell.extensions.dash-to-dock isolate-workspaces true</span><br></pre></td></tr></table></figure>
</li>
<li><p>中科大软件源生成器</p>
<p><a href="https://mirrors.ustc.edu.cn/repogen/">repository file generator</a></p>
</li>
<li><p>老版本Ubuntu的软件源失效如何解决？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sed -i &#x27;s/archive.ubuntu/old-releases.ubuntu/&#x27; /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Ubuntu Server安装Gnome3后无法使用Network Manager？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/netplan</span><br><span class="line"></span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: NetworkManager</span><br><span class="line"></span><br><span class="line">netplan generate</span><br><span class="line">netplan apply</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何查看当前的系统版本？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line">cat /etc/issue</span><br><span class="line">cat /etc/os-release</span><br><span class="line">hostnamectl</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>gnome3</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows中使用Xserver</title>
    <url>/2021/01/16/using-xserver-in-windows.html</url>
    <content><![CDATA[<blockquote>
<p>随着公司全面转向微软云服务，尤其是outlook、calendar、onedrive和office这几个套件的加入，使用Windows电脑确实能带来更高效便捷的办公体验，作为Linux程序员最后的执着，我的Linux系统最终也活在了虚拟机里，变成了Windows的一个“服务”。然而有时候当我们必须使用Linux下的图形程序时该怎么办呢？</p>
</blockquote>
<span id="more"></span>

<p>实际上X Window System最初设计上就充分考虑了通过网络传输GUI这个特性，Xclient在一台Linux机器上运行，而其GUI可以通过网络在任何运行Xserver的机器上显示。基于这个原理，我们只需要在Windows中安装Xserver，即可“运行”Linux中的GUI程序。</p>
<h1 id="选择一款Xserver"><a href="#选择一款Xserver" class="headerlink" title="选择一款Xserver"></a>选择一款Xserver</h1><p>目前主流的有以下几款：</p>
<ul>
<li><a href="https://sourceforge.net/projects/xming/">Xming</a>：已经不再更新</li>
<li><a href="https://sourceforge.net/projects/vcxsrv/">VcXsrv</a></li>
<li><a href="https://www.cygwin.com/">Cygwin</a></li>
<li><a href="https://mobaxterm.mobatek.net/">MobaXterm</a></li>
<li><a href="https://x410.dev/">X410</a></li>
</ul>
<p>这里基于简单、易用、开源、免费的原则，选择了VcXsrv。只需要下载最新版本的exe安装即可。</p>
<h1 id="配置Windows端"><a href="#配置Windows端" class="headerlink" title="配置Windows端"></a>配置Windows端</h1><p>打开VcXsrv后，程序会要求进行配置，除了在<strong>Extra settings</strong>中选择<strong>Disable access control</strong>之外，其它保持默认即可，如图。</p>
<img src="/2021/01/16/using-xserver-in-windows/display-settings.png" class="" title="display-settings.png">

<img src="/2021/01/16/using-xserver-in-windows/client-startup.png" class="" title="client-startup.png">

<img src="/2021/01/16/using-xserver-in-windows/extra-settings.png" class="" title="extra-settings.png">

<h1 id="配置Linux端"><a href="#配置Linux端" class="headerlink" title="配置Linux端"></a>配置Linux端</h1><p>通常情况下，Xserver都是配合X11 Forward来使用的，但是因为在我们的场景当中，Linux与Windows在同一个网络中，他们是能够直接互相访问的，所以可以使用一种更加简单的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export DISPLAY=192.168.50.1:0.0</span><br></pre></td></tr></table></figure>

<p><code>192.168.50.1</code>是Windows的IP地址，<code>0.0</code>是X server的Display编号，一般保持默认即可。</p>
<p>这样设置完成之后，在Windows中使用任意终端连接到Linux，启动GUI程序后，都能在Windows上显示，而无需关注SSH的X11 Forward是否开启。</p>
<h1 id="使用X11-Forward"><a href="#使用X11-Forward" class="headerlink" title="使用X11 Forward"></a>使用X11 Forward</h1><p>如果你的Linux机器不能直接访问Windows，那么此时你必须使用SSH的X11 Forward，使用这个功能需要SSH server开启X11 Forward，并且SSH client在连接时也启用该功能，一般是添加<code>-X</code>参数。</p>
<p>最重要的一点是，你需要在SSH client的环境中设置<code>DISPLAY</code>变量，这时候不同SSH client的设置方法并不相同，可以查阅相关文档。</p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>xserver</tag>
      </tags>
  </entry>
  <entry>
    <title>部署网心云——利用闲置宽带赚钱</title>
    <url>/2022/08/30/make-money-with-wxedge.html</url>
    <content><![CDATA[<blockquote>
<p>我大约是从2020年开始接触PCDN，当时在我的小出租屋里面，通过Windows Hyper V部署了一个网心云，本就抱着试试看的态度，没想到收益竟意外的不错，从此就踏上了PCDN赚钱之路。在此也总结一下以往的经验。</p>
</blockquote>
<span id="more"></span>

<h1 id="大前提"><a href="#大前提" class="headerlink" title="大前提"></a>大前提</h1><p>PCDN的本质就是利用闲置的带宽以及硬盘资源，帮大公司缓存内容，从而加速其用户加载资源的速度。比如哔哩哔哩，当用户播放视频的时候，有可能并不从哔哩哔哩的服务器加载，而是从我们的PCDN设备直接加载，一方面节省了公司的带宽，另一方面，由于我们的设备可能距离用户更近，从而也提高了加载速度。</p>
<p>若要玩转PCDN业务，我们需要有3个大前提：</p>
<h2 id="闲置的计算机"><a href="#闲置的计算机" class="headerlink" title="闲置的计算机"></a>闲置的计算机</h2><p>可以是笔记本，台式机，甚至是树莓派，电视盒子。</p>
<h2 id="闲置的硬盘"><a href="#闲置的硬盘" class="headerlink" title="闲置的硬盘"></a>闲置的硬盘</h2><p>由于需要缓存内容，因此需要较大容量的硬盘。</p>
<h2 id="合适的宽带"><a href="#合适的宽带" class="headerlink" title="合适的宽带"></a>合适的宽带</h2><p>PCDN对于宽带的要求较高，一方面，上传速度要尽可能快，另一方面，要尽可能提供从外网访问内网的途径。</p>
<p>对于第一点，由于国内的民用宽带大多为非对等宽带，上传速度非常受限，一般从10Mbps到100Mbps左右，可以使用speedtest进行测速，如果速度低于10Mbps，部署PCDN的意义就不大了。</p>
<p>对于第二点，如果要做到外网设备访问内网设备，一般有3种途径来实现：</p>
<ol>
<li>公网IP：PCDN设备拨号后直接获取公网IP。</li>
<li>映射公网IP：光猫、路由器等拨号，且PCDN设备接在开启了获取了公网IP且开启了UPnP的设备下。</li>
<li>全锥型NAT：需要PCDN设备主动访问公网设备，由公网服务器记录我们的真实IP及端口，并将此信息同步给客户端，实现外网IP+端口到内网设备的访问，也就是我们常说的UDP打洞。</li>
</ol>
<p>如果我们的网络无法满足以上条件，也没有必要部署PCDN设备。</p>
<h1 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h1><p>网心云主要提供了3种模式：嵌入式设备、X86、docker。</p>
<p><a href="https://www.onethingcloud.com/download-center">官网下载地址</a></p>
<h2 id="嵌入式设备"><a href="#嵌入式设备" class="headerlink" title="嵌入式设备"></a>嵌入式设备</h2><p>网心云称为三方盒子，主要包括以下几种：</p>
<ol>
<li><a href="https://help.onethingcloud.com/7cb4/3ed5/77f6">斐讯N1盒子</a></li>
<li><a href="https://help.onethingcloud.com/7cb4/3ed5/67eb">WJY盒子</a></li>
<li><a href="https://help.onethingcloud.com/7cb4/3ed5/39ae">树莓派3B</a></li>
<li><a href="https://help.onethingcloud.com/7cb4/3ed5/39ae">树莓派4B</a></li>
</ol>
<p>其安装方式根据设备不同而不同，但基本上都是直接将带分区的系统镜像写入Flash当中。</p>
<h2 id="X86"><a href="#X86" class="headerlink" title="X86"></a>X86</h2><p>基于X86平台的系统包括以下几种：</p>
<ol>
<li><a href="https://help.onethingcloud.com/7cb4/35e9/1a4d">基于Hyper-V的虚拟化镜像</a></li>
<li><a href="https://help.onethingcloud.com/7cb4/35e9/279e">基于KVM的虚拟化镜像</a></li>
<li><a href="https://help.onethingcloud.com/7cb4/35e9/4b1f">基于VMWare的虚拟化镜像</a></li>
<li><a href="https://help.onethingcloud.com/7cb4/35e9/9af0">基于群晖系统的虚拟化镜像（KVM）</a></li>
<li><a href="https://help.onethingcloud.com/7cb4/35e9/1196">ISO安装包（基于CentOS7）</a></li>
</ol>
<p>X86平台与我们平时接触的Windows和Linux系统相似，安装过程也极为类似。相对于嵌入式设备，X86平台的上限更高，适合大带宽的玩家，当然，其占用的系统资源也是最大的。普通的家用带宽很可能是回不了本的。</p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>这是我目前最喜欢的一种部署模式，因为PCDN本质上就是一套用户态的应用程序，为了几个应用程序而安装整个系统，会造成大量资源浪费。而使用Docker就可以兼具功能和资源消耗。</p>
<p>虽然这种模式非常适合小带宽玩家，但是官方似乎并没有特别宣传此种方式，甚至在官网都找不到特别详尽完整的教程，因此本文着重对此种方式进行描述。</p>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>我们可以直接按照Docker官方文档来安装：</p>
<ul>
<li><a href="https://docs.docker.com/engine/install/centos/">CentOS</a></li>
<li><a href="https://docs.docker.com/engine/install/debian/">Debian</a></li>
<li><a href="https://docs.docker.com/engine/install/fedora/">Fedora</a></li>
<li><a href="https://docs.docker.com/engine/install/rhel/">RHEL</a></li>
<li><a href="https://docs.docker.com/engine/install/sles/">SLES</a></li>
<li><a href="https://docs.docker.com/engine/install/ubuntu/">Ubuntu</a></li>
</ul>
<h3 id="下载网心云docker镜像"><a href="#下载网心云docker镜像" class="headerlink" title="下载网心云docker镜像"></a>下载网心云docker镜像</h3><p><a href="https://hub.docker.com/r/onething1/wxedge">网心云Docker Hub地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull onething1/wxedge</span><br></pre></td></tr></table></figure>

<h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3><p>这里分为两种情况：</p>
<ol>
<li><p>使用host网络。配置简单，但是只能部署一个container，且会影响host网络，延迟较大。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">           --name=wxedge \</span><br><span class="line">           --restart=always \</span><br><span class="line">           --privileged \</span><br><span class="line">           --net=host  \</span><br><span class="line">           --tmpfs /run \</span><br><span class="line">           --tmpfs /tmp \</span><br><span class="line">           -v 磁盘路径:/storage:rw \</span><br><span class="line">           onething1/wxedge</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用macvlan网络，配置复杂，但不会影响host网络，隔离性更好，延迟也低一些。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建macvlan，假设网关是10.0.0.1</span></span><br><span class="line">docker network create -d macvlan \</span><br><span class="line">                      --subnet=10.0.0.0/24 \</span><br><span class="line">                      --gateway=10.0.0.1 \</span><br><span class="line">                      -o parent=enp3s0 \</span><br><span class="line">                      macvlan0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建resolv.conf文件，否则会使用docker默认的DNS服务器，造成网络识别错误</span></span><br><span class="line">sudo bash -c &quot;echo nameserver 10.0.0.1 &gt; 磁盘路径/resolv.conf&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">           --name=wxedge \</span><br><span class="line">           --restart=always \</span><br><span class="line">           --privileged \</span><br><span class="line">           --net=macvlan0 \</span><br><span class="line">           --ip=10.0.0.100  \</span><br><span class="line">           --tmpfs /run \</span><br><span class="line">           --tmpfs /tmp \</span><br><span class="line">           -v 磁盘路径:/storage:rw \</span><br><span class="line">           -v 磁盘路径/resolv.conf:/etc/resolv.conf \</span><br><span class="line">           onething1/wxedge</span><br></pre></td></tr></table></figure></li>
</ol>
<p>部署完成后，就可以通过<a href="http://10.0.0.100:18888/">http://10.0.0.100:18888</a>访问了。</p>
<p>使用此种方式还有一个隐形大坑，container会向overlayfs写入大量数据，造成根目录所在的分区快速减少，如果你的系统分区不大，建议将docker目录迁移到其他分区。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">sudo systemctl stop docker.service</span><br><span class="line">sudo systemctl stop docker.socket</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改systemd服务</span></span><br><span class="line">sudo vim /lib/systemd/system/docker.service</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">ExecStart=/usr/bin/dockerd -g /new/path/docker -H fd://</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">迁移docker目录</span></span><br><span class="line">sudo mkdir -p /new/path/docker</span><br><span class="line">sudo rsync -aqxP /var/lib/docker/ /new/path/docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://linuxconfig.org/how-to-move-docker-s-default-var-lib-docker-to-another-directory-on-ubuntu-debian-linux">Change Docker root directory &#x2F;var&#x2F;lib&#x2F;docker to another location</a></p>
<p><a href="https://tieba.baidu.com/p/7380333203">网络类型、UPnP、DMZ的粗浅解释</a></p>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>网心云</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title>All-in-One，但是小米笔记本！</title>
    <url>/2022/11/10/all-in-one-but-xiaomi-laptop.html</url>
    <content><![CDATA[<blockquote>
<p>一直想尝试一下All-in-One的方案，但是无奈手边并没有支持iommu的设备，正值双十一之际，就在我决定挑选硬件组装一台All-in-One PC时，我突然想到，自己的小米游戏本有没有可能支持iommu呢？一念之间，我已经做好了Debian live的U盘，此时，神奇的事情发生了。。。</p>
</blockquote>
<span id="more"></span>

<p>没错，你可能已经猜到了，在设置了内核cmdline后，IOMMU竟然启用了，不仅如此，PCI Passthrough所需的特性全部都启用了！最终我成功的在PVE上安装了Windows11并透传了独立显卡GTX1060m。此文将记录这一切是如何发生的。</p>
<h1 id="0x0-准备工作"><a href="#0x0-准备工作" class="headerlink" title="0x0 准备工作"></a>0x0 准备工作</h1><ul>
<li>小米游戏本一代，处理器i5-7300hq，显卡GTX1060m，内存16GB</li>
<li>U盘</li>
<li>PVE镜像，Windows11镜像</li>
<li>USB键盘，USB鼠标</li>
</ul>
<h1 id="0x1-安装PVE"><a href="#0x1-安装PVE" class="headerlink" title="0x1 安装PVE"></a>0x1 安装PVE</h1><p>可以参考这篇文章<a href="https://blog.colorfulshark.net/2019/11/03/install-openwrt-in-proxmox-ve.html">在Proxmox VE中安装Openwrt作为软路由</a></p>
<h1 id="0x2-配置PCI-Passthrough所需特性"><a href="#0x2-配置PCI-Passthrough所需特性" class="headerlink" title="0x2 配置PCI Passthrough所需特性"></a>0x2 配置PCI Passthrough所需特性</h1><h2 id="0x2-1-启用IOMMU"><a href="#0x2-1-启用IOMMU" class="headerlink" title="0x2.1 启用IOMMU"></a>0x2.1 启用IOMMU</h2><p>打开grub配置文件，在内核cmdline中追加<code>intel_iommu=on</code>，并更新grub配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/default/grub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet intel_iommu=on&quot;</span></span></span><br><span class="line"></span><br><span class="line">update-grub</span><br></pre></td></tr></table></figure>

<h2 id="0x2-2-加载vfio驱动模块"><a href="#0x2-2-加载vfio驱动模块" class="headerlink" title="0x2.2 加载vfio驱动模块"></a>0x2.2 加载vfio驱动模块</h2><p>将vfio相关模块追加到<code>/etc/modules</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/modules</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;</span></span><br><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure>

<h2 id="0x2-3-检查配置是否生效"><a href="#0x2-3-检查配置是否生效" class="headerlink" title="0x2.3 检查配置是否生效"></a>0x2.3 检查配置是否生效</h2><ul>
<li><p>查看IOMMU是否启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dmesg | grep -e DMAR -e IOMMU</span><br></pre></td></tr></table></figure>

<p>如果生效，将会有类似于<code>DMAR: IOMMU enabled</code>的log输出，如图</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/iommu1.png" class="">
</li>
<li><p>查看IOMMU Interrupt Remapping是否启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dmesg | grep &#x27;remapping&#x27;</span><br></pre></td></tr></table></figure>

<p>如果生效，将会有类似于<code>DMAR-IR: Enabled IRQ remapping in x2apic mode</code>的log输出，如图</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/iommu2.png" class="">
</li>
<li><p>查看IOMMU Isolation是否启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /sys/kernel/iommu_groups/ -type l</span><br></pre></td></tr></table></figure>

<p>检查IOMMU分组是否正确，这需要ACS (Access Control Services)的支持，如图</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/iommu3.png" class=""></li>
</ul>
<h1 id="0x3-安装Windows11虚拟机"><a href="#0x3-安装Windows11虚拟机" class="headerlink" title="0x3 安装Windows11虚拟机"></a>0x3 安装Windows11虚拟机</h1><p>创建虚拟机的过程中有几个步骤需要注意：</p>
<ul>
<li><p>Guest OS选择Microsoft Windows</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/win1.png" class="">
</li>
<li><p>Machine选择q35，BIOS选择OVMF(UEFI)，添加EFI Disk和TPM</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/win2.png" class="">
</li>
<li><p>CPU Type选择host</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/win3.png" class="">
</li>
<li><p>添加Windows的virtio驱动镜像，从<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/?C=M;O=D">这里</a>下载</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/win4.png" class=""></li>
</ul>
<p>当安装到选择磁盘这一步时，需要选择<strong>加载驱动程序</strong>，否则会找不到虚拟硬盘。后续的安装过程与标准流程没有区别。</p>
<h1 id="0x4-设置GPU-Passthrough"><a href="#0x4-设置GPU-Passthrough" class="headerlink" title="0x4 设置GPU Passthrough"></a>0x4 设置GPU Passthrough</h1><p>这是All-in-One方案中最重要的部分，毕竟代码要写，游戏也还是要玩的😁。</p>
<p>这个步骤本身没什么难的，直接添加对应的PCI设备即可。</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/pci1.png" class="">

<p>但对于小米游戏本，这一步有两个大坑！</p>
<ul>
<li><p>因为它的独显的VBIOS不支持UEFI启动，所以如果虚拟机只有一个独显，WIndows系统是没有办法完成初始化的，表现为系统始终无法启动，因此我们需要一个虚拟显示设备辅助WIndows启动。</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/pci2.png" class="">
</li>
<li><p>好的，现在我们进入系统了，结果发现显卡驱动竟然安装不上，显示为<strong>找不到兼容的显示设备</strong>。经过几天的调查，发现设备管理器里面，显卡的Sub_Vendor ID和Sub_Product ID是全0，有可能是这个信息是存储在主板BIOS中，而不是VBIOS中，解决方法比较简单，在PVE的PCI Passthrough界面可以直接配置该信息。另外还需要选中<strong>All Functions</strong>和<strong>PCI-Express</strong>。</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/pci3.png" class="">
</li>
<li><p>设置KVM选项<code>ignore_msrs</code>，否则虚拟机在使用独显的过程中会崩溃</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;options kvm ignore_msrs=1 report_ignored_msrs=0&quot; &gt; /etc/modprobe.d/kvm.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后，附上完整的硬件配置</p>
<img src="/2022/11/10/all-in-one-but-xiaomi-laptop/win5.png" class="">

<h1 id="0x5-软路由"><a href="#0x5-软路由" class="headerlink" title="0x5 软路由"></a>0x5 软路由</h1><p>既然是All-in-One，OpenWRT，爱快，网心云这些肯定是少不了啦，不过这些都是常规的操作，不作详细介绍了。</p>
<h1 id="0x6-一周之后"><a href="#0x6-一周之后" class="headerlink" title="0x6 一周之后"></a>0x6 一周之后</h1><p>虽然整套All-in-One方案在功能上没有任何问题，但却拜倒在这颗i5-7300hq上，它太弱啦😂。</p>
<p>直接表现就是在Windows中玩游戏一卡一卡，CPU占用直接100%😫。</p>
<p>所以一周之后，我打算重新装回WIndows11，不过在之前，我写下此文，特此纪念自己的折腾之路😊。</p>
<h1 id="0x7-参考"><a href="#0x7-参考" class="headerlink" title="0x7 参考"></a>0x7 参考</h1><p><a href="https://pve.proxmox.com/wiki/Pci_passthrough">https://pve.proxmox.com/wiki/Pci_passthrough</a></p>
<p><a href="https://pve.proxmox.com/wiki/PCI(e)_Passthrough">https://pve.proxmox.com/wiki/PCI(e)_Passthrough</a></p>
<p><a href="https://pve.proxmox.com/wiki/Windows_VirtIO_Drivers">https://pve.proxmox.com/wiki/Windows_VirtIO_Drivers</a></p>
<p><a href="https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF">https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF</a></p>
<p><a href="https://lantian.pub/article/modify-computer/laptop-muxed-nvidia-passthrough.lantian/">https://lantian.pub/article/modify-computer/laptop-muxed-nvidia-passthrough.lantian/</a></p>
<p><a href="https://lantian.pub/article/modify-computer/laptop-intel-nvidia-optimus-passthrough.lantian/">https://lantian.pub/article/modify-computer/laptop-intel-nvidia-optimus-passthrough.lantian/</a></p>
<p><a href="https://post.smzdm.com/p/avx8pn3n/">https://post.smzdm.com/p/avx8pn3n/</a></p>
<p><a href="https://xylog.cn/2020/03/03/proxmox-vga-nvidia.html">https://xylog.cn/2020/03/03/proxmox-vga-nvidia.html</a></p>
<p><a href="https://iamroot.cn/pvean-zhuang-win/">https://iamroot.cn/pvean-zhuang-win/</a></p>
<p><a href="https://www.syfly007.com/post/CS/linux/pve%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A.html">https://www.syfly007.com/post/CS/linux/pve%E6%98%BE%E5%8D%A1%E7%9B%B4%E9%80%9A.html</a></p>
]]></content>
      <categories>
        <category>Geek</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>软路由</tag>
      </tags>
  </entry>
  <entry>
    <title>使用acme申请https证书</title>
    <url>/2023/01/08/issue-https-cert-with-acme.html</url>
    <content><![CDATA[<blockquote>
<p>随着互联网的飞速发展，http这种明文传输协议已经越来越无法满足建站的需求，因此当今绝大多数网站都已经切换到了https。虽然https协议使用TLS加密极大地提高了传输安全性，但也带来了更大的部署难度，首当其冲的就是TLS证书申请，本文将介绍如何使用acme免费申请一个供个人使用的证书。</p>
</blockquote>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>虽然说是免费申请，但我们还是需要一些前置条件，其中最重要的就是</p>
<ol>
<li>一个域名。</li>
<li>一个公网IP（v4或者v6都可以）。</li>
</ol>
<p>此外，还需要一个Linux环境来执行acme程序。</p>
<h1 id="安装acme"><a href="#安装acme" class="headerlink" title="安装acme"></a>安装<a href="https://github.com/acmesh-official/acme.sh">acme</a></h1><p>证书申请的原理就是向一些证书发行组织，如<a href="https://letsencrypt.org/">letsencrypt</a>、<a href="https://zerossl.com/">zerossl</a>等，发送域名和服务器等信息，如果信息校验成功，这些组织就会给我们颁发TLS证书。</p>
<p>由于与证书颁发服务器之间的通信协议较为繁琐，我们需要使用程序来完成这一系列操作，而acme就是用来完成这项工作的脚本程序。</p>
<p>根据使用系统环境的不同，acme的安装方式也不尽相同。</p>
<h2 id="标准发行版"><a href="#标准发行版" class="headerlink" title="标准发行版"></a>标准发行版</h2><p>如Ubuntu、Debian、CentOS等。</p>
<p><strong>在线安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh -s email=my@example.com</span><br><span class="line">wget -O -  https://get.acme.sh | sh -s email=my@example.com</span><br></pre></td></tr></table></figure>

<p><strong>离线安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/acmesh-official/acme.sh.git</span><br><span class="line">cd ./acme.sh</span><br><span class="line">./acme.sh --install -m my@example.com</span><br></pre></td></tr></table></figure>

<p>申请的证书保存在<code>~/.acme.sh/$domain</code>中。</p>
<h2 id="OpenWRT"><a href="#OpenWRT" class="headerlink" title="OpenWRT"></a>OpenWRT</h2><p>安装以下包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">luci-app-acme</span><br><span class="line">acme</span><br><span class="line">acme-deploy</span><br><span class="line">acme-dnsapi</span><br><span class="line">acme-notify</span><br></pre></td></tr></table></figure>

<p>申请的证书保存在<code>/etc/acme/$domain</code>中。</p>
<h1 id="证书申请"><a href="#证书申请" class="headerlink" title="证书申请"></a>证书申请</h1><p>根据网站部署方式的不同，使用acme申请证书的方式也不相同。</p>
<h2 id="使用DNS-API申请证书"><a href="#使用DNS-API申请证书" class="headerlink" title="使用DNS API申请证书"></a>使用DNS API申请证书</h2><p>要使用DNS API，通常都需要获取一个API Key。acme要求我们在使用DNS API之前设置相关环境变量。</p>
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><h4 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h4><p>打开<a href="https://dash.cloudflare.com/profile/api-tokens">https://dash.cloudflare.com/profile/api-tokens</a>，查看<code>Global API Key</code>，并设置以下环境变量。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CF_Key=&quot;&quot;</span><br><span class="line">export CF_Email=&quot;&quot;</span><br><span class="line">export DNS_API=&#x27;dns_cf&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="Dynv6"><a href="#Dynv6" class="headerlink" title="Dynv6"></a>Dynv6</h4><p>打开<a href="https://dynv6.com/keys/token/new">https://dynv6.com/keys/token/new</a>，创建一个新的HTTP Token。</p>
<p>创建本地ssh公私钥，并将公钥<code>~/.ssh/id_ed25519.pub</code>上传到<a href="https://dynv6.com/keys">https://dynv6.com/keys</a>中的<code>SSH Public Keys</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519</span><br></pre></td></tr></table></figure>

<p>设置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export KEY=&quot;~/.ssh/id_ed25519.pub&quot;</span><br><span class="line">export DYNV6_TOKEN=&quot;&quot;</span><br><span class="line">export DNS_API=&#x27;dns_dynv6&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><h4 id="标准发行版-1"><a href="#标准发行版-1" class="headerlink" title="标准发行版"></a>标准发行版</h4><p>执行以下脚本之前，相关的环境变量必须已经设置好。</p>
<p>域名可以填入多个，用空格分隔，这样多个域名可以共享同一个证书。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Related environment variables must have been exported before</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the first is the main domain</span></span><br><span class="line">domain_list=&#x27;example.org sub.example.org *.sub.example.org&#x27;</span><br><span class="line">for domain in $domain_list</span><br><span class="line">do</span><br><span class="line">        domain_opt=&quot;$domain_opt -d $domain&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">~/.acme.sh/acme.sh --issue --dns $DNS_API $domain_opt --server letsencrypt</span><br></pre></td></tr></table></figure>

<h4 id="OpenWRT-1"><a href="#OpenWRT-1" class="headerlink" title="OpenWRT"></a>OpenWRT</h4><p>打开<code>服务 &gt; ACME证书</code>。</p>
<p>在<code>域名</code>这一项里面添加所需的域名，在<code>DNS API</code>这一项里面填入环境变量<code>$DNS_API</code>的值，最后分别将其它环境变量填入<code>DNS API 凭证</code>中。</p>
<img src="/2023/01/08/issue-https-cert-with-acme/openwrt_acme_cf.png" class="">

<h1 id="证书使用"><a href="#证书使用" class="headerlink" title="证书使用"></a>证书使用</h1><p>为了确保证书的最佳兼容性，证书文件使用<code>fullchain.cer</code>，而密钥文件使用<code>$domain.key</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.20200202.best/dynv6acmednsapihowto/">动态域名商Dynv6之acme使用dnsapi申请证书</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>acme</tag>
        <tag>https</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Yuzu游玩Switch游戏</title>
    <url>/2023/01/27/play-ns-games-on-yuzu.html</url>
    <content><![CDATA[<blockquote>
<p>众所周知，任天堂的游戏极具趣味性，但硬件机能却非常差，分辨率低不说，在有些游戏中连30帧的帧率都无法保障，并且据说2024年将发布下一代主机，现在购买Switch很可能49年入国军。对于那些只想玩几个特定的单机游戏的人来说，使用模拟器也是一个可行的方案。本文将完整介绍如何在Windows PC上畅玩Switch游戏。</p>
</blockquote>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>由于模拟器通常具有较高的性能损耗，所以首先我们要有一台性能强劲的电脑，这里给出一个硬件需求：</p>
<ul>
<li>CPU：至少4核心，且单核性能在英特尔8代i5及以上</li>
<li>内存：8GiB以上</li>
<li>显卡：GTX1050及以上，显存至少4GiB</li>
</ul>
<p>另外，Switch游戏全部都是针对手柄做适配，所以使用键鼠游玩会非常难以适应，大大降低游戏乐趣，为了保证最佳游戏体验，建议购买一对Joycons手柄，目前Yuzu已经几乎完美适配该手柄，无需使用第三方软件即可实现HD震动和体感。</p>
<h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>Yuzu本身并不是完整的Switch模拟器，它需要Switch的<strong>固件</strong>以及<strong>密钥</strong>，而由于法律原因，这两部分是不能与Yuzu一起发行的，所以完整的安装过程包括：</p>
<div class="tabs" id="安装过程"><ul class="nav-tabs"><li class="tab active"><a href="#安装过程-1">安装Yuzu</a></li><li class="tab"><a href="#安装过程-2">安装密钥</a></li><li class="tab"><a href="#安装过程-3">安装固件</a></li></ul><div class="tab-content"><div class="tab-pane active" id="安装过程-1"><p>从<a href="https://yuzu-emu.org/downloads/">https://yuzu-emu.org/downloads/</a>下载并安装Yuzu。</p>
<p>每次运行Yuzu的时候，它都会检查是否有更新，建议始终使用最新版。</p></div><div class="tab-pane" id="安装过程-2"><p>从<a href="http://www.mediafire.com/file/ldsbcskbt0z10kv/prod.keys/file">http://www.mediafire.com/file/ldsbcskbt0z10kv/prod.keys/file</a>下载prod.keys。</p>
<p>启动Yuzu，选择<code>文件</code>-&gt;<code>打开yuzu文件夹</code>，将prod.keys放入文件夹中的<code>keys</code>目录。</p>
<img src="/2023/01/27/play-ns-games-on-yuzu/keys.png" class=""></div><div class="tab-pane" id="安装过程-3"><p>从<a href="https://darthsternie.net/switch-firmwares/">https://darthsternie.net/switch-firmwares/</a>下载固件。</p>
<p>启动Yuzu，选择<code>文件</code>-&gt;<code>打开yuzu文件夹</code>，将固件解压到文件夹中的<code>nand\system\Contents\registered</code>目录。</p>
<img src="/2023/01/27/play-ns-games-on-yuzu/firmware.png" class=""></div></div></div>

<p>完成所有步骤后，重启Yuzu。</p>
<h1 id="安装游戏"><a href="#安装游戏" class="headerlink" title="安装游戏"></a>安装游戏</h1><p>Yuzu支持Switch上的NSP和XCI格式的游戏，而游戏本身又分为本体、更新和DLC。</p>
<div class="tabs" id="安装游戏"><ul class="nav-tabs"><li class="tab active"><a href="#安装游戏-1">设置游戏目录</a></li><li class="tab"><a href="#安装游戏-2">下载游戏</a></li><li class="tab"><a href="#安装游戏-3">安装游戏</a></li></ul><div class="tab-content"><div class="tab-pane active" id="安装游戏-1"><p>启动Yuzu，点击主页的<code>添加游戏目录</code>，选择一个目录来存储游戏。</p>
<img src="/2023/01/27/play-ns-games-on-yuzu/game-dir.png" class=""></div><div class="tab-pane" id="安装游戏-2"><p>可以下载Switch游戏的网站有很多，这里主要推荐以下4个：</p>
<ul>
<li><a href="https://nxbrew.com/">https://nxbrew.com/</a></li>
<li><a href="https://nsw2u.xyz/">https://nsw2u.xyz/</a></li>
<li><a href="https://nswgame.com/category/switch/">https://nswgame.com/category/switch/</a></li>
<li><a href="https://www.ziperto.com/nintendo-switch-nsp/">https://www.ziperto.com/nintendo-switch-nsp/</a></li>
</ul></div><div class="tab-pane" id="安装游戏-3"><p>将下载的<strong>游戏本体</strong>直接放入第一步设置的游戏目录即可。</p>
<p>对于<strong>游戏更新</strong>和<strong>DLC</strong>，可以选择<code>文件</code>-&gt;<code>安装文件到NAND</code>，并选择对应的文件安装即可。</p>
<img src="/2023/01/27/play-ns-games-on-yuzu/games.png" class=""></div></div></div>

<h1 id="设置手柄"><a href="#设置手柄" class="headerlink" title="设置手柄"></a>设置手柄</h1><p>虽然Yuzu已经内置了Joycons驱动，但由于Joycons是通过蓝牙连接到电脑，为了避免各种各样的兼容性问题，推荐使用USB蓝牙适配器，并且最好是蓝牙4.0协议。</p>
<div class="tabs" id="设置手柄"><ul class="nav-tabs"><li class="tab active"><a href="#设置手柄-1">蓝牙连接</a></li><li class="tab"><a href="#设置手柄-2">单人模式</a></li><li class="tab"><a href="#设置手柄-3">多人模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="设置手柄-1"><p>长按Joycons的蓝牙配对键，直到4个流水灯闪烁，使用电脑搜索蓝牙设备，并依次连接两个手柄。</p>
<img src="/2023/01/27/play-ns-games-on-yuzu/connect.png" class=""></div><div class="tab-pane" id="设置手柄-2"><p>打开<code>模拟</code>-&gt;<code>设置</code>-&gt;<code>控制</code>，<code>连接控制器</code>选择<code>双Joycons手柄</code>，<code>输入设备</code>选择<code>Dual Joycon 1</code>，此时摇动摇杆或者按动按键可以看到相应的动画。</p>
<img src="/2023/01/27/play-ns-games-on-yuzu/single.png" class=""></div><div class="tab-pane" id="设置手柄-3"><p>打开<code>模拟</code>-&gt;<code>设置</code>-&gt;<code>控制</code>。</p>
<p><code>玩家 1</code>的<code>连接控制器</code>选择<code>右Joycons手柄</code>，<code>输入设备</code>选择<code>Right Joycon 1</code>，此时摇动摇杆或者按动按键可以看到相应的动画。</p>
<p><code>玩家 2</code>的<code>连接控制器</code>选择<code>左Joycons手柄</code>，<code>输入设备</code>选择<code>Left Joycon 1</code>，此时摇动摇杆或者按动按键可以看到相应的动画。</p>
<img src="/2023/01/27/play-ns-games-on-yuzu/player1.png" class="">

<img src="/2023/01/27/play-ns-games-on-yuzu/player2.png" class=""></div></div></div>

<h1 id="开始游戏"><a href="#开始游戏" class="headerlink" title="开始游戏"></a>开始游戏</h1><p>最后，双击游戏即可开始畅玩。</p>
<img src="/2023/01/27/play-ns-games-on-yuzu/play.png" class="">

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://ethanwrenn.com/complete-guide-for-maximum-performance-on-yuzu-download-links-for-keys-firmware-switch-games-and-shaders/#:~:text=Open%20Yuzu%20and%20go%20to,the%20firmware%20files%20in%20there.">Complete guide for maximum performance on Yuzu + Download links for Keys, Firmware, Switch Games and Shaders</a></p>
<p><a href="https://cemuhook.sshnuke.net/padudpserver.html">How to setup your input software to provide motion sensor data</a></p>
<p><a href="https://tieba.baidu.com/p/7835182553">关于蓝牙适配器连接原装joycon</a></p>
]]></content>
      <categories>
        <category>Games</category>
      </categories>
      <tags>
        <tag>switch</tag>
        <tag>yuzu</tag>
      </tags>
  </entry>
  <entry>
    <title>使用QEMU GDB调试Linux内核</title>
    <url>/2023/01/28/debug-kernel-with-qemu-gdb.html</url>
    <content><![CDATA[<blockquote>
<p>调试Linux内核从来都不是一件容易事。如果在开发过程中发现内核无法启动，甚至连日志输出都没有，问题就会变得很棘手。如果是开发板，可能还可以借助JTAG，但如果没有JTAG，要如何进行调试呢？本文给出另外一种可能：使用QEMU来进行内核调试。</p>
</blockquote>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>要使用QEMU GDB调试Linux内核，首先我们需要让内核能够在QEMU中启动。对于X86架构，这通常不困难，但是对于ARM架构，尤其是ARM32架构，可能需要借助uboot才能启动内核，具体可以参考<a href="https://blog.colorfulshark.net/2021/01/30/boot-kernel-in-uboot-from-qemu.html">在QEMU中启动U-Boot和内核</a>。</p>
<p>其次我们还需要GDB运行环境，可以使用GDB命令，也可以使用<a href="https://www.gdbgui.com/">gdbgui</a>这样的图形化工具。</p>
<p>最后，我们还需要让内核保留调试信息，可以在<code>menuconfig</code>做如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Symbol: DEBUG_KERNEL [=y]</span><br><span class="line">Type  : bool</span><br><span class="line">Defined at lib/Kconfig.debug:211</span><br><span class="line">  Prompt: Kernel debugging</span><br><span class="line">  Location:</span><br><span class="line">    -&gt; Kernel hacking</span><br><span class="line">      -&gt; Kernel debugging (DEBUG_KERNEL [=y])</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Symbol: DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT [=y]</span><br><span class="line">Type  : bool</span><br><span class="line">Defined at lib/Kconfig.debug:258</span><br><span class="line">  Prompt: Rely on the toolchain&#x27;s implicit default DWARF version</span><br><span class="line">  Depends on: &lt;choice&gt; &amp;&amp; (!CC_IS_CLANG [=n] || AS_IS_LLVM [=n] || CLANG_VERSION [=0]&lt;140000 || AS_IS_GNU [=y] &amp;&amp; \</span><br><span class="line">AS_VERSION [=23502]&gt;=23502 &amp;&amp; AS_HAS_NON_CONST_LEB128 [=y])</span><br><span class="line">  Location:</span><br><span class="line">   -&gt; Kernel hacking</span><br><span class="line">     -&gt; Compile-time checks and compiler options</span><br><span class="line">       -&gt; Debug information (&lt;choice&gt; [=y])</span><br><span class="line">         -&gt; Rely on the toolchain&#x27;s implicit default DWARF version (DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT [=y])</span><br></pre></td></tr></table></figure>

<h1 id="启动GDB-Server"><a href="#启动GDB-Server" class="headerlink" title="启动GDB Server"></a>启动GDB Server</h1><p>假设我们基于X86架构调试，那么编译出的内核镜像通常是<strong>bzImage</strong>，我们可以尝试使用如下命令启动内核，因为并没有指定根文件系统，所以内核会在挂载root目录时panic。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 -nographic -kernel <span class="built_in">arch</span>/x86_64/boot/bzImage -append <span class="string">&#x27;console=ttyS0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>要启动QEMU内置的GDB Server，我们需要使用2个额外的参数</p>
<ul>
<li><code>-s</code>: Do not start CPU at startup</li>
<li><code>-S</code>: Open a gdbserver on TCP port 1234</li>
</ul>
<p>第一个参数的目的是让我们能够在CPU启动之前连接GDB Server，而第二个参数则是启动GDB Server。</p>
<p>此外，我们还需要添加一个内核cmdline参数<code>nokaslr</code>来关闭内核地址随机化，否则我们打断点的地址与实际执行的地址将不一致，从而导致断点失效。</p>
<p>于是，最终的命令为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 -nographic -s -S -kernel <span class="built_in">arch</span>/x86_64/boot/bzImage -append <span class="string">&#x27;console=ttyS0 nokaslr&#x27;</span></span><br></pre></td></tr></table></figure>

<p>执行命令后，我们会发现QEMU没有任何输出，因为此时虚拟机的CPU还未启动，接下来，我们将在GDB中完成后续工作。</p>
<h1 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h1><p>在内核源码根目录执行<code>gdb</code>命令进入GDB shell。</p>
<p>首先连接到QEMU的GDB Server，默认端口是<code>1234</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) file vmlinux</span><br><span class="line">(gdb) add-auto-load-safe-path $(pwd)</span><br><span class="line">(gdb) target remote localhost:1234</span><br></pre></td></tr></table></figure>

<p>然后我们设置断点，以<code>start_kernel</code>函数为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) break start_kernel</span><br></pre></td></tr></table></figure>

<p>最后，我们通过GDB控制QEMU继续执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) continue</span><br></pre></td></tr></table></figure>

<p>我们将看到QEMU继续执行，并在<code>start_kernel</code>处停下来，等待GDB的命令。之后的调试方式与常规用户态的调试大同小异。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://stackoverflow.com/questions/11408041/how-to-debug-the-linux-kernel-with-gdb-and-qemu?_gl=1*1x1uq6h*_ga*MjA1NzM2MTc3LjE2NTUzNjY3NTA.*_ga_S812YQPLT2*MTY2NDE4MzI0NS40LjEuMTY2NDE4MzMxMS4wLjAuMA">How to debug the Linux kernel with GDB and QEMU?</a></p>
]]></content>
      <categories>
        <category>Kernel</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>kernel</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>在Qemu中虚拟化固态硬盘</title>
    <url>/2023/01/30/emulate-ssd-in-qemu.html</url>
    <content><![CDATA[<blockquote>
<p>Qemu虚拟机中的磁盘通常都是以文件形式存储在宿主机上，如<code>qcow2</code>，理论上虚拟磁盘的类型并不重要。但有时，虚拟机中的程序会主动检测当前使用的磁盘类型，如<code>trim</code>，于是就需要我们明确指定虚拟磁盘是机械硬盘，还是固态硬盘，本文将介绍如何在Qemu中完成配置。</p>
</blockquote>
<span id="more"></span>

<p>目前主流的固态硬盘有两种，使用<code>PCIe</code>总线的<code>NVMe</code>固态，和使用<code>SATA/SCSI</code>总线的固态，下面将分别针对不同场景对两种模拟固态的配置方法进行介绍。</p>
<h1 id="模拟NVMe固态"><a href="#模拟NVMe固态" class="headerlink" title="模拟NVMe固态"></a>模拟NVMe固态</h1><p>在Qemu中，NVMe是一个独立的设备类型，所以只需要将硬盘的设备类型指定为NVMe即可。</p>
<div class="tabs" id="qemu_nvme"><ul class="nav-tabs"><li class="tab active"><a href="#qemu_nvme-1">Qemu command line</a></li><li class="tab"><a href="#qemu_nvme-2">Libvirt XML</a></li><li class="tab"><a href="#qemu_nvme-3">virt-install</a></li></ul><div class="tab-content"><div class="tab-pane active" id="qemu_nvme-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-drive file=/path/to/nvme1.img,<span class="keyword">if</span>=none,<span class="built_in">id</span>=NVME1 \</span><br><span class="line">-device nvme,drive=NVME1,serial=nvme-1</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="qemu_nvme-2"><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">qemu:commandline</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-drive&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;file=/path/to/nvme1.img,format=raw,if=none,id=NVME1&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-device&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;nvme,drive=NVME1,serial=nvme-1&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">qemu:commandline</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="qemu_nvme-3"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--qemu-commandline=<span class="string">&#x27;-drive file=/path/to/nvme1.img,format=raw,if=none,id=NVME1&#x27;</span></span><br><span class="line">--qemu-commandline=<span class="string">&#x27;-device nvme,drive=NVME1,serial=nvme-1&#x27;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="模拟SATA固态"><a href="#模拟SATA固态" class="headerlink" title="模拟SATA固态"></a>模拟SATA固态</h1><p>由于SATA&#x2F;SCSI总线既可以连接机械硬盘，也可以连接固态硬盘，所以我们需要设置总线上设备的属性<code>rotation speed</code>来进行区分。当设置其为<code>1</code>时，表示该设备为固态硬盘。</p>
<p>要设置SATA&#x2F;SCSI总线上的设备属性，我们必须要找到其ID，比如<code>sata0-0-0</code>或者<code>scsi0-0-0-0</code>，可以使用以下命令查询。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virsh qemu-monitor-command --hmp 1 <span class="string">&quot;info qtree&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev: scsi-hd, id &quot;scsi0-0-0-0&quot;</span><br><span class="line">  drive = &quot;drive-scsi0-0-0-0&quot;</span><br><span class="line">  logical_block_size = 512 (0x200)</span><br><span class="line">  physical_block_size = 512 (0x200)</span><br><span class="line">  min_io_size = 0 (0x0)</span><br><span class="line">  opt_io_size = 0 (0x0)</span><br><span class="line">  discard_granularity = 4096 (0x1000)</span><br><span class="line">  write-cache = &quot;on&quot;</span><br><span class="line">  share-rw = false</span><br><span class="line">  rerror = &quot;auto&quot;</span><br><span class="line">  werror = &quot;auto&quot;</span><br><span class="line">  ver = &quot;2.5+&quot;</span><br><span class="line">  serial = &quot;&quot;</span><br><span class="line">  vendor = &quot;QEMU&quot;</span><br><span class="line">  product = &quot;QEMU HARDDISK&quot;</span><br><span class="line">  device_id = &quot;drive-scsi0-0-0-0&quot;</span><br><span class="line">  removable = false</span><br><span class="line">  dpofua = false</span><br><span class="line">  wwn = 0 (0x0)</span><br><span class="line">  port_wwn = 0 (0x0)</span><br><span class="line">  port_index = 0 (0x0)</span><br><span class="line">  max_unmap_size = 1073741824 (0x40000000)</span><br><span class="line">  max_io_size = 2147483647 (0x7fffffff)</span><br><span class="line">  rotation_rate = 1 (0x1)</span><br><span class="line">  scsi_version = 5 (0x5)</span><br><span class="line">  cyls = 16383 (0x3fff)</span><br><span class="line">  heads = 16 (0x10)</span><br><span class="line">  secs = 63 (0x3f)</span><br><span class="line">  channel = 0 (0x0)</span><br><span class="line">  scsi-id = 0 (0x0)</span><br><span class="line">  lun = 0 (0x0)</span><br></pre></td></tr></table></figure>

<p>得到ID之后就可以进行设置了。</p>
<div class="tabs" id="qemu_sata"><ul class="nav-tabs"><li class="tab active"><a href="#qemu_sata-1">Qemu command line</a></li><li class="tab"><a href="#qemu_sata-2">Libvirt XML</a></li><li class="tab"><a href="#qemu_sata-3">virt-install</a></li></ul><div class="tab-content"><div class="tab-pane active" id="qemu_sata-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-<span class="built_in">set</span> device.scsi0-0-0-0.rotation_rate=1</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="qemu_sata-2"><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">qemu:commandline</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;-set&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qemu:arg</span> <span class="attr">value</span>=<span class="string">&#x27;device.scsi0-0-0-0.rotation_rate=1&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">qemu:commandline</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="qemu_sata-3"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--qemu-commandline=<span class="string">&#x27;-set device.scsi0-0-0-0.rotation_rate=1&#x27;</span></span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.christophersmart.com/2019/12/18/kvm-guests-with-emulated-ssd-and-nvme-drives/">KVM guests with emulated SSD and NVMe drives</a><br><a href="https://libvirt.org/kbase/qemu-passthrough-security.html">QEMU command-line passthrough</a></p>
]]></content>
      <categories>
        <category>How-To</category>
        <category>Qemu</category>
      </categories>
      <tags>
        <tag>qemu</tag>
        <tag>ssd</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Syncthing和FileRun搭建私人云盘</title>
    <url>/2023/03/07/setup-personal-cloud-drive-with-syncthing-and-filerun.html</url>
    <content><![CDATA[<blockquote>
<p>入手NAS之后，我一直使用NextCloud + IPv6远程管理其中的文件，以及同步备份手机和电脑的数据。由于在北京租房，所以NAS被放在了父母家，这就导致当想要下载一些大文件时，即使是直连，也需要等很久。因而打算设计一个新的架构，用来解决这个问题。</p>
</blockquote>
<span id="more"></span>

<h1 id="问题和诉求"><a href="#问题和诉求" class="headerlink" title="问题和诉求"></a>问题和诉求</h1><p>目前的问题主要有3个：</p>
<ol>
<li>使用IPv6 + DDNS远程访问NAS并不稳定，有时遇到IP变换，或者所在网络不支持IPv6，数据便无法访问。</li>
<li>虽然NAS上使用ZFS组了软RAID1，但毕竟两块硬盘是在同一台机器上，一旦机器损坏，可能丢失所有数据。</li>
<li>有时，我会通过终端直接下载或复制一些文件到NAS中，但NextCloud并不能立即识别那些文件，必须手动更新数据库。</li>
</ol>
<p>基于以上问题，我明确了下面3个诉求：</p>
<ol>
<li>我需要在本地也保留一份完整的数据。</li>
<li>文件管理程序必须能够自动识别新文件。</li>
<li>本地数据和NAS中的数据必须保持一致.</li>
</ol>
<h1 id="新方案"><a href="#新方案" class="headerlink" title="新方案"></a>新方案</h1><p>经过搜索，我发现有两款软件可以满足我的需求：</p>
<ul>
<li><a href="https://filerun.com/">FileRun</a>：基于LAMP架构的Web文件管理器，可实时显示文件变化</li>
<li><a href="https://syncthing.net/">Syncthing</a>：集群文件存储工具，可在多台机器上同步文件</li>
</ul>
<h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="FileRun"><a href="#FileRun" class="headerlink" title="FileRun"></a>FileRun</h2><p>与NextCloud一样，FileRun也是一个基于LAMP架构的项目，因此安装部署的步骤相似。不同之处在于，它不需要重新扫描，就可以立即识别新文件，这大大提高了文件管理的灵活性。</p>
<ol>
<li><p>安装Apache、MySQL和PHP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apache2 mariadb-server php libapache2-mod-php php-mysql php-mbstring php-zip php-curl php-gd php-ldap php-xml php-imagick</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置数据库，注意修改用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line">CREATE DATABASE filerun;</span><br><span class="line">CREATE USER &#x27;filerun&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;YOUR-DB-PASSWORD&#x27;;</span><br><span class="line">GRANT ALL ON filerun.* TO &#x27;filerun&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置PHP</p>
<ul>
<li>安装ionCube  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz</span><br><span class="line">sudo tar -xzf ioncube_loaders_lin_x86-64.tar.gz -C /usr/lib/php</span><br><span class="line">sudo vim /etc/php/7.4/apache2/conf.d/00-ioncube.ini</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">zend_extension = /usr/lib/php/ioncube/ioncube_loader_lin_7.4.so</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建基础配置  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/php/7.4/apache2/conf.d/filerun.ini</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">expose_php              = Off  </span><br><span class="line">error_reporting         = E_ALL &amp; ~E_NOTICE  </span><br><span class="line">display_errors          = Off  </span><br><span class="line">display_startup_errors  = Off  </span><br><span class="line">log_errors              = On  </span><br><span class="line">ignore_repeated_errors  = Off  </span><br><span class="line">allow_url_fopen         = On  </span><br><span class="line">allow_url_include       = Off  </span><br><span class="line">variables_order         = &quot;GPCS&quot;  </span><br><span class="line">allow_webdav_methods    = On  </span><br><span class="line">memory_limit            = 128M  </span><br><span class="line">max_execution_time      = 300  </span><br><span class="line">output_buffering        = Off  </span><br><span class="line">output_handler          = &quot;&quot;  </span><br><span class="line">zlib.output_compression = Off  </span><br><span class="line">zlib.output_handler     = &quot;&quot;  </span><br><span class="line">safe_mode               = Off  </span><br><span class="line">register_globals        = Off  </span><br><span class="line">magic_quotes_gpc        = Off  </span><br><span class="line">upload_max_filesize     = 20M  </span><br><span class="line">post_max_size           = 20M  </span><br><span class="line">enable_dl               = Off  </span><br><span class="line">disable_functions       = &quot;&quot;  </span><br><span class="line">disable_classes         = &quot;&quot;  </span><br><span class="line">session.save_handler     = files  </span><br><span class="line">session.use_cookies      = 1  </span><br><span class="line">session.use_only_cookies = 1  </span><br><span class="line">session.auto_start       = 0  </span><br><span class="line">session.cookie_lifetime  = 0  </span><br><span class="line">session.cookie_httponly  = 1  </span><br><span class="line">date.timezone            = &quot;UTC&quot; </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>配置Apache</p>
 <div class="tabs" id="apache_config"><ul class="nav-tabs"><li class="tab active"><a href="#apache_config-1">http</a></li><li class="tab"><a href="#apache_config-2">https</a></li></ul><div class="tab-content"><div class="tab-pane active" id="apache_config-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apache2/sites-available/filerun.conf</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">        ServerAdmin webmaster@localhost</span><br><span class="line">        DocumentRoot /var/www/filerun</span><br><span class="line"></span><br><span class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">sudo a2ensite filerun.conf</span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="apache_config-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out filerun.crt -keyout filerun.key</span><br><span class="line">sudo mv filerun.crt /etc/ssl/certs/</span><br><span class="line">sudo mv filerun.key /etc/ssl/private/</span><br><span class="line"></span><br><span class="line">sudo a2enmod rewrite headers env dir mime ssl</span><br><span class="line">sudo vim /etc/apache2/sites-available/filerun.conf</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">&lt;IfModule mod_ssl.c&gt;</span><br><span class="line">        &lt;VirtualHost _default_:443&gt;</span><br><span class="line">                ServerName nas.colorfulshark.net</span><br><span class="line"></span><br><span class="line">                &lt;IfModule mod_headers.c&gt;</span><br><span class="line">                        Header always set Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;</span><br><span class="line">                &lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">                DocumentRoot /var/www/filerun</span><br><span class="line"></span><br><span class="line">                ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">                CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line"></span><br><span class="line">                SSLEngine on</span><br><span class="line"></span><br><span class="line">                SSLCertificateFile      /etc/ssl/certs/filerun.crt</span><br><span class="line">                SSLCertificateKeyFile /etc/ssl/private/filerun.key</span><br><span class="line"></span><br><span class="line">                &lt;FilesMatch &quot;\.(cgi|shtml|phtml|php)$&quot;&gt;</span><br><span class="line">                                SSLOptions +StdEnvVars</span><br><span class="line">                &lt;/FilesMatch&gt;</span><br><span class="line">                &lt;Directory /usr/lib/cgi-bin&gt;</span><br><span class="line">                                SSLOptions +StdEnvVars</span><br><span class="line">                &lt;/Directory&gt;</span><br><span class="line">        &lt;/VirtualHost&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">sudo a2ensite filerun.conf</span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></div></div></div>
</li>
<li><p>安装FileRun</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /var/www</span><br><span class="line">sudo mkdir filerun &amp;&amp; cd filerun</span><br><span class="line">sudo wget -O FileRun.zip https://filerun.com/download-latest-ubuntu-20</span><br><span class="line">sudo unzip FileRun.zip</span><br><span class="line">sudo chown -R www-data:www-data /var/www/filerun</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置FileRun</p>
<p>在浏览器中打开<a href="http://ip/">http://IP</a>（http）或者<a href="https://ip/">https://IP</a>（https），即可打开FileRun的配置向导，在页面中完成配置即可。</p>
</li>
</ol>
<h2 id="Syncthing"><a href="#Syncthing" class="headerlink" title="Syncthing"></a>Syncthing</h2><p>Syncthing的功能非常简单：在两台机器之间同步目录。但同时，它又是目前我所知道的最强大的同步工具。</p>
<p>当我们想要在两台机器上同步数据时，往往最麻烦的地方不是如何配置同步策略，减少冲突，而是如何让两台机器连通。如果是局域网，我们可能只需要手动设置IP；但到了广域网，想要连通两台机器通常是非常困难的，往往需要一台具备公网IP的中转服务器作为桥梁。而Syncthing则如魔法般，把上面所说的步骤全部抹除了，两台机器在弹指一挥间，就自动完成了连接，无论它们身处何方。</p>
<p>那么Syncthing是如何做到的呢？这其实得益于它强大的网络探测功能。根据两台设备之间连接方式的不同，Syncthing会做如下处理：</p>
<ul>
<li>局域网：自动探测对方设备，IP互换，完成连接，此时不需要设备连接互联网。</li>
<li>互联网：<ul>
<li>具备公网IP：只要任意一台机器具备且22000端口开放，两台机器将使用公网IP直连。</li>
<li>NAT网络：尝试使用UDP进行打洞，实现内网穿透，任意一台机器穿透成功，即可直连。</li>
<li>以上方案均失败：使用Relay桥接服务器，这些服务器通常是公用的，因此速度较慢。</li>
</ul>
</li>
</ul>
<p>目前国内的运营商大多不再提供公网IPv4地址，取而代之的是公网IPv6地址。经过测试，使用IPv6并且开放22000端口后，是可以顺利连接的。</p>
<p>即使没有IPv6，Syncthing也会尝试UDP打洞，经过测试，成功率还是非常高的，即使是公司的WiFi网络，也能成功实现公网直连。</p>
<ol>
<li><p>配置Syncthing源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -o /usr/share/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg</span><br><span class="line">echo &quot;deb [signed-by=/usr/share/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable&quot; | sudo tee /etc/apt/sources.list.d/syncthing.list</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Syncthing</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install syncthing</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Syncthing</p>
<p>由于FileRun是使用<code>www-data</code>账户运行的，因此我们也使用该账户运行Synching，从而避免文件权限的问题。同时，将其监听IP改为0.0.0.0，这样就可以通过局域网IP访问。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /var/www/.config</span><br><span class="line">sudo chown www-data:www-data /var/www/.config</span><br><span class="line">sudo systemctl enable syncthing@www-data</span><br><span class="line">sudo systemctl start syncthing@www-data</span><br><span class="line"></span><br><span class="line">vim /var/www/.config/syncthing/config.xml</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">&lt;address&gt;127.0.0.1:8384&lt;/address&gt; =&gt; &lt;address&gt;0.0.0.0:8384&lt;/address&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>然后就可以通过<a href="http://ip:8384/">http://IP:8384</a>访问Syncthing的管理页面了。</p>
</li>
</ol>
<p>要用好Syncthing，需要深入理解它的同步逻辑。在Syncthing中，每一台机器对应一个<strong>Device ID</strong>，同步的最小单位是<strong>Folder</strong>，使用<strong>Folder ID</strong>标识，因此一个具体的<strong>Folder</strong>可以标定为<code>[Device ID]:[Folder ID]</code>。</p>
<p>Syncthing会保证你的设备ID是独一无二的，要连接两台机器，需要各自添加对方的ID，只有一方添加ID是不会建立连接的，所以ID并不需要保密。</p>
<p>若要在2台设备之间同步目录，首先要建立设备间的连接，然后在两台设备上各自创建共享目录，并共享给对方。</p>
<p>创建共享目录时，可以参考以下建议，以达到比较好的效果：</p>
<ol>
<li>启用Trash Can File Versioning：这可以防止文件在一台机器上被误删除后，其它机器也跟着删除。自动清理时间可以设置为30天。</li>
<li>Ignore Patterns设置为<code>.*</code>：这可以忽略隐藏文件，因为这些文件通常是临时文件。</li>
<li>Full Rescan Interval设置为0：这在安卓手机上非常实用，可以节约电量，因为手机在切换网络时，Syncthing会重启，而这会强制重新扫描。</li>
<li>启用Ignore Permissions：我们通常不太关心文件权限的变化，忽略它也可以降低同步频率。</li>
</ol>
<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>两台主同步设备拥有全部的文件，互为备份，而手机则选择性地与之同步，最终实现数据的异地防灾。</p>
<img src="/2023/03/07/setup-personal-cloud-drive-with-syncthing-and-filerun/syncthing.png" class="">

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.filerun.com/filerun_install_guide">FileRun Server Install Guides</a></p>
<p><a href="http://blog.filerun.com/how-to-install-filerun-on-ubuntu-20/">How to install FileRun on Ubuntu 20</a></p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-20-04">How To Install Linux, Apache, MySQL, PHP (LAMP) stack on Ubuntu 20.04</a></p>
<p><a href="https://docs.filerun.com/webdav">Accessing via WebDAV</a></p>
<p><a href="https://apt.syncthing.net/">https://apt.syncthing.net/</a></p>
<p><a href="https://docs.syncthing.net/intro/getting-started.html#getting-started">Syncthing Getting Started</a></p>
]]></content>
      <categories>
        <category>Geek</category>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>nas</tag>
        <tag>syncthing</tag>
        <tag>filerun</tag>
      </tags>
  </entry>
  <entry>
    <title>在PVE中安装群晖DSM系统</title>
    <url>/2023/03/10/install-dsm-on-pve.html</url>
    <content><![CDATA[<blockquote>
<p>其实我一直对群晖的系统不太感冒，一方面它是闭源的，我无法得知它里面有多少未修复的漏洞以及后门；另一方面，即使硬件已经有了超高的溢价，群晖的套件也没有想象中那么好用，App总感觉就是半成品，系统与数据混在一起，这些因素决定了我注定不会是群晖的受众。但有钱能使鬼推磨，网心云发布了基于群晖的PCDN业务，并且看起来收益要优于Docker业务，于是，我也开始折腾起黑群晖了。</p>
</blockquote>
<span id="more"></span>

<h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><p>在PVE中创建一个标准的虚拟机，注意以下几点：</p>
<ol>
<li>在第二步<strong>OS</strong>中，选择<code>Do not use any media</code>。</li>
<li>在第4步<strong>Disks</strong>中，删除所有硬盘。</li>
<li>第5步<strong>CPU</strong>中，Type选择<code>host</code>。</li>
<li>第6步<strong>Memory</strong>中，至少设置4GB内存。</li>
</ol>
<h1 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h1><p>目前黑群晖主要是使用RedPill项目组开发的<a href="https://github.com/RedPill-TTG/redpill-load">RPL(RedPill Loader)</a>，放在以前，我们可能需要手动编译，还得设置正确的VID、PID、MAC等。但得益于<a href="https://github.com/fbelavenuto/arpl">ARPL(Automated Redpill Loader)</a>项目，现在只要在menuconfig中简单设置几个选项，就可以得到专用的Loader，并且能够兼容最新的DSM系统。</p>
<p>ARPL本质上就是一个使用Ramfs的Linux系统，它里面配置了编译RPL所需的最小软件集。当我们启动ARPL的镜像后，就可以通过终端或者Web配置编译RPL，并且它会自动将RPL写入分区，并支持后续启动工作。</p>
<p>因此，安装引导主要包括以下几个步骤：</p>
<ol>
<li><p>下载<a href="https://github.com/fbelavenuto/arpl/releases">ARPL镜像</a>并解压，例如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fbelavenuto/arpl/releases/download/v1.1-beta2a/arpl-1.1-beta2a.img.zip</span><br><span class="line"></span><br><span class="line">unzip arpl-1.1-beta2a.img.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>将ARPL以USB存储设备的方式挂载到虚拟机</p>
<p>假设你的虚拟机编号是<code>200</code>，在第一行添加如下内容，注意<code>file=</code>后面需要使用ARPL镜像的绝对路径。</p>
<div class="tabs" id="配置arpl引导文件"><ul class="nav-tabs"><li class="tab active"><a href="#配置arpl引导文件-1">使用镜像文件</a></li><li class="tab"><a href="#配置arpl引导文件-2">使用LVM分区</a></li></ul><div class="tab-content"><div class="tab-pane active" id="配置arpl引导文件-1"><p>假设我们将解压出的<code>arpl.img</code>放在<code>/root/arpl.img</code>，那么需要做如下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv arpl.img /root/</span><br><span class="line"></span><br><span class="line">vim /etc/pve/qemu-server/200.conf</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">args: -device &#x27;qemu-xhci,addr=0x18&#x27; -drive &#x27;id=synoboot,file=/root/arpl.img,if=none,format=raw&#x27; -device &#x27;usb-storage,id=synoboot,drive=synoboot,bootindex=1&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="配置arpl引导文件-2"><p>假设我们要使用LVM分区，那么需要做如下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新的LVM分区，假设你的VG是ssd，新的分区名为synoboot，新分区大小为1GiB</span></span><br><span class="line">lvcreate -L 1GB -n synoboot ssd</span><br><span class="line">dd if=./arpl.img of=/dev/ssd/synoboot</span><br><span class="line"></span><br><span class="line">vim /etc/pve/qemu-server/200.conf</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line">args: -device &#x27;qemu-xhci,addr=0x18&#x27; -drive &#x27;id=synoboot,file=/dev/ssd/synoboot,if=none,format=raw&#x27; -device &#x27;usb-storage,id=synoboot,drive=synoboot,bootindex=1&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>
</li>
<li><p>启动ARPL，配置相关选项，并启动系统</p>
<div class="tabs" id="安装arpl流程"><ul class="nav-tabs"><li class="tab active"><a href="#安装arpl流程-1">1. 启动配置界面</a></li><li class="tab"><a href="#安装arpl流程-2">2. 选择机型</a></li><li class="tab"><a href="#安装arpl流程-3">3. 选择版本</a></li><li class="tab"><a href="#安装arpl流程-4">4. 编译</a></li><li class="tab"><a href="#安装arpl流程-5">5. 启动</a></li></ul><div class="tab-content"><div class="tab-pane active" id="安装arpl流程-1"><p>在终端输入<code>menu.sh</code>启动配置界面。</p>
<img src="/2023/03/10/install-dsm-on-pve/first-screen.png" class=""></div><div class="tab-pane" id="安装arpl流程-2"><p>进入<code>Choose a model</code>选项，选择所需机型，通常选择<code>DS918+</code>。</p>
<img src="/2023/03/10/install-dsm-on-pve/ttyd.png" class="">

<img src="/2023/03/10/install-dsm-on-pve/model.png" class=""></div><div class="tab-pane" id="安装arpl流程-3"><p>直接选择最新版即可。</p>
<img src="/2023/03/10/install-dsm-on-pve/buildnumber.png" class=""></div><div class="tab-pane" id="安装arpl流程-4"><p>选择<code>Build</code>，开始编译ARPL。</p>
<img src="/2023/03/10/install-dsm-on-pve/making.png" class=""></div><div class="tab-pane" id="安装arpl流程-5"><p>选择<code>Boot</code>，启动引导程序。</p>
<img src="/2023/03/10/install-dsm-on-pve/DSMboot.png" class=""></div></div></div></li>
</ol>
<h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1><p>记录下终端上显示的IP，如<a href="192.168.0.2">192.168.0.2</a>，接着在浏览器中输入</p>
<p><a href="http://192.168.0.2:5000/">http://192.168.0.2:5000</a></p>
<p>即可进入DSM的安装界面。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/fbelavenuto/arpl/">ARPL Github</a></p>
<p><a href="https://help.onethingcloud.com/caa9/a0fe/nasxx">纳思小星产品介绍（网心云NAS版）</a></p>
<p><a href="https://docs.qq.com/doc/DQVJpbEVGZXV0anNa">NAS迅雷-群晖内测版下载地址和安装教程</a></p>
]]></content>
      <categories>
        <category>Geek</category>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>pve</tag>
        <tag>synology</tag>
      </tags>
  </entry>
  <entry>
    <title>在群晖中挂载NFS文件系统</title>
    <url>/2024/01/21/mount-nfs-in-synology.html</url>
    <content><![CDATA[<blockquote>
<p>玩网心云的时候，在PVE中安装了一个黑群晖，但是并没有使用它管理任何数据，一方面盗版的东西可能不稳定，另一方面不想被某个生态捆绑。最重要的一点：我始终都是使用ZFS，而群晖并不支持ZFS。碰巧最近使用samba服务时遇到一些问题，因此打算研究一下能否把这个黑群晖利用起来。</p>
</blockquote>
<span id="more"></span>

<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>由于我所有的数据都是存储在PVE的ZFS中，因此我不能把硬盘直接透传给群晖，要想让群晖访问我现有的数据，主要有3个思路：</p>
<ul>
<li><strong>VirtFS</strong>: 这是一种基于virtio的文件系统，可以将host中的目录映射为guest中的块设备，用于挂载。</li>
<li><strong>NFS</strong>: Linux上的网络文件系统，通过网络传输数据。</li>
<li><strong>SMB</strong>: Windows上用于网络共享的传输协议，通过网络传输数据。</li>
</ul>
<p>理论上VirtFS拥有最好的性能，但是群晖中并没有官方支持，需要加载第三方驱动，并且需要在命令行中配置，稳定性是个未知数。</p>
<p>SMB在Linux上虽然已经有很好的支持，但配置相对繁琐，尤其是那套独立的用户管理。</p>
<p>而NFS相对来说配置较为简单，在群晖系统中也有良好的支持，因此我最终选择它作为群晖和PVE之间的桥梁。</p>
<h1 id="NFS服务端配置"><a href="#NFS服务端配置" class="headerlink" title="NFS服务端配置"></a>NFS服务端配置</h1><p>NFS服务端主要有以下几个选项：</p>
<ul>
<li><strong>rw</strong>: 允许读写操作，否则文件系统将变为只读。</li>
<li><strong>async</strong>: 在写入完成之前就返回，可以提高性能，但是可能导致文件损坏。</li>
<li><strong>sync</strong>: 在写入完成之后才返回，可以保障写入按顺序执行，但会降低性能。</li>
<li><strong>no_subtree_check</strong>: 只检查被访问文件的权限，忽略子文件的权限检查。</li>
<li><strong>root_squash</strong>: 将client的root用户和root组映射为server的匿名用户和匿名组，从而限制client的文件访问权限。</li>
<li><strong>no_root_squash</strong>: client的root用户和root组将映射为server的root用户和root组。</li>
<li><strong>all_squash</strong>: 将client所有的用户和组都映射为server的匿名映射和匿名组。这样client上不同用户的访问可以被映射为同一个用户。</li>
<li><strong>anonuid&#x2F;anongid</strong>: 设置匿名用户所对应的uid和gid。需要与<strong>root_squash</strong>或<strong>all_squash</strong>组合使用。</li>
</ul>
<p>为了不破坏ZFS中原有的文件owner信息，我需要使用<strong>all_squash</strong>配合<strong>anonuid&#x2F;anongid</strong>，将群晖中的用户映射为PVE中的www-data用户。因此配置为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/exports</span></span><br><span class="line">/mnt  *(rw,<span class="built_in">sync</span>,all_squash,anonuid=33,anongid=33)</span><br></pre></td></tr></table></figure>

<h1 id="群晖配置"><a href="#群晖配置" class="headerlink" title="群晖配置"></a>群晖配置</h1><h2 id="创建一个新的共享文件夹"><a href="#创建一个新的共享文件夹" class="headerlink" title="创建一个新的共享文件夹"></a>创建一个新的共享文件夹</h2><p>由于我们将要挂载的文件系统不一定兼容群晖内置的权限模型，因此需要在群晖中创建一个原生的目录，作为包含挂载点容器，后续所有的操作和共享都基于此目录。</p>
<p><strong>控制面板-&gt;共享文件夹-&gt;新增-&gt;创建共享文件夹</strong></p>
<img src="/2024/01/21/mount-nfs-in-synology/create_shared_folder.jpg" class="">

<h2 id="挂载NFS"><a href="#挂载NFS" class="headerlink" title="挂载NFS"></a>挂载NFS</h2><p><strong>File Station-&gt;工具-&gt;装载远程文件夹-&gt;NFS共享文件夹</strong></p>
<img src="/2024/01/21/mount-nfs-in-synology/mount_nfs_1.jpg" class="">
<img src="/2024/01/21/mount-nfs-in-synology/mount_nfs_2.jpg" class="">

<h2 id="设置App权限"><a href="#设置App权限" class="headerlink" title="设置App权限"></a>设置App权限</h2><p>在群晖中，需要为App配置目录的权限后，App才能访问。这里以Syncthing为例。</p>
<p><strong>File Station-&gt;右键共享目录-&gt;属性-&gt;权限-&gt;新增</strong></p>
<p>将App所对应的用户添加进去，并授予读写权限。</p>
<img src="/2024/01/21/mount-nfs-in-synology/app_permission.jpg" class="">

<h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><p>由于NFS的性能主要受限于网络性能，因此这里主要测试PVE和群晖间的网络吞吐，测试工具为iperf3，网卡驱动为virtio。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server: iperf3 -s</span><br><span class="line">client: iperf3 -c &lt;SERVER_IP&gt;</span><br></pre></td></tr></table></figure>

<p>从结果上来看，TCP吞吐接近20 Gbits&#x2F;sec，已经远远超过大多数硬盘的读写性能。</p>
<img src="/2024/01/21/mount-nfs-in-synology/iperf_test.jpg" class="">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>利用这套方案，我既可以享受群晖套件所带来的便利，也可以将数据管理权掌握在自己手中，无需担心黑群晖系统崩溃后导致的数据丢失问题。</p>
]]></content>
      <categories>
        <category>Geek</category>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>pve</tag>
        <tag>synology</tag>
      </tags>
  </entry>
  <entry>
    <title>使用systemd运行hexo服务</title>
    <url>/2024/01/29/run-hexo-server-as-systemd-service.html</url>
    <content><![CDATA[<blockquote>
<p>通常hexo被用于创建静态站点，然后部署在GitHub等支持静态网站托管的平台。但hexo本身也支持启动一个简单的http server，用于在浏览器中实时显示编辑的内容。如果我们能让这个服务运行在后台，一方面无需每次手动拉起，另一方面可以当作一个小站点使用，并且支持实时更新。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>如果要让Node.js应用在开机后以root用户启动，我们需要把Node.js安装到根目录，而不是家目录。这里以Debian为例，其它系统参可以参考<a href="https://nodejs.org/en/download/package-manager#debian-and-ubuntu-based-linux-distributions">Installing Node.js via package manager</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_current.x | sudo bash -</span><br><span class="line">sudo apt install -y nodejs</span><br></pre></td></tr></table></figure>

<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h1 id="创建systemd服务"><a href="#创建systemd服务" class="headerlink" title="创建systemd服务"></a>创建systemd服务</h1><p>创建<code>/lib/systemd/system/hexo.service</code>文件，将<code>/home/[yourdirectory]/blog</code>替换成hexo的根目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/home/[yourdirectory]/blog</span><br><span class="line">ExecStart=/bin/hexo server -p80</span><br><span class="line">Restart=always</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=syslog</span><br><span class="line">SyslogIdentifier=hexo</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">Environment=NODE_ENV=production</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h1 id="启动hexo服务"><a href="#启动hexo服务" class="headerlink" title="启动hexo服务"></a>启动hexo服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> hexo.service</span><br><span class="line">sudo systemctl start hexo.service</span><br><span class="line">sudo systemctl status hexo.service</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://chrisbergeron.com/2017/10/07/hexo_systemd_unit_file/">A systemD unit file for Hexo</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>hexo</tag>
        <tag>systemd</tag>
      </tags>
  </entry>
  <entry>
    <title>构建EDK2镜像并在QEMU启动</title>
    <url>/2023/08/29/build-and-boot-edk2-in-qemu.html</url>
    <content><![CDATA[<blockquote>
<p>从今天起，我将涉足一个新的领域：UEFI。目前UEFI已经逐渐从以X86为主的服务器PC领域，渗透到以ARM为主的终端领域。得益于其灵活的扩展性以及较低的开发门槛，以后越来越多的设备将使用它作为自身启动链的一个重要组成部分。由于UEFI只是一套标准，参照该标准有许多实现，其中最有名之一就是Intel主导开发的EDK2。因此我的学习之旅也会从它开始，今天主要介绍如何构建EDK2以及在QEMU上启动它。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>我们将以Debian12作为例子，其他Linux发行版请自行修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential git python3 uuid-dev nasm acpica-tools cscope clangd</span><br></pre></td></tr></table></figure>

<h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tianocore/edk2.git</span><br><span class="line"><span class="built_in">cd</span> edk2</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure>

<h1 id="构建EDK2"><a href="#构建EDK2" class="headerlink" title="构建EDK2"></a>构建EDK2</h1><p>EDK2支持多种平台和工具链，这里我们主要介绍QEMU平台上AARCH64和X86两个架构，并且使用CLANG和GCC两种工具链进行编译。</p>
<h2 id="构建EDK2工具集"><a href="#构建EDK2工具集" class="headerlink" title="构建EDK2工具集"></a>构建EDK2工具集</h2><p>EDK2源码中包含了一系列工具，用于在构建过程中进行链接打包等工作，因此我们需要先将这些工具构建出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> EDK_TOOLS_PATH=<span class="variable">$PWD</span>/BaseTools</span><br><span class="line"><span class="built_in">source</span> edksetup.sh</span><br><span class="line">make -C BaseTools</span><br></pre></td></tr></table></figure>

<h2 id="X86架构"><a href="#X86架构" class="headerlink" title="X86架构"></a>X86架构</h2><p>X86架构的QEMU固件所对应的Package是<code>OvmfPkg/OvmfPkgX64.dsc</code>。</p>
<ol>
<li><p><strong>使用GCC工具链</strong></p>
<p> 根据需要安装GCC工具链，比如我们现在需要安装X86版本的GCC，并设置prefix：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc</span><br><span class="line"><span class="built_in">export</span> GCC5_AARCH64_PREFIX=</span><br></pre></td></tr></table></figure>

<p> 构建EDK2</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> edksetup.sh</span><br><span class="line">build -a X64 -t GCC5 -p OvmfPkg/OvmfPkgX64.dsc -Y COMPILE_INFO -y BuildReport.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p> 编译出的固件在<code>Build/OvmfX64/DEBUG_GCC5</code>。</p>
</li>
<li><p><strong>使用CLANG工具链</strong></p>
<p> 由于clang原生支持交叉编译，因此可以直接安装：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install clang</span><br></pre></td></tr></table></figure>

<p> 构建EDK2</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> edksetup.sh</span><br><span class="line">build -a X64 -t CLANGDWARF -p OvmfPkg/OvmfPkgX64.dsc -Y COMPILE_INFO -y BuildReport.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p> 编译出的固件在<code>Build/OvmfX64/DEBUG_CLANGDWARF</code>。</p>
</li>
</ol>
<h2 id="AARCH64架构"><a href="#AARCH64架构" class="headerlink" title="AARCH64架构"></a>AARCH64架构</h2><p>AARCH64架构的QEMU固件所对应的Package是<code>ArmVirtPkg/ArmVirtQemu.dsc</code>。</p>
<ol>
<li><p><strong>使用GCC工具链</strong></p>
<p> 根据需要安装GCC工具链，比如我们现在需要安装AARCH64版本的GCC，并设置prefix：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc-aarch64-linux-gnu</span><br><span class="line"><span class="built_in">export</span> GCC5_AARCH64_PREFIX=aarch64-linux-gnu-</span><br></pre></td></tr></table></figure>

<p> 构建EDK2</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> edksetup.sh</span><br><span class="line">build -a AARCH64 -t GCC5 -p ArmVirtPkg/ArmVirtQemu.dsc -Y COMPILE_INFO -y BuildReport.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p> 编译出的固件在<code>Build/ArmVirtQemu-AARCH64/DEBUG_GCC5</code>。</p>
</li>
<li><p><strong>使用CLANG工具链</strong></p>
<p> 由于clang原生支持交叉编译，因此可以直接安装：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install clang llvm lld</span><br></pre></td></tr></table></figure>

<p> 构建EDK2</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> edksetup.sh</span><br><span class="line">build -a AARCH64 -t CLANGDWARF -p ArmVirtPkg/ArmVirtQemu.dsc -Y COMPILE_INFO -y BuildReport.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p> 编译出的固件在<code>Build/ArmVirtQemu-AARCH64/DEBUG_CLANGDWARF</code>。</p>
</li>
</ol>
<h1 id="在QEMU中启动"><a href="#在QEMU中启动" class="headerlink" title="在QEMU中启动"></a>在QEMU中启动</h1><p>启动所需的固件<code>OVMF_CODE.fd</code>和<code>OVMF_VARS.fd</code>在<code>&lt;固件目录&gt;/FV中</code>，这里以<code>Build/OvmfX64/DEBUG_GCC5/FV</code>和<code>Build/ArmVirtQemu-AARCH64/DEBUG_GCC5/FV</code>为例。</p>
<h2 id="X86架构-1"><a href="#X86架构-1" class="headerlink" title="X86架构"></a>X86架构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Build/OvmfX64/DEBUG_GCC5/FV</span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 -machine q35 -cpu qemu64 \</span><br><span class="line">  -drive <span class="keyword">if</span>=pflash,format=raw,unit=0,file=OVMF_CODE.fd,<span class="built_in">readonly</span>=on \</span><br><span class="line">  -drive <span class="keyword">if</span>=pflash,format=raw,unit=1,file=OVMF_VARS.fd \</span><br><span class="line">  -net none \</span><br><span class="line">  -nographic</span><br></pre></td></tr></table></figure>

<h2 id="AARCH64架构-1"><a href="#AARCH64架构-1" class="headerlink" title="AARCH64架构"></a>AARCH64架构</h2><p>AARCH64要求pflash的大小为64M，因此我们首先需要调整固件大小到64M：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Build/ArmVirtQemu-AARCH64/DEBUG_GCC5/FV</span><br><span class="line"></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=QEMU_EFI_64.fd bs=1M count=64</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=QEMU_VARS_64.fd bs=1M count=64</span><br><span class="line"></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=QEMU_EFI.fd of=QEMU_EFI_64.fd conv=notrunc</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=QEMU_VARS.fd of=QEMU_VARS_64.fd conv=notrunc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-aarch64 -machine virt -cpu cortex-a57 \</span><br><span class="line">  -drive <span class="keyword">if</span>=pflash,format=raw,unit=0,file=QEMU_EFI_64.fd,<span class="built_in">readonly</span>=on \</span><br><span class="line">  -drive <span class="keyword">if</span>=pflash,format=raw,unit=1,file=QEMU_VARS_64.fd \</span><br><span class="line">  -net none \</span><br><span class="line">  -nographic</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><a href="https://www.kraxel.org/blog/2022/05/edk2-virt-quickstart/">edk2 quickstart for virtualization</a></p>
</li>
<li><p><a href="https://wiki.osdev.org/EDK2">https://wiki.osdev.org/EDK2</a></p>
</li>
<li><p><a href="https://wiki.osdev.org/UEFI">https://wiki.osdev.org/UEFI</a></p>
</li>
<li><p><a href="https://github.com/tianocore/tianocore.github.io/wiki/How-to-run-OVMF">How to run OVMF</a></p>
</li>
<li><p><a href="https://lists.katacontainers.io/pipermail/kata-dev/2021-January/001647.html">Booting OVMF with -bios</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Bootloader</category>
      </categories>
      <tags>
        <tag>UEFI</tag>
        <tag>EDK2</tag>
      </tags>
  </entry>
  <entry>
    <title>iTop-4412配置内核开发环境</title>
    <url>/2024/08/15/itop-4412-setup-kernel-dev-env.html</url>
    <content><![CDATA[<blockquote>
<p>虽然理论上开发板拿过来就可以使用，但如果正确配置环境，可以大大提高开发效率，事半功倍。</p>
</blockquote>
<span id="more"></span>

<h1 id="搭建内核编译环境"><a href="#搭建内核编译环境" class="headerlink" title="搭建内核编译环境"></a>搭建内核编译环境</h1><ol>
<li><p>使能32位程序支持</p>
<p> 因为交叉编译器为32位程序，因此需要安装32位动态库。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt install lib32z1 lib32ncurses6 lib32stdc++6</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装交叉编译器</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Download prebuilt toolchain</span></span><br><span class="line">wget https://github.com/colorfulshark/arm-2009q3/archive/refs/heads/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line"><span class="built_in">mv</span> arm-2009q3-master arm-2009q3</span><br><span class="line"></span><br><span class="line"><span class="comment"># install to target directory</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /usr/local/arm</span><br><span class="line">sudo <span class="built_in">mv</span> arm-2009q3 /usr/local/arm/</span><br></pre></td></tr></table></figure></li>
<li><p>克隆内核源码</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/colorfulshark/iTop4412_Kernel_3.0.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译内核</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setup default config</span></span><br><span class="line"><span class="built_in">cp</span> config_for_linux_9.7 .config</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷写内核</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># execute in uboot</span></span><br><span class="line">fastboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute in host</span></span><br><span class="line">sudo fastboot flash kernel <span class="built_in">arch</span>/arm/boot/zImage</span><br><span class="line">sudo fastboot reboot</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="搭建文件系统编译环境"><a href="#搭建文件系统编译环境" class="headerlink" title="搭建文件系统编译环境"></a>搭建文件系统编译环境</h1><p>这里使用Buildroot构建文件系统，因为其对老内核的支持较好。</p>
<ol>
<li><p>克隆代码</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitlab.com/buildroot.org/buildroot.git</span><br><span class="line"><span class="built_in">cd</span> buildroot</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Buildroot</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br><span class="line"></span><br><span class="line">Target options:</span><br><span class="line">    Target Architecture: ARM (little endian)</span><br><span class="line">    Target Architecture Variant: cortex-A9</span><br><span class="line"></span><br><span class="line">Toolchain:</span><br><span class="line">    C library: musl</span><br><span class="line">    Kernel Headers: Manually specified Linux version</span><br><span class="line">    linux version: 3.0.15</span><br><span class="line">    Custom kernel headers series: 3.0.x</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建Buildroot</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压rootfs</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -xf output/images/rootfs.tar -C /rootfs</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="设置NFS-Boot网络启动"><a href="#设置NFS-Boot网络启动" class="headerlink" title="设置NFS Boot网络启动"></a>设置NFS Boot网络启动</h1><p>使用NFS挂载根文件系统可以减少文件传输操作，提高开发效率，这里使用Buildroot作为根文件系统。</p>
<ol>
<li><p>配置NFS服务器</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nfs-kernel-server</span><br><span class="line"></span><br><span class="line">sudo vim /etc/exports</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">/rootfs *(rw,<span class="built_in">sync</span>,no_root_squash)</span><br><span class="line">&lt;&lt;&lt;</span><br><span class="line"></span><br><span class="line"><span class="string">sudo systemctl restart nfs-kernel-server</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置内核选项</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Networking support:</span><br><span class="line">    Networking options:</span><br><span class="line">        IP: kernel level autoconfiguration:</span><br><span class="line">            IP: DHCP support: Y</span><br><span class="line">            IP: BOOTP support: Y</span><br><span class="line">            IP: RARP support: Y</span><br><span class="line"></span><br><span class="line">File systems:</span><br><span class="line">    Network File Systems:</span><br><span class="line">        NFS client support:</span><br><span class="line">            NFS client support <span class="keyword">for</span> NFS version 3: Y</span><br><span class="line">        Root file system on NFS: Y</span><br><span class="line"></span><br><span class="line">Boot options:</span><br><span class="line">    Default kernel <span class="built_in">command</span> string: <span class="string">&quot;root=/dev/nfs nfsroot=192.168.0.1:/rootfs,proto=tcp,vers=3 rw ip=192.168.0.2:192.168.0.1:192.168.0.1:255.255.255.0:itop4412:eth0:off init=/linuxrc console=ttySAC2,115200 lcd=9.7&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>调试NFS启动问题</p>
<p> 如果内核无法挂载NFS根文件系统，可以使用以下内核cmdline进行调试</p>
<ul>
<li>nfsrootdebug: 启用NFS Root调试日志</li>
<li>rootdelay&#x3D;N: 等待N秒后再挂载文件系统</li>
<li>rootwait: 等待root出现后再挂载</li>
</ul>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/ComputerInBook/article/details/107575590">https://blog.csdn.net/ComputerInBook/article/details/107575590</a></p>
<p><a href="https://blog.colorfulshark.net/2020/08/23/setup-linux-2-6-system-from-scratch.html">https://blog.colorfulshark.net/2020/08/23/setup-linux-2-6-system-from-scratch.html</a></p>
]]></content>
      <categories>
        <category>Embedded</category>
      </categories>
  </entry>
  <entry>
    <title>使用VSCode进行内核开发</title>
    <url>/2024/12/22/kernel-development-with-vscode.html</url>
    <content><![CDATA[<blockquote>
<p>Linux内核并没有任何官方IDE，所以大家都是各显神通，比较常见的就是使用Vim&#x2F;Emacs结合各种插件，但这种方式普遍存在配置复杂和上手难度高的问题，我个人是不愿意浪费太多时间在IDE上的。碰巧有一款IDE，同样支持大量插件，并且社区活跃，它就是VSCode，所以今天就来看看如何通过各种插件将它打造为高效的内核开发IDE。</p>
</blockquote>
<span id="more"></span>

<h1 id="远程连接Linux服务器"><a href="#远程连接Linux服务器" class="headerlink" title="远程连接Linux服务器"></a>远程连接Linux服务器</h1><p>我们要开发Linux内核，当然最好还是在Linux上进行，除非你的笔记本&#x2F;台式机就是Linux系统，我们更多的还是使用Windows&#x2F;Mac连接服务器来完成开发工作。</p>
<p>通过使用<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a>插件，我们可以像在本地一样，在远程服务器上进行开发。</p>
<p><strong>配置SSH连接</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &lt;HOME&gt;/.ssh/config</span></span><br><span class="line"></span><br><span class="line">Host &lt;IP or hostname&gt;</span><br><span class="line">    HostName kernel-dev</span><br><span class="line">    User &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h1 id="设置代码索引和代码补全"><a href="#设置代码索引和代码补全" class="headerlink" title="设置代码索引和代码补全"></a>设置代码索引和代码补全</h1><p>这一直是内核开发的老大难问题，因为内核源码过于庞大，以往的补全方案，要么速度快，但不精准，如ctags&#x2F;cscope；要么精准，但速度慢，如C&#x2F;C++ IntelliSense。</p>
<p>然而<a href="https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd">clangd</a>插件的出现，非常好的解决了速度和精确性的问题，但它有一个强依赖：需要使用<code>compile_commands.json</code>来生成索引数据。好在内核源码树中已经有工具可以为我们生成<code>compile_commands.json</code>。</p>
<ol>
<li><p>安装clangd</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install clangd</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成<code>compile_commands.json</code></p>
<p> 首先我们需要对内核或模块进行编译，编译成功后，在编译目录执行以下命令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/clang-tools/gen_compile_commands.py</span><br></pre></td></tr></table></figure>

<p> 打开<code>compile_commands.json</code>，确认不为空。</p>
</li>
<li><p>配置clangd插件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Settings &gt; Remote &gt; Extensions &gt; clangd &gt; Arguments</span></span><br><span class="line"></span><br><span class="line">--compile-commands-dir=<span class="variable">$&#123;workspaceFolder&#125;</span></span><br><span class="line">--background-index</span><br><span class="line">--completion-style=detailed</span><br><span class="line">--header-insertion=never</span><br><span class="line">-<span class="built_in">log</span>=info</span><br><span class="line">-pretty</span><br><span class="line">-j=8</span><br></pre></td></tr></table></figure>

<p> 注意最后的<code>-j=8</code>是clangd在生成索引所创建的进程数，通常设置为CPU数量。</p>
</li>
<li><p>配置工程</p>
<p> 因为clangd使用clang来编译每个文件，如果我们的内核是使用GCC编译的，就会存在一些clang无法识别的编译选项，这些编译选项通常是用来进行代码优化的，所以去掉也不会影响代码索引。</p>
<p> 在VSCode中执行命令<code>&gt;clangd: Open project configuration file</code>，打开<code>.clangd</code>文件，加入以下内容</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CompileFlags:</span><br><span class="line">    Remove:</span><br><span class="line">        - -m*</span><br><span class="line">        - -f*</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启clangd</p>
<p> 在VSCode中执行命令<code>&gt;clangd: Restart language server</code>。</p>
</li>
</ol>
<h1 id="配置汇编代码高亮"><a href="#配置汇编代码高亮" class="headerlink" title="配置汇编代码高亮"></a>配置汇编代码高亮</h1><p>做内核开发时，难免会涉及到一些汇编文件，但是VSCode默认并不对汇编文件进行高亮，因此需要安装插件来解决。</p>
<ul>
<li><p>ARM汇编: <a href="https://marketplace.visualstudio.com/items?itemName=dan-c-underwood.arm">Arm Assembly</a></p>
</li>
<li><p>X86汇编: <a href="https://marketplace.visualstudio.com/items?itemName=13xforever.language-x86-64-assembly">x86 and x86_64 Assembly</a></p>
</li>
<li><p>MIPS汇编: <a href="https://marketplace.visualstudio.com/items?itemName=AngaBlue.asm-formatter">MIPS Assembly Formatter</a></p>
</li>
<li><p>LoongArch汇编: <a href="https://marketplace.visualstudio.com/items?itemName=FreeFlyingSheep.loongarch-assembly">LoongArch Assembly</a></p>
</li>
</ul>
<h1 id="显示代码历史git-commit"><a href="#显示代码历史git-commit" class="headerlink" title="显示代码历史git commit"></a>显示代码历史git commit</h1><p>使用<code>git blame</code>是经常使用的“甩锅”手段，通过<a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a>插件，我们可以实时看到每一行代码来自哪个commit。</p>
<h1 id="配置Vim快捷键"><a href="#配置Vim快捷键" class="headerlink" title="配置Vim快捷键"></a>配置Vim快捷键</h1><p>我个人并不是Vim的狂热粉丝，但是Vim的快捷键设定，确实可以让我在大部分时间脱离鼠标和触控板，提高开发效率。通过安装<a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">Vim</a>插件，即可立即享受大部分Vim的快捷键操作。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/clangd/clangd/issues/662">https://github.com/clangd/clangd/issues/662</a></p>
<p><a href="https://stackoverflow.com/questions/49198816/how-to-use-the-visual-studio-code-to-navigate-linux-kernel-source">https://stackoverflow.com/questions/49198816/how-to-use-the-visual-studio-code-to-navigate-linux-kernel-source</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>部署私有IPTV流媒体服务</title>
    <url>/2025/01/25/setup-self-hosted-iptv-service.html</url>
    <content><![CDATA[<blockquote>
<p>最近有一大批IPv6的直播源被封，无奈需要寻找其他更流畅、更稳定的源，结果发现了一个全新的领域：部署私有IPTV流媒体服务，比如pixman，allinone等，本文会介绍市面主流的服务部署方式。</p>
</blockquote>
<span id="more"></span>

<h1 id="Pixman"><a href="#Pixman" class="headerlink" title="Pixman"></a>Pixman</h1><p>官网：<a href="https://pixman.io/">https://pixman.io/</a></p>
<p>TG：<a href="https://t.me/livednowgroup">https://t.me/livednowgroup</a></p>
<p>由于该项目短期内不会维护，已经无法正常播放。</p>
<h1 id="Allinone"><a href="#Allinone" class="headerlink" title="Allinone"></a>Allinone</h1><p>官网：<a href="https://pan.v1.mk/">https://pan.v1.mk/</a></p>
<p>官方文档：<a href="https://pan.v1.mk/%E6%AF%8F%E6%9C%9F%E8%A7%86%E9%A2%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB/allinone%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md">https://pan.v1.mk/每期视频中用到的文件分享/allinone二进制文件/使用说明.md</a></p>
<p>TG：<a href="https://t.me/feiyangdigital">https://t.me/feiyangdigital</a></p>
<ol>
<li><p>生成部署命令</p>
<p> <a href="https://imgtool.v1.mk/allinone.html">https://imgtool.v1.mk/allinone.html</a></p>
</li>
<li><p>使用watchtower自动更新容器</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name watchtower --restart=always -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --interval 3600</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载m3u列表</p>
<p> http:&#x2F;&#x2F;你的IP:35455&#x2F;tv.m3u</p>
</li>
<li><p>使用格式化工具整理频道列表（可选）</p>
<p> <a href="https://github.com/FanchangWang/allinone_format">https://github.com/FanchangWang/allinone_format</a></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=unless-stopped --pull=always -v /etc/allinone_format:/app/config -p 35456:35456 --name allinone_format yuexuangu/allinone_format:latest</span><br></pre></td></tr></table></figure>

<p> http:&#x2F;&#x2F;你的IP:35456&#x2F;</p>
</li>
</ol>
<h1 id="Doube"><a href="#Doube" class="headerlink" title="Doube"></a>Doube</h1><p>TG: <a href="https://t.me/doubebly003">https://t.me/doubebly003</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=doube-itv  --restart=always -p 50001:5000 doubebly/doube-itv:latest</span><br></pre></td></tr></table></figure>

<p>http:&#x2F;&#x2F;你的IP:50001&#x2F;help</p>
<h1 id="PG"><a href="#PG" class="headerlink" title="PG"></a>PG</h1><p>TG: <a href="https://t.me/PandaGroovePG">https://t.me/PandaGroovePG</a></p>
<p>PG需要进入TG发布群组后，手动下载软件包部署。</p>
]]></content>
      <categories>
        <category>Geek</category>
        <category>How-To</category>
      </categories>
      <tags>
        <tag>media</tag>
        <tag>nas</tag>
        <tag>iptv</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux上部署Web文件管理器</title>
    <url>/2025/05/12/deploy-web-file-manager-on-linux.html</url>
    <content><![CDATA[<blockquote>
<p>Linux服务器的文件管理通常依赖sftp或samba，当网络环境较差时，操作延迟会变得非常大，甚至导致文件损坏，通过部署基于浏览器的文件管理服务，可以大大优化远程文件管理的体验。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装FileBrowser"><a href="#安装FileBrowser" class="headerlink" title="安装FileBrowser"></a>安装FileBrowser</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash</span><br></pre></td></tr></table></figure>

<h1 id="配置Systemd"><a href="#配置Systemd" class="headerlink" title="配置Systemd"></a>配置Systemd</h1><p>只需修改<code>WorkingDirectory</code>为需要管理的目录即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/mnt</span><br><span class="line">ExecStart=/usr/local/bin/filebrowser -a 0.0.0.0</span><br><span class="line">Restart=always</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=syslog</span><br><span class="line">SyslogIdentifier=filebrowser</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">Environment=</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://filebrowser.org/installation">https://filebrowser.org/installation</a></p>
]]></content>
      <categories>
        <category>How-To</category>
      </categories>
  </entry>
</search>
